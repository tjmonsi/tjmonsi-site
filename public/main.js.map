{"version":3,"sources":["webpack:///main.js","webpack:///webpack/bootstrap ed4ebd2b7b4a1bb5d91d","webpack:///../node_modules/@polymer/polymer/lib/utils/boot.js","webpack:///../node_modules/@polymer/polymer/lib/utils/case-map.js","webpack:///../node_modules/@polymer/polymer/lib/utils/mixin.js","webpack:///../node_modules/lit-html/lit-html.js","webpack:///../node_modules/@polymer/polymer/lib/utils/async.js","webpack:///../node_modules/@polymer/polymer/lib/utils/path.js","webpack:///../src/core/utils/property-effects-types.js","webpack:///../node_modules/@polymer/polymer/lib/utils/resolve-url.js","webpack:///../src/core/mixins/element-mixin.js","webpack:///./node_modules/css-loader/lib/css-base.js","webpack:///../index.js","webpack:///../src/core/components/main-router/index.js","webpack:///../src/core/mixins/property-effects.js","webpack:///../node_modules/@polymer/polymer/lib/mixins/property-accessors.js","webpack:///../src/core/mixins/template-stamp.js","webpack:///../src/core/utils/host-stack.js","webpack:///../src/core/utils/effects.js","webpack:///../node_modules/@polymer/polymer/lib/utils/settings.js","webpack:///../src/core/utils/data-api.js","webpack:///../node_modules/@polymer/polymer/lib/utils/flattened-nodes-observer.js","webpack:///../node_modules/@polymer/polymer/lib/utils/array-splice.js","webpack:///../src/core/mixins/location-mixin.js","webpack:///../src/core/mixins/query-params-mixin.js","webpack:///../node_modules/path-to-regexp/index.js","webpack:///../src/core/fragments/index.js","webpack:///../src/authentication/index.js","webpack:///../src/core/components/main-router/template.js","webpack:///../src/core/components/main-router/style.scss?9286","webpack:///../src/core/components/main-router/style.scss"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","parentJsonpFunction","window","chunkIds","moreModules","executeModules","chunkId","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","shift","1","e","onScriptComplete","script","onerror","onload","clearTimeout","timeout","chunk","Error","undefined","installedChunkData","Promise","resolve","promise","reject","head","document","getElementsByTagName","createElement","type","charset","async","nc","setAttribute","src","p","0","setTimeout","appendChild","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","n","__esModule","object","property","oe","err","console","error","s","JSCompiler_renameProperty","prop","obj","dashToCamelCase","dash","caseMap","indexOf","replace","DASH_TO_CAMEL","toUpperCase","camelToDashCase","camel","CAMEL_TO_DASH","toLowerCase","value","MixinFunction","dedupingMixin","dedupeId","__mixinApplications","__mixinSet","mixin","base","baseSet","mixinDedupeId","map","mixinApplications","extended","set","mixinSet","create","WeakMap","_classCallCheck","instance","Constructor","TypeError","html","strings","template","templates","Template","_len","arguments","values","Array","_key","TemplateResult","render","result","container","partCallback","defaultPartCallback","__templateInstance","_partCallback","update","TemplateInstance","fragment","_clone","child","lastChild","removeChild","_typeof","Symbol","iterator","constructor","_createClass","defineProperties","target","props","descriptor","writable","key","protoProps","staticProps","Map","this","exprMarker","Math","random","TemplatePart","index","rawName","parts","element","innerHTML","join","walker","createTreeWalker","content","partIndex","nodesToRemove","nextNode","node","currentNode","nodeType","hasAttributes","attributes","attribute","item","attributeStrings","split","attributeString","rawNameString","substring","match","removeAttribute","nodeValue","parent","parentNode","lastIndex","textContent","insertBefore","Text","trim","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","next","done","return","getValue","part","__litDirective","AttributePart","directive","f","size","startIndex","text","v","isArray","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","t","NodePart","startNode","endNode","_previousValue","_setText","_setTemplateResult","_setIterable","Node","_setNode","then","_setPromise","clear","_insert","nextSibling","previousSibling","TEXT_NODE","itemParts","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","itemPart","itemStart","setValue","lastPart","_this","templatePart","_parts","valueIndex","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","importNode","microtaskFlush","len","microtaskCallbacks","cb","splice","microtaskLastHandle","microTask","idlePeriod","animationFrame","timeOut","microtaskCurrHandle","microtaskNodeContent","microtaskNode","createTextNode","MutationObserver","observe","characterData","after","delay","run","fn","cancel","bind","requestAnimationFrame","cancelAnimationFrame","requestIdleCallback","handle","cancelIdleCallback","callback","idx","isPath","path","root","dotIndex","slice","isAncestor","isDescendant","translate","newBase","matches","normalize","args","toString","j","info","last","isDeep","TYPES","COMPUTE","REFLECT","NOTIFY","PROPAGATE","OBSERVE","READ_ONLY","default","resolveUrl","url","baseURI","ABS_URL","test","workingURL","u","URL","pathname","href","location","resolveDoc","implementation","createHTMLDocument","anchor","body","resolveCss","cssText","CSS_URL_RX","pre","post","pathFromUrl","lastIndexOf","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","setPrototypeOf","__proto__","_regLog","log","is","register","registrations","dumpRegistrations","forEach","updateStyles","instanceCount","ElementMixin","_get","receiver","Function","desc","getOwnPropertyDescriptor","getPrototypeOf","_templateObject","raw","freeze","_mixin","_caseMap","caseMap$0","newObj","_litHtml","_propertyEffects","ownPropertiesForClass","klass","__ownProperties","properties","ownObserversForClass","__ownObservers","observers","flattenProperties","flattenedProps","propertiesForClass","__classProperties","superCtor","PolymerElement","assign","propertyDefaultsForClass","__classPropertyDefaults","hasClassFinalized","finalizeClassAndSuper","proto","finalize","finalizeClass","__finalized","finalizeProperties","finalizeObservers","createPropertyFromConfig","dynamicFns","_createMethodObserver","allProps","computed","readOnly","_hasReadOnlyEffect","_createComputedProperty","_createReadOnlyProperty","reflectToAttribute","_hasReflectEffect","_createReflectedProperty","notify","_hasNotifyEffect","_createNotifyingProperty","observer","_createPropertyObserver","polymerElementBase","PropertyEffects","_polymerElementBase","apply","p$","_hasAccessor","_setPendingProperty","ShadyCSS","prepareTemplate","styleElement","_enableProperties","_createPropertyAccessor","_attachDom","attachShadow","shadowRoot","mode","old","_attributeToProperty","styleSubtree","list","__observedAttributes","styleDocument","cssWithMappingToString","useSourceMap","cssMapping","btoa","sourceMapping","toComment","concat","sources","source","sourceRoot","sourceMap","unescape","encodeURIComponent","JSON","stringify","mediaQuery","alreadyImportedModules","id","_interopRequireDefault","_elementMixin","_flattenedNodesObserver","_locationMixin","_locationMixin2","_queryParamsMixin","_queryParamsMixin2","_pathToRegexp","_pathToRegexp2","_fragments","_fragments2","_authentication","_authentication2","_template2","_template3","MainRouter","_QueryParamsMixin","_routes","state","params","queryParams","currentRoute","String","query","urlSpaceRegex","hash","dwellTime","Number","_urlSpaceRegExp","_lastChangedAt","_initialized","Boolean","paramsString","paramsObject","_dontReact","_this2","_observer","FlattenedNodesObserver","_contentAdded","addedNodes","filter","ELEMENT_NODE","disconnect","_listener","message","optTapHandler","optAction","optActionHandler","optDuration","pages","_this3","page","classList","add","getAttribute","auth","_pathChanged","_this4","routeName","entries","route","keys","re","exec","_checkAuth","_this5","res","_loadPage","catch","_this6","routes","remove","nodeName","_setProperty","reload","querySelector","scrollTo","ga","HTMLElement","customElements","define","_propertyAccessors","_path","_templateStamp","_templateStamp2","_propertyEffectsTypes","_propertyEffectsTypes2","_hostStack","_hostStack2","_effects","_dataApi","CaseMap","PropertyEffectsType","propertyEffectsBase","PropertyAccessors","_propertyEffectsBase","__dataClientsReady","__dataPendingClients","__dataToNotify","__dataLinkedPaths","__dataHasPaths","__dataCompoundStorage","__dataHost","__dataTemp","__dataClientsInitialized","__data","__dataPending","__dataOld","__computeEffects","__reflectEffects","__notifyEffects","__propagateEffects","__observeEffects","__readOnly","__dataCounter","registerHost","effect","effects","ensureOwnEffectMap","_hasPropertyEffect","shouldNotify","isPathNotification","computeLinkedPaths","__dataHasAccessor","prevProps","_shouldPropertyChange","_invalidateProperties","__dataReady","_flushProperties","client","__enableOrFlushClients","_readyClients","clients","__dataEnabled","setReadOnly","_setPendingPropertyOrPath","_flushClients","currentProps","changedProps","oldProps","hasPaths","runComputedEffects","notifyProps","_propagatePropertyChanges","runEffects","runNotifyEffects","to","from","splices","array","notifySplices","items","ret","notifySplice","hadLength","pop","start","deleteCount","floor","_len2","_key2","_len3","_key3","unshift","propPath","protectedSetter","_addPropertyEffect","upper","methodName","dynamicFn","trigger","expression","sig","parseMethod","createMethodEffect","runMethodEffect","eventName","attr","warn","attrName","runComputedEffect","saveAccessorValue","model","nativeProperties","__dataProto","_async","microtask","getOwnPropertyNames","_superClass","__serializing","__dataInvalid","__dataInstanceProps","_initializeProperties","a$","observedAttributes","_initializeProtoProperties","hasAttribute","_valueToNodeAttribute","_deserializeValue","str","_serializeValue","Date","x","outValue","parse","changed","_initializeInstanceProperties","ready","_propertiesChanged","createNodeEventHandler","context","_methodHost","detail","_class","handler","_addEventListenerToNode","addEventListener","removeEventListener","stack","inst","_enqueueClient","beginHosting","endHosting","stackLen","protoFx","instFx","extraArgs","ran","runEffectsForProperty","rootProperty","fxs","fx","lastRun","pathMatchesTrigger","triggerPath","structured","wildcard","runObserverEffect","changedProp","notified","notifyPath","host","dispatchNotifyEvent","queueProperty","dispatchEvent","CustomEvent","runNotifyEffect","handleNotification","event","fromProp","toPath","negate","fromPath","runReflectEffect","_settings","sanitizeDOMValue","_propertyToAttribute","computeEffects","inputProps","computedProp","methodInfo","links","link","a","b","effectFn","static","arg","literal","marshalArgs","data","baseChanged","emptyArray","parseArgs","argList","rawArg","parseArg","fc","setSanitizeDOMValue","setRootPath","rootPath","Settings","useNativeCustomElements","useNativeCSSProperties","useShadow","_resolveUrl","settings","ShadyDOM","nativeCss","polyfillWrapFlushCallback","newSanitizeDOMValue","splicesPath","indexSplices","addedCount","removed","isSlot","localName","_arraySplice","_shadyChildrenObserver","_nativeChildrenObserver","_connected","_target","_effectiveNodes","_scheduled","_boundSchedule","_schedule","connect","assignedNodes","flatten","childNodes","reduce","_listenSlots","children","observeChildren","mutations","_processMutations","childList","_unlistenSlots","unobserveChildren","flush","_processSlotMutations","mutation","removedNodes","takeRecords","newNodes","getFlattenedNodes","calculateSplices","didFlush","nodeList","newSplice","calcEditDistances","current","currentStart","currentEnd","oldStart","oldEnd","rowCount","columnCount","distances","equals","north","west","spliceOperationsFromEditDistances","edits","northWest","min","EDIT_LEAVE","EDIT_UPDATE","EDIT_DELETE","EDIT_ADD","reverse","calcSplices","prefixCount","suffixCount","minLength","sharedPrefix","sharedSuffix","ops","oldIndex","searchLength","index1","index2","count","previous","currentValue","previousValue","_boundHashChanged","_hashChanged","_boundUrlChanged","_urlChanged","_boundGlobalOnClick","_globalOnClick","performance","now","decodeURIComponent","search","_dontUpdateUrl","_updateUrl","partiallyEncodedPath","encodeURI","partiallyEncodedQuery","partiallyEncodedHash","newUrl","_getUrl","fullNewUrl","protocol","shouldReplace","history","replaceState","pushState","defaultPrevented","_getSameOriginLinkHref","preventDefault","button","metaKey","ctrlKey","eventPath","composedPath","tagName","top","origin","normalizedHref","RegExp","_decodeParams","_encodeParams","encodedParams","paramString","paramList","param","options","tokens","defaultDelimiter","delimiter","delimiters","pathEscaped","PATH_REGEXP","escaped","offset","prev","capture","group","modifier","k","partial","repeat","optional","pattern","prefix","escapeGroup","escapeString","substr","compile","tokensToFunction","encode","token","segment","flags","sensitive","regexpToRegexp","groups","arrayToRegexp","pathToRegexp","stringToRegexp","tokensToRegExp","strict","end","endsWith","landing-page","_style","_style2"],"mappings":"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","file":"main.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// install a JSONP callback for chunk loading\n/******/ \tvar parentJsonpFunction = window[\"webpackJsonp\"];\n/******/ \twindow[\"webpackJsonp\"] = function webpackJsonpCallback(chunkIds, moreModules, executeModules) {\n/******/ \t\t// add \"moreModules\" to the modules object,\n/******/ \t\t// then flag all \"chunkIds\" as loaded and fire callback\n/******/ \t\tvar moduleId, chunkId, i = 0, resolves = [], result;\n/******/ \t\tfor(;i < chunkIds.length; i++) {\n/******/ \t\t\tchunkId = chunkIds[i];\n/******/ \t\t\tif(installedChunks[chunkId]) {\n/******/ \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n/******/ \t\t\t}\n/******/ \t\t\tinstalledChunks[chunkId] = 0;\n/******/ \t\t}\n/******/ \t\tfor(moduleId in moreModules) {\n/******/ \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n/******/ \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n/******/ \t\t\t}\n/******/ \t\t}\n/******/ \t\tif(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules, executeModules);\n/******/ \t\twhile(resolves.length) {\n/******/ \t\t\tresolves.shift()();\n/******/ \t\t}\n/******/\n/******/ \t};\n/******/\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// objects to store loaded and loading chunks\n/******/ \tvar installedChunks = {\n/******/ \t\t1: 0\n/******/ \t};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/ \t// This file contains only the entry chunk.\n/******/ \t// The chunk loading function for additional chunks\n/******/ \t__webpack_require__.e = function requireEnsure(chunkId) {\n/******/ \t\tvar installedChunkData = installedChunks[chunkId];\n/******/ \t\tif(installedChunkData === 0) {\n/******/ \t\t\treturn new Promise(function(resolve) { resolve(); });\n/******/ \t\t}\n/******/\n/******/ \t\t// a Promise means \"currently loading\".\n/******/ \t\tif(installedChunkData) {\n/******/ \t\t\treturn installedChunkData[2];\n/******/ \t\t}\n/******/\n/******/ \t\t// setup Promise in chunk cache\n/******/ \t\tvar promise = new Promise(function(resolve, reject) {\n/******/ \t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n/******/ \t\t});\n/******/ \t\tinstalledChunkData[2] = promise;\n/******/\n/******/ \t\t// start chunk loading\n/******/ \t\tvar head = document.getElementsByTagName('head')[0];\n/******/ \t\tvar script = document.createElement('script');\n/******/ \t\tscript.type = 'text/javascript';\n/******/ \t\tscript.charset = 'utf-8';\n/******/ \t\tscript.async = true;\n/******/ \t\tscript.timeout = 120000;\n/******/\n/******/ \t\tif (__webpack_require__.nc) {\n/******/ \t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n/******/ \t\t}\n/******/ \t\tscript.src = __webpack_require__.p + \"\" + ({\"0\":\"landing-page\"}[chunkId]||chunkId) + \".\" + chunkId + \".js\";\n/******/ \t\tvar timeout = setTimeout(onScriptComplete, 120000);\n/******/ \t\tscript.onerror = script.onload = onScriptComplete;\n/******/ \t\tfunction onScriptComplete() {\n/******/ \t\t\t// avoid mem leaks in IE.\n/******/ \t\t\tscript.onerror = script.onload = null;\n/******/ \t\t\tclearTimeout(timeout);\n/******/ \t\t\tvar chunk = installedChunks[chunkId];\n/******/ \t\t\tif(chunk !== 0) {\n/******/ \t\t\t\tif(chunk) {\n/******/ \t\t\t\t\tchunk[1](new Error('Loading chunk ' + chunkId + ' failed.'));\n/******/ \t\t\t\t}\n/******/ \t\t\t\tinstalledChunks[chunkId] = undefined;\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t\thead.appendChild(script);\n/******/\n/******/ \t\treturn promise;\n/******/ \t};\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// on error function for async loading\n/******/ \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 20);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nwindow.JSCompiler_renameProperty = function (prop, obj) {\n  return prop;\n};\n\n/** @namespace */\nvar Polymer = void 0;\n\n/***/ }),\n/* 1 */,\n/* 2 */,\n/* 3 */,\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dashToCamelCase = dashToCamelCase;\nexports.camelToDashCase = camelToDashCase;\n\n__webpack_require__(0);\n\nvar caseMap = {};\nvar DASH_TO_CAMEL = /-[a-z]/g;\nvar CAMEL_TO_DASH = /([A-Z])/g;\n\nfunction dashToCamelCase(dash) {\n  return caseMap[dash] || (caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL, function (m) {\n    return m[1].toUpperCase();\n  }));\n}\n\nfunction camelToDashCase(camel) {\n  return caseMap[camel] || (caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase());\n}\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dedupingMixin = undefined;\n\n__webpack_require__(0);\n\n// unique global id for deduping mixins.\nvar dedupeId = 0;\n\n/**\n * @constructor\n * @extends {Function}\n */\nfunction MixinFunction() {}\n/** @type {(WeakMap | undefined)} */\nMixinFunction.prototype.__mixinApplications;\n/** @type {(Object | undefined)} */\nMixinFunction.prototype.__mixinSet;\n\nvar dedupingMixin = exports.dedupingMixin = function dedupingMixin(mixin) {\n  var mixinApplications = /** @type {!MixinFunction} */mixin.__mixinApplications;\n  if (!mixinApplications) {\n    mixinApplications = new WeakMap();\n    /** @type {!MixinFunction} */mixin.__mixinApplications = mixinApplications;\n  }\n  // maintain a unique id for each mixin\n  var mixinDedupeId = dedupeId++;\n  function dedupingMixin(base) {\n    var baseSet = /** @type {!MixinFunction} */base.__mixinSet;\n    if (baseSet && baseSet[mixinDedupeId]) {\n      return base;\n    }\n    var map = mixinApplications;\n    var extended = map.get(base);\n    if (!extended) {\n      extended = /** @type {!Function} */mixin(base);\n      map.set(base, extended);\n    }\n    // copy inherited mixin set from the extended class, or the base class\n    // NOTE: we avoid use of Set here because some browser (IE11)\n    // cannot extend a base Set via the constructor.\n    var mixinSet = Object.create( /** @type {!MixinFunction} */extended.__mixinSet || baseSet || null);\n    mixinSet[mixinDedupeId] = true;\n    /** @type {!MixinFunction} */extended.__mixinSet = mixinSet;\n    return extended;\n  }\n\n  return dedupingMixin;\n};\n\n/***/ }),\n/* 6 */,\n/* 7 */,\n/* 8 */,\n/* 9 */,\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.html = html;\nexports.render = render;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n// The first argument to JS template tags retain identity across multiple\n// calls to a tag for the same literal, so we can cache work done per literal\n// in a Map.\nvar templates = new Map();\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nfunction html(strings) {\n    var template = templates.get(strings);\n    if (template === undefined) {\n        template = new Template(strings);\n        templates.set(strings, template);\n    }\n\n    for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        values[_key - 1] = arguments[_key];\n    }\n\n    return new TemplateResult(template, values);\n}\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\n\nvar TemplateResult = exports.TemplateResult = function TemplateResult(template, values) {\n    _classCallCheck(this, TemplateResult);\n\n    this.template = template;\n    this.values = values;\n};\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n */\n\n\nfunction render(result, container) {\n    var partCallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultPartCallback;\n\n    var instance = container.__templateInstance;\n    // Repeat render, just call update()\n    if (instance !== undefined && instance.template === result.template && instance._partCallback === partCallback) {\n        instance.update(result.values);\n        return;\n    }\n    // First render, create a new TemplateInstance and append it\n    instance = new TemplateInstance(result.template, partCallback);\n    container.__templateInstance = instance;\n    var fragment = instance._clone();\n    instance.update(result.values);\n    var child = void 0;\n    while (child = container.lastChild) {\n        container.removeChild(child);\n    }\n    container.appendChild(fragment);\n}\n/**\n * An expression marker with embedded unique key to avoid\n * https://github.com/PolymerLabs/lit-html/issues/62\n */\nvar exprMarker = '{{lit-' + Math.random() + '}}';\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\n\nvar TemplatePart = exports.TemplatePart = function TemplatePart(type, index, name, rawName, strings) {\n    _classCallCheck(this, TemplatePart);\n\n    this.type = type;\n    this.index = index;\n    this.name = name;\n    this.rawName = rawName;\n    this.strings = strings;\n};\n\nvar Template = exports.Template = function Template(strings) {\n    _classCallCheck(this, Template);\n\n    this.parts = [];\n    this.element = document.createElement('template');\n    this.element.innerHTML = strings.join(exprMarker);\n    var walker = document.createTreeWalker(this.element.content, 5 /* elements & text */);\n    var index = -1;\n    var partIndex = 0;\n    var nodesToRemove = [];\n    while (walker.nextNode()) {\n        index++;\n        var node = walker.currentNode;\n        if (node.nodeType === 1 /* ELEMENT_NODE */) {\n                if (!node.hasAttributes()) continue;\n                var attributes = node.attributes;\n                for (var i = 0; i < attributes.length; i++) {\n                    var attribute = attributes.item(i);\n                    var attributeStrings = attribute.value.split(exprMarker);\n                    if (attributeStrings.length > 1) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute attribute\n                        var attributeString = strings[partIndex];\n                        // Trim the trailing literal value if this is an interpolation\n                        var rawNameString = attributeString.substring(0, attributeString.length - attributeStrings[0].length);\n                        // Find the attribute name\n                        var rawName = rawNameString.match(/((?:\\w|[.\\-_$])+)=[\"']?$/)[1];\n                        this.parts.push(new TemplatePart('attribute', index, attribute.name, rawName, attributeStrings));\n                        node.removeAttribute(attribute.name);\n                        partIndex += attributeStrings.length - 1;\n                        i--;\n                    }\n                }\n            } else if (node.nodeType === 3 /* TEXT_NODE */) {\n                var _strings = node.nodeValue.split(exprMarker);\n                if (_strings.length > 1) {\n                    var parent = node.parentNode;\n                    var lastIndex = _strings.length - 1;\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                    // We keep this current node, but reset its content to the last\n                    // literal part. We insert new literal nodes before this so that the\n                    // tree walker keeps its position correctly.\n                    node.textContent = _strings[lastIndex];\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (var _i = 0; _i < lastIndex; _i++) {\n                        parent.insertBefore(new Text(_strings[_i]), node);\n                        this.parts.push(new TemplatePart('node', index++));\n                    }\n                } else if (!node.nodeValue.trim()) {\n                    nodesToRemove.push(node);\n                    index--;\n                }\n            }\n    }\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = nodesToRemove[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var n = _step.value;\n\n            n.parentNode.removeChild(n);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n};\n\nvar getValue = exports.getValue = function getValue(part, value) {\n    // `null` as the value of a Text node will render the string 'null'\n    // so we convert it to undefined\n    if (value != null && value.__litDirective === true) {\n        value = value(part);\n    }\n    return value === null ? undefined : value;\n};\nvar directive = exports.directive = function directive(f) {\n    f.__litDirective = true;\n    return f;\n};\n\nvar AttributePart = exports.AttributePart = function () {\n    function AttributePart(instance, element, name, strings) {\n        _classCallCheck(this, AttributePart);\n\n        this.instance = instance;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.size = strings.length - 1;\n    }\n\n    _createClass(AttributePart, [{\n        key: 'setValue',\n        value: function setValue(values, startIndex) {\n            var strings = this.strings;\n            var text = '';\n            for (var i = 0; i < strings.length; i++) {\n                text += strings[i];\n                if (i < strings.length - 1) {\n                    var v = getValue(this, values[startIndex + i]);\n                    if (v && (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n                        var _iteratorNormalCompletion2 = true;\n                        var _didIteratorError2 = false;\n                        var _iteratorError2 = undefined;\n\n                        try {\n                            for (var _iterator2 = v[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                                var t = _step2.value;\n\n                                // TODO: we need to recursively call getValue into iterables...\n                                text += t;\n                            }\n                        } catch (err) {\n                            _didIteratorError2 = true;\n                            _iteratorError2 = err;\n                        } finally {\n                            try {\n                                if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                                    _iterator2.return();\n                                }\n                            } finally {\n                                if (_didIteratorError2) {\n                                    throw _iteratorError2;\n                                }\n                            }\n                        }\n                    } else {\n                        text += v;\n                    }\n                }\n            }\n            this.element.setAttribute(this.name, text);\n        }\n    }]);\n\n    return AttributePart;\n}();\n\nvar NodePart = exports.NodePart = function () {\n    function NodePart(instance, startNode, endNode) {\n        _classCallCheck(this, NodePart);\n\n        this.instance = instance;\n        this.startNode = startNode;\n        this.endNode = endNode;\n    }\n\n    _createClass(NodePart, [{\n        key: 'setValue',\n        value: function setValue(value) {\n            value = getValue(this, value);\n            if (value === null || !((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' || typeof value === 'function')) {\n                // Handle primitive values\n                // If the value didn't change, do nothing\n                if (value === this._previousValue) {\n                    return;\n                }\n                this._setText(value);\n            } else if (value instanceof TemplateResult) {\n                this._setTemplateResult(value);\n            } else if (Array.isArray(value) || value[Symbol.iterator]) {\n                this._setIterable(value);\n            } else if (value instanceof Node) {\n                this._setNode(value);\n            } else if (value.then !== undefined) {\n                this._setPromise(value);\n            } else {\n                // Fallback, will render the string representation\n                this._setText(value);\n            }\n        }\n    }, {\n        key: '_insert',\n        value: function _insert(node) {\n            this.endNode.parentNode.insertBefore(node, this.endNode);\n        }\n    }, {\n        key: '_setNode',\n        value: function _setNode(value) {\n            this.clear();\n            this._insert(value);\n            this._previousValue = value;\n        }\n    }, {\n        key: '_setText',\n        value: function _setText(value) {\n            var node = this.startNode.nextSibling;\n            if (node === this.endNode.previousSibling && node.nodeType === Node.TEXT_NODE) {\n                // If we only have a single text node between the markers, we can just\n                // set its value, rather than replacing it.\n                // TODO(justinfagnani): Can we just check if _previousValue is\n                // primitive?\n                node.textContent = value;\n            } else {\n                this._setNode(new Text(value));\n            }\n            this._previousValue = value;\n        }\n    }, {\n        key: '_setTemplateResult',\n        value: function _setTemplateResult(value) {\n            var instance = void 0;\n            if (this._previousValue && this._previousValue.template === value.template) {\n                instance = this._previousValue;\n            } else {\n                instance = new TemplateInstance(value.template, this.instance._partCallback);\n                this._setNode(instance._clone());\n                this._previousValue = instance;\n            }\n            instance.update(value.values);\n        }\n    }, {\n        key: '_setIterable',\n        value: function _setIterable(value) {\n            // For an Iterable, we create a new InstancePart per item, then set its\n            // value to the item. This is a little bit of overhead for every item in\n            // an Iterable, but it lets us recurse easily and efficiently update Arrays\n            // of TemplateResults that will be commonly returned from expressions like:\n            // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n            // If _previousValue is an array, then the previous render was of an\n            // iterable and _previousValue will contain the NodeParts from the previous\n            // render. If _previousValue is not an array, clear this part and make a new\n            // array for NodeParts.\n            if (!Array.isArray(this._previousValue)) {\n                this.clear();\n                this._previousValue = [];\n            }\n            // Lets of keep track of how many items we stamped so we can clear leftover\n            // items from a previous render\n            var itemParts = this._previousValue;\n            var partIndex = 0;\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n                for (var _iterator3 = value[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                    var item = _step3.value;\n\n                    // Try to reuse an existing part\n                    var itemPart = itemParts[partIndex];\n                    // If no existing part, create a new one\n                    if (itemPart === undefined) {\n                        // If we're creating the first item part, it's startNode should be the\n                        // container's startNode\n                        var itemStart = this.startNode;\n                        // If we're not creating the first part, create a new separator marker\n                        // node, and fix up the previous part's endNode to point to it\n                        if (partIndex > 0) {\n                            var previousPart = itemParts[partIndex - 1];\n                            itemStart = previousPart.endNode = new Text();\n                            this._insert(itemStart);\n                        }\n                        itemPart = new NodePart(this.instance, itemStart, this.endNode);\n                        itemParts.push(itemPart);\n                    }\n                    itemPart.setValue(item);\n                    partIndex++;\n                }\n            } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                        _iterator3.return();\n                    }\n                } finally {\n                    if (_didIteratorError3) {\n                        throw _iteratorError3;\n                    }\n                }\n            }\n\n            if (partIndex === 0) {\n                this.clear();\n                this._previousValue = undefined;\n            } else if (partIndex < itemParts.length) {\n                var lastPart = itemParts[partIndex - 1];\n                this.clear(lastPart.endNode.previousSibling);\n                lastPart.endNode = this.endNode;\n            }\n        }\n    }, {\n        key: '_setPromise',\n        value: function _setPromise(value) {\n            var _this = this;\n\n            value.then(function (v) {\n                if (_this._previousValue === value) {\n                    _this.setValue(v);\n                }\n            });\n            this._previousValue = value;\n        }\n    }, {\n        key: 'clear',\n        value: function clear() {\n            var startNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.startNode;\n\n            var node = void 0;\n            while ((node = startNode.nextSibling) !== this.endNode) {\n                node.parentNode.removeChild(node);\n            }\n        }\n    }]);\n\n    return NodePart;\n}();\n\nvar defaultPartCallback = exports.defaultPartCallback = function defaultPartCallback(instance, templatePart, node) {\n    if (templatePart.type === 'attribute') {\n        return new AttributePart(instance, node, templatePart.name, templatePart.strings);\n    } else if (templatePart.type === 'node') {\n        return new NodePart(instance, node, node.nextSibling);\n    }\n    throw new Error('Unknown part type ' + templatePart.type);\n};\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\n\nvar TemplateInstance = exports.TemplateInstance = function () {\n    function TemplateInstance(template) {\n        var partCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultPartCallback;\n\n        _classCallCheck(this, TemplateInstance);\n\n        this._parts = [];\n        this.template = template;\n        this._partCallback = partCallback;\n    }\n\n    _createClass(TemplateInstance, [{\n        key: 'update',\n        value: function update(values) {\n            var valueIndex = 0;\n            var _iteratorNormalCompletion4 = true;\n            var _didIteratorError4 = false;\n            var _iteratorError4 = undefined;\n\n            try {\n                for (var _iterator4 = this._parts[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                    var part = _step4.value;\n\n                    if (part.size === undefined) {\n                        part.setValue(values[valueIndex]);\n                        valueIndex++;\n                    } else {\n                        part.setValue(values, valueIndex);\n                        valueIndex += part.size;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError4 = true;\n                _iteratorError4 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                        _iterator4.return();\n                    }\n                } finally {\n                    if (_didIteratorError4) {\n                        throw _iteratorError4;\n                    }\n                }\n            }\n        }\n    }, {\n        key: '_clone',\n        value: function _clone() {\n            var fragment = document.importNode(this.template.element.content, true);\n            if (this.template.parts.length > 0) {\n                var _walker = document.createTreeWalker(fragment, 5 /* elements & text */);\n                var parts = this.template.parts;\n                var _index = 0;\n                var _partIndex = 0;\n                var templatePart = parts[0];\n                var node = _walker.nextNode();\n                while (node != null && _partIndex < parts.length) {\n                    if (_index === templatePart.index) {\n                        this._parts.push(this._partCallback(this, templatePart, node));\n                        templatePart = parts[++_partIndex];\n                    } else {\n                        _index++;\n                        node = _walker.nextNode();\n                    }\n                }\n            }\n            return fragment;\n        }\n    }]);\n\n    return TemplateInstance;\n}();\n//# sourceMappingURL=lit-html.js.map\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.microTask = exports.idlePeriod = exports.animationFrame = exports.timeOut = undefined;\n\n__webpack_require__(0);\n\n/** @typedef {{run: function(function(), number=):number, cancel: function(number)}} */\nvar AsyncInterface = void 0; // eslint-disable-line no-unused-vars\n\n// Microtask implemented using Mutation Observer\nvar microtaskCurrHandle = 0;\nvar microtaskLastHandle = 0;\nvar microtaskCallbacks = [];\nvar microtaskNodeContent = 0;\nvar microtaskNode = document.createTextNode('');\nnew window.MutationObserver(microtaskFlush).observe(microtaskNode, { characterData: true });\n\nfunction microtaskFlush() {\n  var len = microtaskCallbacks.length;\n  for (var i = 0; i < len; i++) {\n    var cb = microtaskCallbacks[i];\n    if (cb) {\n      try {\n        cb();\n      } catch (e) {\n        setTimeout(function () {\n          throw e;\n        });\n      }\n    }\n  }\n  microtaskCallbacks.splice(0, len);\n  microtaskLastHandle += len;\n}\n\nvar timeOut = exports.timeOut = {\n  /**\n   * Returns a sub-module with the async interface providing the provided\n   * delay.\n   *\n   * @memberof Polymer.Async.timeOut\n   * @param {number} delay Time to wait before calling callbacks in ms\n   * @return {AsyncInterface} An async timeout interface\n   */\n  after: function after(delay) {\n    return {\n      run: function run(fn) {\n        return setTimeout(fn, delay);\n      },\n\n      cancel: window.clearTimeout.bind(window)\n    };\n  },\n\n  /**\n   * Enqueues a function called in the next task.\n   *\n   * @memberof Polymer.Async.timeOut\n   * @param {Function} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run: window.setTimeout.bind(window),\n  /**\n   * Cancels a previously enqueued `timeOut` callback.\n   *\n   * @memberof Polymer.Async.timeOut\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   */\n  cancel: window.clearTimeout.bind(window)\n};\n\nvar animationFrame = exports.animationFrame = {\n  /**\n   * Enqueues a function called at `requestAnimationFrame` timing.\n   *\n   * @memberof Polymer.Async.animationFrame\n   * @param {Function} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run: window.requestAnimationFrame.bind(window),\n  /**\n   * Cancels a previously enqueued `animationFrame` callback.\n   *\n   * @memberof Polymer.Async.timeOut\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   */\n  cancel: window.cancelAnimationFrame.bind(window)\n};\n\nvar idlePeriod = exports.idlePeriod = {\n  /**\n   * Enqueues a function called at `requestIdleCallback` timing.\n   *\n   * @memberof Polymer.Async.idlePeriod\n   * @param {function(IdleDeadline)} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run: function run(fn) {\n    return window.requestIdleCallback ? window.requestIdleCallback(fn) : window.setTimeout(fn, 16);\n  },\n\n  /**\n   * Cancels a previously enqueued `idlePeriod` callback.\n   *\n   * @memberof Polymer.Async.idlePeriod\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   */\n  cancel: function cancel(handle) {\n    window.cancelIdleCallback ? window.cancelIdleCallback(handle) : window.clearTimeout(handle);\n  }\n};\n\nvar microTask = exports.microTask = {\n\n  /**\n   * Enqueues a function called at microtask timing.\n   *\n   * @memberof Polymer.Async.microTask\n   * @param {Function} callback Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run: function run(callback) {\n    microtaskNode.textContent = microtaskNodeContent++;\n    microtaskCallbacks.push(callback);\n    return microtaskCurrHandle++;\n  },\n\n\n  /**\n   * Cancels a previously enqueued `microTask` callback.\n   *\n   * @memberof Polymer.Async.microTask\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   */\n  cancel: function cancel(handle) {\n    var idx = handle - microtaskLastHandle;\n    if (idx >= 0) {\n      if (!microtaskCallbacks[idx]) {\n        throw new Error('invalid async handle: ' + handle);\n      }\n      microtaskCallbacks[idx] = null;\n    }\n  }\n};\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isDeep = undefined;\nexports.isPath = isPath;\nexports.root = root;\nexports.isAncestor = isAncestor;\nexports.isDescendant = isDescendant;\nexports.translate = translate;\nexports.matches = matches;\nexports.normalize = normalize;\nexports.split = split;\nexports.get = get;\nexports.set = set;\n\n__webpack_require__(0);\n\nfunction isPath(path) {\n  return path.indexOf('.') >= 0;\n}\n\nfunction root(path) {\n  var dotIndex = path.indexOf('.');\n  if (dotIndex === -1) {\n    return path;\n  }\n  return path.slice(0, dotIndex);\n}\n\nfunction isAncestor(base, path) {\n  //     base.startsWith(path + '.');\n  return base.indexOf(path + '.') === 0;\n}\n\nfunction isDescendant(base, path) {\n  //     path.startsWith(base + '.');\n  return path.indexOf(base + '.') === 0;\n}\n\nfunction translate(base, newBase, path) {\n  return newBase + path.slice(base.length);\n}\n\nfunction matches(base, path) {\n  return base === path || isAncestor(base, path) || isDescendant(base, path);\n}\n\nfunction normalize(path) {\n  if (Array.isArray(path)) {\n    var parts = [];\n    for (var i = 0; i < path.length; i++) {\n      var args = path[i].toString().split('.');\n      for (var j = 0; j < args.length; j++) {\n        parts.push(args[j]);\n      }\n    }\n    return parts.join('.');\n  } else {\n    return path;\n  }\n}\n\nfunction split(path) {\n  if (Array.isArray(path)) {\n    return normalize(path).split('.');\n  }\n  return path.toString().split('.');\n}\n\nfunction get(root, path, info) {\n  var prop = root;\n  var parts = split(path);\n  // Loop over path parts[0..n-1] and dereference\n  for (var i = 0; i < parts.length; i++) {\n    if (!prop) {\n      return;\n    }\n    var part = parts[i];\n    prop = prop[part];\n  }\n  if (info) {\n    info.path = parts.join('.');\n  }\n  return prop;\n}\n\nfunction set(root, path, value) {\n  var prop = root;\n  var parts = split(path);\n  var last = parts[parts.length - 1];\n  if (parts.length > 1) {\n    // Loop over path parts[0..n-2] and dereference\n    for (var i = 0; i < parts.length - 1; i++) {\n      var part = parts[i];\n      prop = prop[part];\n      if (!prop) {\n        return;\n      }\n    }\n    // Set value to object at end of path\n    prop[last] = value;\n  } else {\n    // Simple property set\n    prop[path] = value;\n  }\n  return parts.join('.');\n}\n\nvar isDeep = exports.isDeep = isPath;\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Property effect types; effects are stored on the prototype using these keys\n * @enum {string}\n */\nvar TYPES = {\n  COMPUTE: '__computeEffects',\n  REFLECT: '__reflectEffects',\n  NOTIFY: '__notifyEffects',\n  PROPAGATE: '__propagateEffects',\n  OBSERVE: '__observeEffects',\n  READ_ONLY: '__readOnly'\n};\n\nexports.default = TYPES;\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pathFromUrl = exports.resolveUrl = exports.resolveCss = undefined;\n\n__webpack_require__(0);\n\nvar CSS_URL_RX = /(url\\()([^)]*)(\\))/g;\nvar ABS_URL = /(^\\/)|(^#)|(^[\\w-\\d]*:)/;\nvar workingURL = void 0;\nvar resolveDoc = void 0;\n/**\n * Resolves the given URL against the provided `baseUri'.\n *\n * @memberof Polymer.ResolveUrl\n * @param {string} url Input URL to resolve\n * @param {?string=} baseURI Base URI to resolve the URL against\n * @return {string} resolved URL\n */\nfunction resolveUrl(url, baseURI) {\n  if (url && ABS_URL.test(url)) {\n    return url;\n  }\n  // Lazy feature detection.\n  if (workingURL === undefined) {\n    workingURL = false;\n    try {\n      var u = new URL('b', 'http://a');\n      u.pathname = 'c%20d';\n      workingURL = u.href === 'http://a/c%20d';\n    } catch (e) {\n      // silently fail\n    }\n  }\n  if (!baseURI) {\n    baseURI = document.baseURI || window.location.href;\n  }\n  if (workingURL) {\n    return new URL(url, baseURI).href;\n  }\n  // Fallback to creating an anchor into a disconnected document.\n  if (!resolveDoc) {\n    resolveDoc = document.implementation.createHTMLDocument('temp');\n    resolveDoc.base = resolveDoc.createElement('base');\n    resolveDoc.head.appendChild(resolveDoc.base);\n    resolveDoc.anchor = resolveDoc.createElement('a');\n    resolveDoc.body.appendChild(resolveDoc.anchor);\n  }\n  resolveDoc.base.href = baseURI;\n  resolveDoc.anchor.href = url;\n  return resolveDoc.anchor.href || url;\n}\n\n/**\n * Resolves any relative URL's in the given CSS text against the provided\n * `ownerDocument`'s `baseURI`.\n *\n * @memberof Polymer.ResolveUrl\n * @param {string} cssText CSS text to process\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Processed CSS text with resolved URL's\n */\nfunction resolveCss(cssText, baseURI) {\n  return cssText.replace(CSS_URL_RX, function (m, pre, url, post) {\n    return pre + '\\'' + resolveUrl(url.replace(/[\"']/g, ''), baseURI) + '\\'' + post;\n  });\n}\n\n/**\n * Returns a path from a given `url`. The path includes the trailing\n * `/` from the url.\n *\n * @memberof Polymer.ResolveUrl\n * @param {string} url Input URL to transform\n * @return {string} resolved path\n */\nfunction pathFromUrl(url) {\n  return url.substring(0, url.lastIndexOf('/') + 1);\n}\n\nexports.resolveCss = resolveCss;\nexports.resolveUrl = resolveUrl;\nexports.pathFromUrl = pathFromUrl;\n\n/***/ }),\n/* 15 */,\n/* 16 */,\n/* 17 */,\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateStyles = exports.registrations = exports.instanceCount = exports.ElementMixin = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _templateObject = _taggedTemplateLiteral([''], ['']);\n\nexports._regLog = _regLog;\nexports.register = register;\nexports.dumpRegistrations = dumpRegistrations;\n\nvar _mixin = __webpack_require__(5);\n\nvar _caseMap = __webpack_require__(4);\n\nvar caseMap$0 = _interopRequireWildcard(_caseMap);\n\nvar _litHtml = __webpack_require__(10);\n\nvar _propertyEffects = __webpack_require__(22);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n// import { cssFromModuleImports, cssFromTemplate } from '@polymer/polymer/lib/utils/style-gather';\n// import { resolveUrl as resolveUrl$0 } from '@polymer/polymer/lib/utils/resolve-url';\n\n\nvar camelToDashCase = caseMap$0.camelToDashCase;\n\n\nvar JSCompiler_renameProperty = function JSCompiler_renameProperty(prop, obj) {\n  // eslint-disable-line camelcase\n  return prop;\n};\n\nvar ElementMixin = exports.ElementMixin = (0, _mixin.dedupingMixin)(function (base) {\n  /**\n   * @constructor\n   * @extends {base}\n   * @implements {Polymer_PropertyEffects}\n   */\n  var polymerElementBase = (0, _propertyEffects.PropertyEffects)(base);\n\n  var caseMap = caseMap$0;\n\n  /**\n   * Returns the `properties` object specifically on `klass`. Use for:\n   * (1) super chain mixes togther to make `propertiesForClass` which is\n   * then used to make `observedAttributes`.\n   * (2) properties effects and observers are created from it at `finalize` time.\n   *\n   * @param {HTMLElement} klass Element class\n   * @return {Object} Object containing own properties for this class\n   * @private\n   */\n  function ownPropertiesForClass(klass) {\n    if (!klass.hasOwnProperty(JSCompiler_renameProperty('__ownProperties', klass))) {\n      klass.__ownProperties = klass.hasOwnProperty(JSCompiler_renameProperty('properties', klass)) ? /** @type PolymerElementConstructor */klass.properties : {};\n    }\n    return klass.__ownProperties;\n  }\n\n  /**\n   * Returns the `observers` array specifically on `klass`. Use for\n   * setting up observers.\n   *\n   * @param {HTMLElement} klass Element class\n   * @return {Array} Array containing own observers for this class\n   * @private\n   */\n  function ownObserversForClass(klass) {\n    if (!klass.hasOwnProperty(JSCompiler_renameProperty('__ownObservers', klass))) {\n      klass.__ownObservers = klass.hasOwnProperty(JSCompiler_renameProperty('observers', klass)) ? /** @type PolymerElementConstructor */klass.observers : [];\n    }\n    return klass.__ownObservers;\n  }\n\n  /**\n   * Mixes `props` into `flattenedProps` but upgrades shorthand type\n   * syntax to { type: Type}.\n   *\n   * @param {Object} flattenedProps Bag to collect flattened properties into\n   * @param {Object} props Bag of properties to add to `flattenedProps`\n   * @return {Object} The input `flattenedProps` bag\n   * @private\n   */\n  function flattenProperties(flattenedProps, props) {\n    for (var p in props) {\n      var o = props[p];\n      if (typeof o === 'function') {\n        o = { type: o };\n      }\n      flattenedProps[p] = o;\n    }\n    return flattenedProps;\n  }\n\n  /**\n   * Returns a flattened list of properties mixed together from the chain of all\n   * constructor's `config.properties`. This list is used to create\n   * (1) observedAttributes,\n   * (2) class property default values\n   *\n   * @param {PolymerElementConstructor} klass Element class\n   * @return {PolymerElementProperties} Flattened properties for this class\n   * @suppress {missingProperties} class.prototype is not a property for some reason?\n   * @private\n   */\n  function propertiesForClass(klass) {\n    if (!klass.hasOwnProperty(JSCompiler_renameProperty('__classProperties', klass))) {\n      klass.__classProperties = flattenProperties({}, ownPropertiesForClass(klass));\n      var superCtor = Object.getPrototypeOf(klass.prototype).constructor;\n      if (superCtor.prototype instanceof PolymerElement) {\n        klass.__classProperties = Object.assign(Object.create(propertiesForClass( /** @type PolymerElementConstructor */superCtor)), klass.__classProperties);\n      }\n    }\n    return klass.__classProperties;\n  }\n\n  /**\n   * Returns a list of properties with default values.\n   * This list is created as an optimization since it is a subset of\n   * the list returned from `propertiesForClass`.\n   * This list is used in `_initializeProperties` to set property defaults.\n   *\n   * @param {PolymerElementConstructor} klass Element class\n   * @return {PolymerElementProperties} Flattened properties for this class\n   *   that have default values\n   * @private\n   */\n  function propertyDefaultsForClass(klass) {\n    if (!klass.hasOwnProperty(JSCompiler_renameProperty('__classPropertyDefaults', klass))) {\n      klass.__classPropertyDefaults = null;\n      var props = propertiesForClass(klass);\n      for (var p in props) {\n        var info = props[p];\n        if ('value' in info) {\n          klass.__classPropertyDefaults = klass.__classPropertyDefaults || {};\n          klass.__classPropertyDefaults[p] = info;\n        }\n      }\n    }\n    return klass.__classPropertyDefaults;\n  }\n\n  /**\n   * Returns true if a `klass` has finalized. Called in `ElementClass.finalize()`\n   * @param {PolymerElementConstructor} klass Element class\n   * @return {boolean} True if all metaprogramming for this class has been\n   *   completed\n   * @private\n   */\n  function hasClassFinalized(klass) {\n    return klass.hasOwnProperty(JSCompiler_renameProperty('__finalized', klass));\n  }\n\n  /**\n   * Called by `ElementClass.finalize()`. Ensures this `klass` and\n   * *all superclasses* are finalized by traversing the prototype chain\n   * and calling `klass.finalize()`.\n   *\n   * @param {PolymerElementConstructor} klass Element class\n   * @private\n   */\n  function finalizeClassAndSuper(klass) {\n    var proto = /** @type PolymerElementConstructor */klass.prototype;\n    var superCtor = Object.getPrototypeOf(proto).constructor;\n    if (superCtor.prototype instanceof PolymerElement) {\n      superCtor.finalize();\n    }\n    finalizeClass(klass);\n  }\n\n  /**\n   * Configures a `klass` based on a staic `klass.config` object and\n   * a `template`. This includes creating accessors and effects\n   * for properties in `config` and the `template` as well as preparing the\n   * `template` for stamping.\n   *\n   * @param {PolymerElementConstructor} klass Element class\n   * @private\n   */\n  function finalizeClass(klass) {\n    klass.__finalized = true;\n    var proto = /** @type PolymerElementConstructor */klass.prototype;\n    if (klass.hasOwnProperty(JSCompiler_renameProperty('is', klass)) && klass.is) {\n      register(proto);\n    }\n    var props = ownPropertiesForClass(klass);\n    if (props) {\n      finalizeProperties(proto, props);\n    }\n    var observers = ownObserversForClass(klass);\n    if (observers) {\n      finalizeObservers(proto, observers, props);\n    }\n    // note: create \"working\" template that is finalized at instance time\n    // let template = /** @type PolymerElementConstructor */ (klass).template;\n    // if (template) {\n    //   if (typeof template === 'string') {\n    //     let t = document.createElement('template');\n    //     t.innerHTML = template;\n    //     template = t;\n    //   } else {\n    //     template = template.cloneNode(true);\n    //   }\n    //   proto._template = template;\n    // }\n  }\n\n  /**\n   * Configures a `proto` based on a `properties` object.\n   * Leverages `PropertyEffects` to create property accessors and effects\n   * supporting, observers, reflecting to attributes, change notification,\n   * computed properties, and read only properties.\n   * @param {PolymerElement} proto Element class prototype to add accessors\n   *    and effects to\n   * @param {Object} properties Flattened bag of property descriptors for\n   *    this class\n   * @private\n   */\n  function finalizeProperties(proto, properties) {\n    for (var p in properties) {\n      createPropertyFromConfig(proto, p, properties[p], properties);\n    }\n  }\n\n  /**\n   * Configures a `proto` based on a `observers` array.\n   * Leverages `PropertyEffects` to create observers.\n   * @param {PolymerElement} proto Element class prototype to add accessors\n   *   and effects to\n   * @param {Object} observers Flattened array of observer descriptors for\n   *   this class\n   * @param {Object} dynamicFns Object containing keys for any properties\n   *   that are functions and should trigger the effect when the function\n   *   reference is changed\n   * @private\n   */\n  function finalizeObservers(proto, observers, dynamicFns) {\n    for (var i = 0; i < observers.length; i++) {\n      proto._createMethodObserver(observers[i], dynamicFns);\n    }\n  }\n\n  /**\n   * Creates effects for a property.\n   *\n   * Note, once a property has been set to\n   * `readOnly`, `computed`, `reflectToAttribute`, or `notify`\n   * these values may not be changed. For example, a subclass cannot\n   * alter these settings. However, additional `observers` may be added\n   * by subclasses.\n   *\n   * The info object should may contain property metadata as follows:\n   *\n   * * `type`: {function} type to which an attribute matching the property\n   * is deserialized. Note the property is camel-cased from a dash-cased\n   * attribute. For example, 'foo-bar' attribute is dersialized to a\n   * property named 'fooBar'.\n   *\n   * * `readOnly`: {boolean} creates a readOnly property and\n   * makes a private setter for the private of the form '_setFoo' for a\n   * property 'foo',\n   *\n   * * `computed`: {string} creates a computed property. A computed property\n   * also automatically is set to `readOnly: true`. The value is calculated\n   * by running a method and arguments parsed from the given string. For\n   * example 'compute(foo)' will compute a given property when the\n   * 'foo' property changes by executing the 'compute' method. This method\n   * must return the computed value.\n   *\n   * * `reflectToAttriute`: {boolean} If true, the property value is reflected\n   * to an attribute of the same name. Note, the attribute is dash-cased\n   * so a property named 'fooBar' is reflected as 'foo-bar'.\n   *\n   * * `notify`: {boolean} sends a non-bubbling notification event when\n   * the property changes. For example, a property named 'foo' sends an\n   * event named 'foo-changed' with `event.detail` set to the value of\n   * the property.\n   *\n   * * observer: {string} name of a method that runs when the property\n   * changes. The arguments of the method are (value, previousValue).\n   *\n   * Note: Users may want control over modifying property\n   * effects via subclassing. For example, a user might want to make a\n   * reflectToAttribute property not do so in a subclass. We've chosen to\n   * disable this because it leads to additional complication.\n   * For example, a readOnly effect generates a special setter. If a subclass\n   * disables the effect, the setter would fail unexpectedly.\n   * Based on feedback, we may want to try to make effects more malleable\n   * and/or provide an advanced api for manipulating them.\n   * Also consider adding warnings when an effect cannot be changed.\n   *\n   * @param {PolymerElement} proto Element class prototype to add accessors\n   *   and effects to\n   * @param {string} name Name of the property.\n   * @param {Object} info Info object from which to create property effects.\n   * Supported keys:\n   * @param {Object} allProps Flattened map of all properties defined in this\n   *   element (including inherited properties)\n   * @private\n   */\n  function createPropertyFromConfig(proto, name, info, allProps) {\n    // computed forces readOnly...\n    if (info.computed) {\n      info.readOnly = true;\n    }\n    // Note, since all computed properties are readOnly, this prevents\n    // adding additional computed property effects (which leads to a confusing\n    // setup where multiple triggers for setting a property)\n    // While we do have `hasComputedEffect` this is set on the property's\n    // dependencies rather than itself.\n    if (info.computed && !proto._hasReadOnlyEffect(name)) {\n      proto._createComputedProperty(name, info.computed, allProps);\n    }\n    if (info.readOnly && !proto._hasReadOnlyEffect(name)) {\n      proto._createReadOnlyProperty(name, !info.computed);\n    }\n    if (info.reflectToAttribute && !proto._hasReflectEffect(name)) {\n      proto._createReflectedProperty(name);\n    }\n    if (info.notify && !proto._hasNotifyEffect(name)) {\n      proto._createNotifyingProperty(name);\n    }\n    // always add observer\n    if (info.observer) {\n      proto._createPropertyObserver(name, info.observer, allProps[info.observer]);\n    }\n  }\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @unrestricted\n   * @implements {Polymer_ElementMixin}\n   */\n\n  var PolymerElement = function (_polymerElementBase) {\n    _inherits(PolymerElement, _polymerElementBase);\n\n    function PolymerElement() {\n      _classCallCheck(this, PolymerElement);\n\n      return _possibleConstructorReturn(this, (PolymerElement.__proto__ || Object.getPrototypeOf(PolymerElement)).apply(this, arguments));\n    }\n\n    _createClass(PolymerElement, [{\n      key: '_initializeProperties',\n\n\n      /**\n       * Overrides the default `Polymer.PropertyAccessors` to ensure class\n       * metaprogramming related to property accessors and effects has\n       * completed (calls `finalize`).\n       *\n       * It also initializes any property defaults provided via `value` in\n       * `properties` metadata.\n       *\n       * @override\n       * @suppress {invalidCasts}\n       */\n      value: function _initializeProperties() {\n        exports.instanceCount = instanceCount += 1;\n        this.constructor.finalize();\n        // // note: finalize template when we have access to `localName` to\n        // // avoid dependence on `is` for polyfilling styling.\n        // if (this._template && !this._template.__polymerFinalized) {\n        //   this._template.__polymerFinalized = true;\n        //   const baseURI =\n        //     importPath ? resolveUrl$0(importPath) : '';\n        //   finalizeTemplate(/** @type {!PolymerElement} */(this.__proto__), this._template, baseURI,\n        //     /** @type {!HTMLElement} */(this).localName);\n        // }\n        _get(PolymerElement.prototype.__proto__ || Object.getPrototypeOf(PolymerElement.prototype), '_initializeProperties', this).call(this);\n        // apply property defaults...\n        var p$ = propertyDefaultsForClass(this.constructor);\n        if (!p$) {\n          return;\n        }\n        for (var p in p$) {\n          var info = p$[p];\n          // Don't set default value if there is already an own property, which\n          // happens when a `properties` property with default but no effects had\n          // a property set (e.g. bound) by its host before upgrade\n          if (!this.hasOwnProperty(p)) {\n            var value = typeof info.value === 'function' ? info.value.call(this) : info.value;\n            // Set via `_setProperty` if there is an accessor, to enable\n            // initializing readOnly property defaults\n            if (this._hasAccessor(p)) {\n              this._setPendingProperty(p, value, true);\n            } else {\n              this[p] = value;\n            }\n          }\n        }\n      }\n\n      /**\n       * Provides a default implementation of the standard Custom Elements\n       * `connectedCallback`.\n       *\n       * The default implementation enables the property effects system and\n       * flushes any pending properties, and updates shimmed CSS properties\n       * when using the ShadyCSS scoping/custom properties polyfill.\n       *\n       * @suppress {invalidCasts}\n       */\n\n    }, {\n      key: 'connectedCallback',\n      value: function connectedCallback() {\n        if (window.ShadyCSS) {\n          var template = document.createElement('template');\n          (0, _litHtml.render)(this.template(), template.content);\n          window.ShadyCSS.prepareTemplate(template, this.constructor.is);\n          window.ShadyCSS.styleElement( /** @type {!HTMLElement} */this);\n        }\n\n        this._enableProperties();\n      }\n\n      /**\n       * Provides a default implementation of the standard Custom Elements\n       * `disconnectedCallback`.\n       */\n\n    }, {\n      key: 'disconnectedCallback',\n      value: function disconnectedCallback() {}\n    }, {\n      key: 'ready',\n      value: function ready() {\n        var props = propertiesForClass(this.constructor);\n        for (var i in props) {\n          this._createPropertyAccessor(i, props[i].readOnly);\n        }\n        _get(PolymerElement.prototype.__proto__ || Object.getPrototypeOf(PolymerElement.prototype), 'ready', this).call(this);\n      }\n\n      /**\n       * Implements `PropertyEffects`'s `_readyClients` call. Attaches\n       * element dom by calling `_attachDom` with the dom stamped from the\n       * element's template via `_stampTemplate`. Note that this allows\n       * client dom to be attached to the element prior to any observers\n       * running.\n       *\n       * @override\n       */\n\n    }, {\n      key: '_readyClients',\n      value: function _readyClients() {\n        this._attachDom();\n\n        // The super._readyClients here sets the clients initialized flag.\n        // We must wait to do this until after client dom is created/attached\n        // so that this flag can be checked to prevent notifications fired\n        // during this process from being handled before clients are ready.\n        _get(PolymerElement.prototype.__proto__ || Object.getPrototypeOf(PolymerElement.prototype), '_readyClients', this).call(this);\n      }\n\n      /**\n       * Attaches an element's stamped dom to itself. By default,\n       * this method creates a `shadowRoot` and adds the dom to it.\n       * However, this method may be overridden to allow an element\n       * to put its dom in another location.\n       *\n       * @throws {Error}\n       * @suppress {missingReturn}\n       * @param {StampedTemplate} dom to attach to the element.\n       * @return {ShadowRoot} node to which the dom has been attached.\n       */\n\n    }, {\n      key: '_attachDom',\n      value: function _attachDom() {\n        if (this.attachShadow) {\n          if (!this.shadowRoot) {\n            this.attachShadow({ mode: 'open' });\n          }\n          this.render();\n        } else {\n          throw new Error('ShadowDOM not available. ' +\n          // TODO(sorvell): move to compile-time conditional when supported\n          'Polymer.Element can create dom as children instead of in ' + 'ShadowDOM by setting `this.root = this;` before `ready`.');\n        }\n      }\n\n      /**\n       * Provides a default implementation of the standard Custom Elements\n       * `attributeChangedCallback`.\n       *\n       * By default, attributes declared in `properties` metadata are\n       * deserialized using their `type` information to properties of the\n       * same name.  \"Dash-cased\" attributes are deserialzed to \"camelCase\"\n       * properties.\n       *\n       * @param {string} name Name of attribute.\n       * @param {?string} old Old value of attribute.\n       * @param {?string} value Current value of attribute.\n       * @override\n       */\n\n    }, {\n      key: 'attributeChangedCallback',\n      value: function attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n          var property = caseMap.dashToCamelCase(name);\n          var type = propertiesForClass(this.constructor)[property].type;\n          if (!this._hasReadOnlyEffect(property)) {\n            this._attributeToProperty(name, value, type);\n          }\n        }\n      }\n\n      /**\n       * When using the ShadyCSS scoping and custom property shim, causes all\n       * shimmed styles in this element (and its subtree) to be updated\n       * based on current custom property values.\n       *\n       * The optional parameter overrides inline custom property styles with an\n       * object of properties where the keys are CSS properties, and the values\n       * are strings.\n       *\n       * Example: `this.updateStyles({'--color': 'blue'})`\n       *\n       * These properties are retained unless a value of `null` is set.\n       *\n       * @param {Object=} properties Bag of custom property key/values to\n       *   apply to this element.\n       * @suppress {invalidCasts}\n       */\n\n    }, {\n      key: 'updateStyles',\n      value: function updateStyles(properties) {\n        if (window.ShadyCSS) {\n          window.ShadyCSS.styleSubtree( /** @type {!HTMLElement} */this, properties);\n        }\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        (0, _litHtml.render)(this.template(this), this.shadowRoot);\n      }\n    }, {\n      key: 'template',\n      value: function template() {\n        return (0, _litHtml.html)(_templateObject);\n      }\n    }], [{\n      key: 'finalize',\n\n\n      /**\n       * Called automatically when the first element instance is created to\n       * ensure that class finalization work has been completed.\n       * May be called by users to eagerly perform class finalization work\n       * prior to the creation of the first element instance.\n       *\n       * Class finalization work generally includes meta-programming such as\n       * creating property accessors and any property effect metadata needed for\n       * the features used.\n       *\n       * @public\n       */\n      value: function finalize() {\n        if (!hasClassFinalized(this)) {\n          finalizeClassAndSuper(this);\n        }\n      }\n    }, {\n      key: 'observedAttributes',\n\n      /**\n       * Standard Custom Elements V1 API.  The default implementation returns\n       * a list of dash-cased attributes based on a flattening of all properties\n       * declared in `static get properties()` for this element and any\n       * superclasses.\n       *\n       * @return {Array} Observed attribute list\n       */\n      get: function get() {\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('__observedAttributes', this))) {\n          var list = [];\n          var properties = propertiesForClass(this);\n          for (var prop in properties) {\n            list.push(camelToDashCase(prop));\n          }\n          this.__observedAttributes = list;\n        }\n        return this.__observedAttributes;\n      }\n    }]);\n\n    return PolymerElement;\n  }(polymerElementBase);\n\n  return PolymerElement;\n});\n\nvar instanceCount = exports.instanceCount = 0;\nvar registrations = exports.registrations = [];\n\nfunction _regLog(prototype) {\n  console.log('[' + prototype.is + ']: registered');\n}\n\nfunction register(prototype) {\n  registrations.push(prototype);\n  undefined && _regLog(prototype);\n}\n\nfunction dumpRegistrations() {\n  registrations.forEach(_regLog);\n}\n\nvar updateStyles = exports.updateStyles = function updateStyles(props) {\n  if (window.ShadyCSS) {\n    window.ShadyCSS.styleDocument(props);\n  }\n};\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function (useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif (item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function (modules, mediaQuery) {\n\t\tif (typeof modules === \"string\") modules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor (var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif (typeof id === \"number\") alreadyImportedModules[id] = true;\n\t\t}\n\t\tfor (i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif (typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif (mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if (mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n__webpack_require__(21);\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _elementMixin = __webpack_require__(18);\n\nvar _flattenedNodesObserver = __webpack_require__(29);\n\nvar _locationMixin = __webpack_require__(31);\n\nvar _locationMixin2 = _interopRequireDefault(_locationMixin);\n\nvar _queryParamsMixin = __webpack_require__(32);\n\nvar _queryParamsMixin2 = _interopRequireDefault(_queryParamsMixin);\n\nvar _pathToRegexp = __webpack_require__(33);\n\nvar _pathToRegexp2 = _interopRequireDefault(_pathToRegexp);\n\nvar _fragments = __webpack_require__(34);\n\nvar _fragments2 = _interopRequireDefault(_fragments);\n\nvar _authentication = __webpack_require__(35);\n\nvar _authentication2 = _interopRequireDefault(_authentication);\n\nvar _template2 = __webpack_require__(36);\n\nvar _template3 = _interopRequireDefault(_template2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar MainRouter = function (_QueryParamsMixin) {\n  _inherits(MainRouter, _QueryParamsMixin);\n\n  _createClass(MainRouter, null, [{\n    key: 'is',\n    get: function get() {\n      return 'main-router';\n    }\n  }, {\n    key: 'properties',\n    get: function get() {\n      return {\n        params: {\n          type: Object\n        },\n\n        queryParams: {\n          type: Object\n        },\n\n        currentRoute: {\n          type: String\n        },\n\n        // location-mixin\n        path: {\n          type: String\n        },\n\n        query: {\n          type: String,\n          observer: '_queryChanged'\n        },\n\n        urlSpaceRegex: {\n          type: String\n        },\n\n        hash: {\n          type: String\n        },\n\n        dwellTime: {\n          type: Number\n        },\n\n        _urlSpaceRegExp: {\n          type: String,\n          computed: '_makeRegExp(urlSpaceRegex)'\n        },\n\n        _lastChangedAt: {\n          type: String\n        },\n\n        _initialized: {\n          type: Boolean\n        },\n\n        // query params 'paramsString', 'paramsObject', '_dontReact'\n\n        paramsString: {\n          type: String,\n          observer: '_paramsStringChanged'\n        },\n\n        paramsObject: {\n          type: Object\n        },\n\n        _dontReact: {\n          type: Boolean\n        }\n      };\n    }\n  }, {\n    key: 'observers',\n    get: function get() {\n      return ['_pathChanged(path)', '_updateUrl(path, query, hash)'];\n    }\n  }]);\n\n  function MainRouter() {\n    _classCallCheck(this, MainRouter);\n\n    var _this = _possibleConstructorReturn(this, (MainRouter.__proto__ || Object.getPrototypeOf(MainRouter)).call(this));\n\n    _this._routes = {};\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(MainRouter, [{\n    key: 'connectedCallback',\n    value: function connectedCallback() {\n      var _this2 = this;\n\n      _get(MainRouter.prototype.__proto__ || Object.getPrototypeOf(MainRouter.prototype), 'connectedCallback', this).call(this);\n      this._observer = new _flattenedNodesObserver.FlattenedNodesObserver(this, function (info) {\n        _this2._contentAdded(info.addedNodes.filter(function (node) {\n          return node.nodeType === window.Node.ELEMENT_NODE;\n        }));\n      });\n      // import(/* webpackChunkName: \"app-toast\" */ '../modules/app-toast/components/app-toast.html').then(() => {\n      //   var messageInterval = setInterval(() => {\n      //     if (messages.length > 0) {\n      //       var {message, optTapHandler, optAction, optActionHandler, optDuration} = messages.pop()\n      //       this.showMessage(message, optTapHandler, optAction, optActionHandler, optDuration)\n      //     } else {\n      //       clearInterval(messageInterval)\n      //       messageInterval = null\n      //     }\n      //   }, 5000)\n      // })\n\n      // this._listener = store.subscribe(() => {\n      //   this.state = store.getState();\n      //   this._pathChanged(this.path);\n      // });\n    }\n  }, {\n    key: 'disconnectedCallback',\n    value: function disconnectedCallback() {\n      if (_get(MainRouter.prototype.__proto__ || Object.getPrototypeOf(MainRouter.prototype), 'disconnectedCallback', this)) {\n        _get(MainRouter.prototype.__proto__ || Object.getPrototypeOf(MainRouter.prototype), 'disconnectedCallback', this).call(this);\n      }\n      if (this._observer) this._observer.disconnect();\n      if (this._listener) this._listener();\n    }\n  }, {\n    key: 'template',\n    value: function template() {\n      return (0, _template3.default)(this);\n    }\n  }, {\n    key: 'showMessage',\n    value: function showMessage(message, optTapHandler, optAction, optActionHandler, optDuration) {}\n    // if (this.shadowRoot.querySelector('app-toast').showMessage) {\n    //   this.shadowRoot.querySelector('app-toast').showMessage(message, optTapHandler, optAction, optActionHandler, optDuration)\n    // } else {\n    //   messages.push({message, optTapHandler, optAction, optActionHandler, optDuration})\n    // }\n\n\n    // closeToast () {\n    //   this.shadowRoot.querySelector('app-toast').close();\n    // }\n\n  }, {\n    key: '_contentAdded',\n    value: function _contentAdded(pages) {\n      var _this3 = this;\n\n      pages.forEach(function (page) {\n        page.classList.add('page');\n        _this3._routes[page.getAttribute('route')] = {\n          element: page,\n          auth: page.getAttribute('auth')\n        };\n      });\n      this._pathChanged(this.path);\n    }\n  }, {\n    key: '_pathChanged',\n    value: function _pathChanged(path) {\n      var _this4 = this;\n\n      // load statistics if it went through here\n      if (path === '/_statistic.html' || path === '/_bundle-sizes.html') {\n        window.location.href = path;\n        return;\n      }\n\n      path = path.replace(/index\\.html$/, '');\n\n      var routeName = null;\n      Object.entries(this._routes).forEach(function (route) {\n        if (routeName) return;\n        var params = {};\n        var keys = [];\n        var re = (0, _pathToRegexp2.default)(route[0], keys);\n        var exec = re.exec(path);\n\n        if (exec) {\n          params = {};\n          for (var j = 0; j < keys.length; j++) {\n            params[keys[j].name] = exec[j + 1];\n          }\n          routeName = route[0];\n          _this4.params = params;\n        }\n      });\n\n      this._checkAuth(routeName || 'not-found');\n    }\n  }, {\n    key: '_checkAuth',\n    value: function _checkAuth(route) {\n      var _this5 = this;\n\n      if (this._routes[route] && this._routes[route].auth && _authentication2.default[this._routes[route].auth]) {\n        if (_authentication2.default[this._routes[route].auth] instanceof Promise) {\n          _authentication2.default[this._routes[route].auth]().then(function (res) {\n            if (res) {\n              _this5._loadPage(route);\n            } else {\n              _this5._loadPage('not-authorized');\n            }\n          }).catch(function (e) {\n            console.log(e);\n            _this5._loadPage('not-authorized');\n          });\n        } else if (typeof _authentication2.default[this._routes[route].auth] === 'function' && _authentication2.default[this._routes[route].auth](this)) {\n          this._loadPage(route);\n        } else {\n          this._loadPage('not-authorized');\n        }\n      } else {\n        this._loadPage(route);\n      }\n    }\n  }, {\n    key: '_loadPage',\n    value: function _loadPage(route) {\n      var _this6 = this;\n\n      var routes = Object.assign({}, _fragments2.default);\n      for (var i in this._routes) {\n        if (this._routes[i] && this._routes[i].element) this._routes[i].element.classList.remove('page--on-view');\n      }\n\n      if (this._routes[route] && this._routes[route].element) {\n        this._routes[route].element.classList.add('page--on-view');\n      }\n      if (this._routes[route]) {\n        // console.log(this._routes[route])\n        var name = this._routes[route].element.nodeName.toLowerCase();\n        routes[name]().then(function () {\n          if (_this6._routes[route].element._setProperty) {\n            _this6._routes[route].element._setProperty('params', _this6.params);\n            _this6._routes[route].element._setProperty('queryParams', _this6.paramsObject);\n          }\n          if (_this6._routes[route].element.reload) {\n            _this6._routes[route].element.reload();\n          }\n\n          if (document.querySelector('.header') && document.querySelector('.header').reload) {\n            document.querySelector('.header').reload();\n          }\n\n          if (document.querySelector('.drawer') && document.querySelector('.drawer').reload) {\n            document.querySelector('.drawer').reload();\n          }\n\n          window.scrollTo(0, 0);\n          if (window.ga) {\n            window.ga('set', 'page', _this6.path);\n            window.ga('send', 'pageview');\n          }\n        });\n      }\n    }\n  }]);\n\n  return MainRouter;\n}((0, _queryParamsMixin2.default)((0, _locationMixin2.default)((0, _elementMixin.ElementMixin)(window.HTMLElement))));\n\nwindow.customElements.define(MainRouter.is, MainRouter);\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PropertyEffects = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _propertyAccessors = __webpack_require__(23);\n\nvar _mixin = __webpack_require__(5);\n\nvar _path = __webpack_require__(12);\n\nvar _caseMap = __webpack_require__(4);\n\nvar caseMap = _interopRequireWildcard(_caseMap);\n\nvar _templateStamp = __webpack_require__(24);\n\nvar _templateStamp2 = _interopRequireDefault(_templateStamp);\n\nvar _propertyEffectsTypes = __webpack_require__(13);\n\nvar _propertyEffectsTypes2 = _interopRequireDefault(_propertyEffectsTypes);\n\nvar _hostStack = __webpack_require__(25);\n\nvar _hostStack2 = _interopRequireDefault(_hostStack);\n\nvar _effects = __webpack_require__(26);\n\nvar _dataApi = __webpack_require__(28);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/** @const {Object} */\nvar CaseMap = caseMap;\nvar PropertyEffectsType = void 0; // eslint-disable-line no-unused-vars\n\nvar PropertyEffects = exports.PropertyEffects = (0, _mixin.dedupingMixin)(function (superClass) {\n  var propertyEffectsBase = (0, _templateStamp2.default)((0, _propertyAccessors.PropertyAccessors)(superClass));\n\n  // /** @class {!HTMLElement} */\n\n  var PropertyEffects = function (_propertyEffectsBase) {\n    _inherits(PropertyEffects, _propertyEffectsBase);\n\n    function PropertyEffects() {\n      _classCallCheck(this, PropertyEffects);\n\n      /** @type {boolean} */\n      var _this = _possibleConstructorReturn(this, (PropertyEffects.__proto__ || Object.getPrototypeOf(PropertyEffects)).call(this));\n\n      _this.__dataClientsReady; // eslint-disable-line no-unused-expressions\n      /** @type {Array} */\n      _this.__dataPendingClients; // eslint-disable-line no-unused-expressions\n      /** @type {Object} */\n      _this.__dataToNotify; // eslint-disable-line no-unused-expressions\n      /** @type {Object} */\n      _this.__dataLinkedPaths; // eslint-disable-line no-unused-expressions\n      /** @type {boolean} */\n      _this.__dataHasPaths; // eslint-disable-line no-unused-expressions\n      /** @type {Object} */\n      _this.__dataCompoundStorage; // eslint-disable-line no-unused-expressions\n      /** @type {Polymer_PropertyEffects} */\n      _this.__dataHost; // eslint-disable-line no-unused-expressions\n      /** @type {!Object} */\n      _this.__dataTemp; // eslint-disable-line no-unused-expressions\n      /** @type {boolean} */\n      _this.__dataClientsInitialized; // eslint-disable-line no-unused-expressions\n      /** @type {!Object} */\n      _this.__data; // eslint-disable-line no-unused-expressions\n      /** @type {!Object} */\n      _this.__dataPending; // eslint-disable-line no-unused-expressions\n      /** @type {!Object} */\n      _this.__dataOld; // eslint-disable-line no-unused-expressions\n      /** @type {Object} */\n      _this.__computeEffects; // eslint-disable-line no-unused-expressions\n      /** @type {Object} */\n      _this.__reflectEffects; // eslint-disable-line no-unused-expressions\n      /** @type {Object} */\n      _this.__notifyEffects; // eslint-disable-line no-unused-expressions\n      /** @type {Object} */\n      _this.__propagateEffects; // eslint-disable-line no-unused-expressions\n      /** @type {Object} */\n      _this.__observeEffects; // eslint-disable-line no-unused-expressions\n      /** @type {Object} */\n      _this.__readOnly; // eslint-disable-line no-unused-expressions\n      /** @type {number} */\n      _this.__dataCounter; // eslint-disable-line no-unused-expressions\n      return _this;\n    }\n\n    _createClass(PropertyEffects, [{\n      key: '_initializeProperties',\n      value: function _initializeProperties() {\n        _get(PropertyEffects.prototype.__proto__ || Object.getPrototypeOf(PropertyEffects.prototype), '_initializeProperties', this).call(this);\n        _hostStack2.default.registerHost(this);\n        this.__dataClientsReady = false;\n        this.__dataPendingClients = null;\n        this.__dataToNotify = null;\n        this.__dataLinkedPaths = null;\n        this.__dataHasPaths = false;\n        // May be set on instance prior to upgrade\n        this.__dataCompoundStorage = this.__dataCompoundStorage || null;\n        this.__dataHost = this.__dataHost || null;\n        this.__dataTemp = {};\n        this.__dataClientsInitialized = false;\n      }\n\n      /**\n       * Overrides `Polymer.PropertyAccessors` implementation to provide a\n       * more efficient implementation of initializing properties from\n       * the prototype on the instance.\n       *\n       * @override\n       * @param {Object} props Properties to initialize on the prototype\n       */\n\n    }, {\n      key: '_initializeProtoProperties',\n      value: function _initializeProtoProperties(props) {\n        this.__data = Object.create(props);\n        this.__dataPending = Object.create(props);\n        this.__dataOld = {};\n      }\n\n      /**\n       * Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n       * `_setProperty`'s `shouldNotify: true`.\n       *\n       * @override\n       * @param {Object} props Properties to initialize on the instance\n       */\n\n    }, {\n      key: '_initializeInstanceProperties',\n      value: function _initializeInstanceProperties(props) {\n        var readOnly = this[_propertyEffectsTypes2.default.READ_ONLY];\n        for (var prop in props) {\n          if (!readOnly || !readOnly[prop]) {\n            this.__dataPending = this.__dataPending || {};\n            this.__dataOld = this.__dataOld || {};\n            this.__data[prop] = this.__dataPending[prop] = props[prop];\n          }\n        }\n      }\n\n      // Prototype setup ----------------------------------------\n\n      /**\n       * Equivalent to static `addPropertyEffect` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property that should trigger the effect\n       * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @param {Object=} effect Effect metadata object\n       * @protected\n       */\n\n    }, {\n      key: '_addPropertyEffect',\n      value: function _addPropertyEffect(property, type, effect) {\n        this._createPropertyAccessor(property, type === _propertyEffectsTypes2.default.READ_ONLY);\n        // effects are accumulated into arrays per property based on type\n        var effects = (0, _effects.ensureOwnEffectMap)(this, type)[property];\n        if (!effects) {\n          effects = this[type][property] = [];\n        }\n        effects.push(effect);\n      }\n\n      /**\n       * Removes the given property effect.\n       *\n       * @param {string} property Property the effect was associated with\n       * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @param {Object=} effect Effect metadata object to remove\n       */\n\n    }, {\n      key: '_removePropertyEffect',\n      value: function _removePropertyEffect(property, type, effect) {\n        var effects = (0, _effects.ensureOwnEffectMap)(this, type)[property];\n        var idx = effects.indexOf(effect);\n        if (idx >= 0) {\n          effects.splice(idx, 1);\n        }\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a property effect\n       * of a certain type.\n       *\n       * @param {string} property Property name\n       * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n\n    }, {\n      key: '_hasPropertyEffect',\n      value: function _hasPropertyEffect(property, type) {\n        var effects = this[type];\n        return Boolean(effects && effects[property]);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"read only\"\n       * accessor for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n\n    }, {\n      key: '_hasReadOnlyEffect',\n      value: function _hasReadOnlyEffect(property) {\n        return this._hasPropertyEffect(property, _propertyEffectsTypes2.default.READ_ONLY);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"notify\"\n       * property effect for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n\n    }, {\n      key: '_hasNotifyEffect',\n      value: function _hasNotifyEffect(property) {\n        return this._hasPropertyEffect(property, _propertyEffectsTypes2.default.NOTIFY);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"reflect to attribute\"\n       * property effect for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n\n    }, {\n      key: '_hasReflectEffect',\n      value: function _hasReflectEffect(property) {\n        return this._hasPropertyEffect(property, _propertyEffectsTypes2.default.REFLECT);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"computed\"\n       * property effect for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n\n    }, {\n      key: '_hasComputedEffect',\n      value: function _hasComputedEffect(property) {\n        return this._hasPropertyEffect(property, _propertyEffectsTypes2.default.COMPUTE);\n      }\n\n      // Runtime ----------------------------------------\n\n      /**\n       * Sets a pending property or path.  If the root property of the path in\n       * question had no accessor, the path is set, otherwise it is enqueued\n       * via `_setPendingProperty`.\n       *\n       * This function isolates relatively expensive functionality necessary\n       * for the public API (`set`, `setProperties`, `notifyPath`, and property\n       * change listeners via {{...}} bindings), such that it is only done\n       * when paths enter the system, and not at every propagation step.  It\n       * also sets a `__dataHasPaths` flag on the instance which is used to\n       * fast-path slower path-matching code in the property effects host paths.\n       *\n       * `path` can be a path string or array of path parts as accepted by the\n       * public API.\n       *\n       * @param {string | !Array<number|string>} path Path to set\n       * @param {*} value Value to set\n       * @param {boolean=} shouldNotify Set to true if this change should\n       *  cause a property notification event dispatch\n       * @param {boolean=} isPathNotification If the path being set is a path\n       *   notification of an already changed value, as opposed to a request\n       *   to set and notify the change.  In the latter `false` case, a dirty\n       *   check is performed and then the value is set to the path before\n       *   enqueuing the pending property change.\n       * @return {boolean} Returns true if the property/path was enqueued in\n       *   the pending changes bag.\n       * @protected\n       */\n\n    }, {\n      key: '_setPendingPropertyOrPath',\n      value: function _setPendingPropertyOrPath(path, value, shouldNotify, isPathNotification) {\n        if (isPathNotification || (0, _path.root)(Array.isArray(path) ? path[0] : path) !== path) {\n          // Dirty check changes being set to a path against the actual object,\n          // since this is the entry point for paths into the system; from here\n          // the only dirty checks are against the `__dataTemp` cache to prevent\n          // duplicate work in the same turn only. Note, if this was a notification\n          // of a change already set to a path (isPathNotification: true),\n          // we always let the change through and skip the `set` since it was\n          // already dirty checked at the point of entry and the underlying\n          // object has already been updated\n          if (!isPathNotification) {\n            var old = (0, _path.get)(this, path);\n            path = /** @type {string} */(0, _path.set)(this, path, value);\n            // Use property-accessor's simpler dirty check\n            if (!path || !_get(PropertyEffects.prototype.__proto__ || Object.getPrototypeOf(PropertyEffects.prototype), '_shouldPropertyChange', this).call(this, path, value, old)) {\n              return false;\n            }\n          }\n          this.__dataHasPaths = true;\n          if (this._setPendingProperty( /** @type{string} */path, value, shouldNotify)) {\n            (0, _effects.computeLinkedPaths)(this, path, value);\n            return true;\n          }\n        } else {\n          if (this.__dataHasAccessor && this.__dataHasAccessor[path]) {\n            return this._setPendingProperty( /** @type{string} */path, value, shouldNotify);\n          } else {\n            this[path] = value;\n          }\n        }\n        return false;\n      }\n\n      /**\n       * Applies a value to a non-Polymer element/node's property.\n       *\n       * The implementation makes a best-effort at binding interop:\n       * Some native element properties have side-effects when\n       * re-setting the same value (e.g. setting `<input>.value` resets the\n       * cursor position), so we do a dirty-check before setting the value.\n       * However, for better interop with non-Polymer custom elements that\n       * accept objects, we explicitly re-set object changes coming from the\n       * Polymer world (which may include deep object changes without the\n       * top reference changing), erring on the side of providing more\n       * information.\n       *\n       * Users may override this method to provide alternate approaches.\n       *\n       * @param {Node} node The node to set a property on\n       * @param {string} prop The property to set\n       * @param {*} value The value to set\n       * @protected\n       */\n\n    }, {\n      key: '_setUnmanagedPropertyToNode',\n      value: function _setUnmanagedPropertyToNode(node, prop, value) {\n        // It is a judgment call that resetting primitives is\n        // \"bad\" and resettings objects is also \"good\"; alternatively we could\n        // implement a whitelist of tag & property values that should never\n        // be reset (e.g. <input>.value && <select>.value)\n        if (value !== node[prop] || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {\n          node[prop] = value;\n        }\n      }\n\n      /**\n       * Overrides the `PropertyAccessors` implementation to introduce special\n       * dirty check logic depending on the property & value being set:\n       *\n       * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n       *    Stored in `__dataTemp`, dirty checked against `__dataTemp`\n       * 2. Object set to simple property (e.g. 'prop': {...})\n       *    Stored in `__dataTemp` and `__data`, dirty checked against\n       *    `__dataTemp` by default implementation of `_shouldPropertyChange`\n       * 3. Primitive value set to simple property (e.g. 'prop': 42)\n       *    Stored in `__data`, dirty checked against `__data`\n       *\n       * The dirty-check is important to prevent cycles due to two-way\n       * notification, but paths and objects are only dirty checked against any\n       * previous value set during this turn via a \"temporary cache\" that is\n       * cleared when the last `_propertiesChaged` exits. This is so:\n       * a. any cached array paths (e.g. 'array.3.prop') may be invalidated\n       *    due to array mutations like shift/unshift/splice; this is fine\n       *    since path changes are dirty-checked at user entry points like `set`\n       * b. dirty-checking for objects only lasts one turn to allow the user\n       *    to mutate the object in-place and re-set it with the same identity\n       *    and have all sub-properties re-propagated in a subsequent turn.\n       *\n       * The temp cache is not necessarily sufficient to prevent invalid array\n       * paths, since a splice can happen during the same turn (with pathological\n       * user code); we could introduce a \"fixup\" for temporarily cached array\n       * paths if needed: https://github.com/Polymer/polymer/issues/4227\n       *\n       * @param {string} property Name of the property\n       * @param {*} value Value to set\n       * @param {boolean=} shouldNotify True if property should fire notification\n       *   event (applies only for `notify: true` properties)\n       * @return {boolean} Returns true if the property changed\n       * @override\n       */\n\n    }, {\n      key: '_setPendingProperty',\n      value: function _setPendingProperty(property, value, shouldNotify) {\n        var isPath = this.__dataHasPaths && (0, _path.isPath)(property);\n        var prevProps = isPath ? this.__dataTemp : this.__data;\n        if (this._shouldPropertyChange(property, value, prevProps[property])) {\n          if (!this.__dataPending) {\n            this.__dataPending = {};\n            this.__dataOld = {};\n          }\n          // Ensure old is captured from the last turn\n          if (!(property in this.__dataOld)) {\n            this.__dataOld[property] = this.__data[property];\n          }\n          // Paths are stored in temporary cache (cleared at end of turn),\n          // which is used for dirty-checking, all others stored in __data\n          if (isPath) {\n            this.__dataTemp[property] = value;\n          } else {\n            this.__data[property] = value;\n          }\n          // All changes go into pending property bag, passed to _propertiesChanged\n          this.__dataPending[property] = value;\n          // Track properties that should notify separately\n          if (isPath || this[_propertyEffectsTypes2.default.NOTIFY] && this[_propertyEffectsTypes2.default.NOTIFY][property]) {\n            this.__dataToNotify = this.__dataToNotify || {};\n            this.__dataToNotify[property] = shouldNotify;\n          }\n          return true;\n        }\n        return false;\n      }\n\n      /**\n       * Overrides base implementation to ensure all accessors set `shouldNotify`\n       * to true, for per-property notification tracking.\n       *\n       * @override\n       */\n\n    }, {\n      key: '_setProperty',\n      value: function _setProperty(property, value) {\n        if (this._setPendingProperty(property, value, true)) {\n          this._invalidateProperties();\n        }\n      }\n\n      /**\n       * Overrides `PropertyAccessor`'s default async queuing of\n       * `_propertiesChanged`: if `__dataReady` is false (has not yet been\n       * manually flushed), the function no-ops; otherwise flushes\n       * `_propertiesChanged` synchronously.\n       *\n       * @override\n       */\n\n    }, {\n      key: '_invalidateProperties',\n      value: function _invalidateProperties() {\n        if (this.__dataReady) {\n          this._flushProperties();\n        }\n      }\n\n      /**\n       * Enqueues the given client on a list of pending clients, whose\n       * pending property changes can later be flushed via a call to\n       * `_flushClients`.\n       *\n       * @param {Object} client PropertyEffects client to enqueue\n       * @protected\n       */\n\n    }, {\n      key: '_enqueueClient',\n      value: function _enqueueClient(client) {\n        this.__dataPendingClients = this.__dataPendingClients || [];\n        if (client !== this) {\n          this.__dataPendingClients.push(client);\n        }\n      }\n\n      /**\n       * Flushes any clients previously enqueued via `_enqueueClient`, causing\n       * their `_flushProperties` method to run.\n       *\n       * @protected\n       */\n\n    }, {\n      key: '_flushClients',\n      value: function _flushClients() {\n        if (!this.__dataClientsReady) {\n          this.__dataClientsReady = true;\n          this._readyClients();\n          // Override point where accessors are turned on; importantly,\n          // this is after clients have fully readied, providing a guarantee\n          // that any property effects occur only after all clients are ready.\n          this.__dataReady = true;\n        } else {\n          this.__enableOrFlushClients();\n        }\n      }\n\n      // NOTE: We ensure clients either enable or flush as appropriate. This\n      // handles two corner cases:\n      // (1) clients flush properly when connected/enabled before the host\n      // enables; e.g.\n      //   (a) Templatize stamps with no properties and does not flush and\n      //   (b) the instance is inserted into dom and\n      //   (c) then the instance flushes.\n      // (2) clients enable properly when not connected/enabled when the host\n      // flushes; e.g.\n      //   (a) a template is runtime stamped and not yet connected/enabled\n      //   (b) a host sets a property, causing stamped dom to flush\n      //   (c) the stamped dom enables.\n\n    }, {\n      key: '__enableOrFlushClients',\n      value: function __enableOrFlushClients() {\n        var clients = this.__dataPendingClients;\n        if (clients) {\n          this.__dataPendingClients = null;\n          for (var i = 0; i < clients.length; i++) {\n            var client = clients[i];\n            if (!client.__dataEnabled) {\n              client._enableProperties();\n            } else if (client.__dataPending) {\n              client._flushProperties();\n            }\n          }\n        }\n      }\n\n      /**\n       * Perform any initial setup on client dom. Called before the first\n       * `_flushProperties` call on client dom and before any element\n       * observers are called.\n       *\n       * @protected\n       */\n\n    }, {\n      key: '_readyClients',\n      value: function _readyClients() {\n        this.__enableOrFlushClients();\n      }\n\n      /**\n       * Sets a bag of property changes to this instance, and\n       * synchronously processes all effects of the properties as a batch.\n       *\n       * Property names must be simple properties, not paths.  Batched\n       * path propagation is not supported.\n       *\n       * @param {Object} props Bag of one or more key-value pairs whose key is\n       *   a property and value is the new value to set for that property.\n       * @param {boolean=} setReadOnly When true, any private values set in\n       *   `props` will be set. By default, `setProperties` will not set\n       *   `readOnly: true` root properties.\n       * @public\n       */\n\n    }, {\n      key: 'setProperties',\n      value: function setProperties(props, setReadOnly) {\n        for (var path in props) {\n          if (setReadOnly || !this[_propertyEffectsTypes2.default.READ_ONLY] || !this[_propertyEffectsTypes2.default.READ_ONLY][path]) {\n            // TODO(kschaaf): explicitly disallow paths in setProperty?\n            // wildcard observers currently only pass the first changed path\n            // in the `info` object, and you could do some odd things batching\n            // paths, e.g. {'foo.bar': {...}, 'foo': null}\n            this._setPendingPropertyOrPath(path, props[path], true);\n          }\n        }\n        this._invalidateProperties();\n      }\n\n      /**\n       * Overrides `PropertyAccessors` so that property accessor\n       * side effects are not enabled until after client dom is fully ready.\n       * Also calls `_flushClients` callback to ensure client dom is enabled\n       * that was not enabled as a result of flushing properties.\n       *\n       * @override\n       */\n\n    }, {\n      key: 'ready',\n      value: function ready() {\n        // It is important that `super.ready()` is not called here as it\n        // immediately turns on accessors. Instead, we wait until `readyClients`\n        // to enable accessors to provide a guarantee that clients are ready\n        // before processing any accessors side effects.\n        this._flushProperties();\n        // If no data was pending, `_flushProperties` will not `flushClients`\n        // so ensure this is done.\n        if (!this.__dataClientsReady) {\n          this._flushClients();\n        }\n        // Before ready, client notifications do not trigger _flushProperties.\n        // Therefore a flush is necessary here if data has been set.\n        if (this.__dataPending) {\n          this._flushProperties();\n        }\n      }\n\n      /**\n       * Implements `PropertyAccessors`'s properties changed callback.\n       *\n       * Runs each class of effects for the batch of changed properties in\n       * a specific order (compute, propagate, reflect, observe, notify).\n       *\n       * @override\n       */\n\n    }, {\n      key: '_propertiesChanged',\n      value: function _propertiesChanged(currentProps, changedProps, oldProps) {\n        // ----------------------------\n        // let c = Object.getOwnPropertyNames(changedProps || {});\n        // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);\n        // if (window.debug) { debugger; }\n        // ----------------------------\n        var hasPaths = this.__dataHasPaths;\n        this.__dataHasPaths = false;\n        // Compute properties\n        (0, _effects.runComputedEffects)(this, changedProps, oldProps, hasPaths);\n        // Clear notify properties prior to possible reentry (propagate, observe),\n        // but after computing effects have a chance to add to them\n        var notifyProps = this.__dataToNotify;\n        this.__dataToNotify = null;\n        // Propagate properties to clients\n        this._propagatePropertyChanges(changedProps, oldProps, hasPaths);\n        // Flush clients\n        this._flushClients();\n        // Reflect properties\n        (0, _effects.runEffects)(this, this[_propertyEffectsTypes2.default.REFLECT], changedProps, oldProps, hasPaths);\n        // Observe properties\n        (0, _effects.runEffects)(this, this[_propertyEffectsTypes2.default.OBSERVE], changedProps, oldProps, hasPaths);\n        // Notify properties to host\n        if (notifyProps) {\n          (0, _effects.runNotifyEffects)(this, notifyProps, changedProps, oldProps, hasPaths);\n        }\n        // Clear temporary cache at end of turn\n        if (this.__dataCounter === 1) {\n          this.__dataTemp = {};\n        }\n\n        if (this.render) {\n          this.render();\n        }\n        // ----------------------------\n        // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);\n        // ----------------------------\n      }\n\n      /**\n       * Called to propagate any property changes to stamped template nodes\n       * managed by this element.\n       *\n       * @param {Object} changedProps Bag of changed properties\n       * @param {Object} oldProps Bag of previous values for changed properties\n       * @param {boolean} hasPaths True with `props` contains one or more paths\n       * @protected\n       */\n\n    }, {\n      key: '_propagatePropertyChanges',\n      value: function _propagatePropertyChanges(changedProps, oldProps, hasPaths) {\n        if (this[_propertyEffectsTypes2.default.PROPAGATE]) {\n          (0, _effects.runEffects)(this, this[_propertyEffectsTypes2.default.PROPAGATE], changedProps, oldProps, hasPaths);\n        }\n      }\n\n      /**\n       * Aliases one data path as another, such that path notifications from one\n       * are routed to the other.\n       *\n       * @param {string | !Array<string|number>} to Target path to link.\n       * @param {string | !Array<string|number>} from Source path to link.\n       * @public\n       */\n\n    }, {\n      key: 'linkPaths',\n      value: function linkPaths(to, from) {\n        to = (0, _path.normalize)(to);\n        from = (0, _path.normalize)(from);\n        this.__dataLinkedPaths = this.__dataLinkedPaths || {};\n        this.__dataLinkedPaths[to] = from;\n      }\n\n      /**\n       * Removes a data path alias previously established with `_linkPaths`.\n       *\n       * Note, the path to unlink should be the target (`to`) used when\n       * linking the paths.\n       *\n       * @param {string | !Array<string|number>} path Target path to unlink.\n       * @public\n       */\n\n    }, {\n      key: 'unlinkPaths',\n      value: function unlinkPaths(path) {\n        path = (0, _path.normalize)(path);\n        if (this.__dataLinkedPaths) {\n          delete this.__dataLinkedPaths[path];\n        }\n      }\n\n      /**\n        * Notify that an array has changed.\n        *\n        * Example:\n        *\n        *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n        *     ...\n        *     this.items.splice(1, 1, {name: 'Sam'});\n        *     this.items.push({name: 'Bob'});\n        *     this.notifySplices('items', [\n        *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1, obect: this.items, type: 'splice' },\n        *       { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n        *     ]);\n        *\n        * @param {string} path Path that should be notified.\n        * @param {Array} splices Array of splice records indicating ordered\n        *   changes that occurred to the array. Each record should have the\n        *   following fields:\n        *    * index: index at which the change occurred\n        *    * removed: array of items that were removed from this index\n        *    * addedCount: number of new items added at this index\n        *    * object: a reference to the array in question\n        *    * type: the string literal 'splice'\n        *\n        *   Note that splice records _must_ be normalized such that they are\n        *   reported in index order (raw results from `Object.observe` are not\n        *   ordered and must be normalized/merged before notifying).\n        * @public\n      */\n\n    }, {\n      key: 'notifySplices',\n      value: function notifySplices(path, splices) {\n        var info = { path: '' };\n        var array = /** @type {Array} */(0, _path.get)(this, path, info);\n        (0, _dataApi.notifySplices)(this, array, info.path, splices);\n      }\n\n      /**\n       * Convenience method for reading a value from a path.\n       *\n       * Note, if any part in the path is undefined, this method returns\n       * `undefined` (this method does not throw when dereferencing undefined\n       * paths).\n       *\n       * @param {(string|!Array<(string|number)>)} path Path to the value\n       *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n       *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n       *   bracketed expressions are not supported; string-based path parts\n       *   *must* be separated by dots.  Note that when dereferencing array\n       *   indices, the index may be used as a dotted part directly\n       *   (e.g. `users.12.name` or `['users', 12, 'name']`).\n       * @param {Object=} root Root object from which the path is evaluated.\n       * @return {*} Value at the path, or `undefined` if any part of the path\n       *   is undefined.\n       * @public\n       */\n\n    }, {\n      key: 'get',\n      value: function get(path, root) {\n        return (0, _path.get)(root || this, path);\n      }\n\n      /**\n       * Convenience method for setting a value to a path and notifying any\n       * elements bound to the same path.\n       *\n       * Note, if any part in the path except for the last is undefined,\n       * this method does nothing (this method does not throw when\n       * dereferencing undefined paths).\n       *\n       * @param {(string|!Array<(string|number)>)} path Path to the value\n       *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n       *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n       *   bracketed expressions are not supported; string-based path parts\n       *   *must* be separated by dots.  Note that when dereferencing array\n       *   indices, the index may be used as a dotted part directly\n       *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).\n       * @param {*} value Value to set at the specified path.\n       * @param {Object=} root Root object from which the path is evaluated.\n       *   When specified, no notification will occur.\n       * @public\n      */\n\n    }, {\n      key: 'set',\n      value: function set(path, value, root) {\n        if (root) {\n          (0, _path.set)(root, path, value);\n        } else {\n          if (!this[_propertyEffectsTypes2.default.READ_ONLY] || !this[_propertyEffectsTypes2.default.READ_ONLY][/** @type {string} */path]) {\n            if (this._setPendingPropertyOrPath(path, value, true)) {\n              this._invalidateProperties();\n            }\n          }\n        }\n      }\n\n      /**\n       * Adds items onto the end of the array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.push`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string | !Array<string|number>} path Path to array.\n       * @param {...*} items Items to push onto array\n       * @return {number} New length of the array.\n       * @public\n       */\n\n    }, {\n      key: 'push',\n      value: function push(path) {\n        var info = { path: '' };\n        var array = /** @type {Array} */(0, _path.get)(this, path, info);\n        var len = array.length;\n\n        for (var _len = arguments.length, items = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          items[_key - 1] = arguments[_key];\n        }\n\n        var ret = array.push.apply(array, items);\n        if (items.length) {\n          (0, _dataApi.notifySplice)(this, array, info.path, len, items.length, []);\n        }\n        return ret;\n      }\n\n      /**\n       * Removes an item from the end of array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.pop`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string | !Array<string|number>} path Path to array.\n       * @return {*} Item that was removed.\n       * @public\n       */\n\n    }, {\n      key: 'pop',\n      value: function pop(path) {\n        var info = { path: '' };\n        var array = /** @type {Array} */(0, _path.get)(this, path, info);\n        var hadLength = Boolean(array.length);\n        var ret = array.pop();\n        if (hadLength) {\n          (0, _dataApi.notifySplice)(this, array, info.path, array.length, 0, [ret]);\n        }\n        return ret;\n      }\n\n      /**\n       * Starting from the start index specified, removes 0 or more items\n       * from the array and inserts 0 or more new items in their place.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.splice`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string | !Array<string|number>} path Path to array.\n       * @param {number} start Index from which to start removing/inserting.\n       * @param {number} deleteCount Number of items to remove.\n       * @param {...*} items Items to insert into array.\n       * @return {Array} Array of removed items.\n       * @public\n       */\n\n    }, {\n      key: 'splice',\n      value: function splice(path, start, deleteCount) {\n        var info = { path: '' };\n        var array = /** @type {Array} */(0, _path.get)(this, path, info);\n        // Normalize fancy native splice handling of crazy start values\n        if (start < 0) {\n          start = array.length - Math.floor(-start);\n        } else {\n          start = Math.floor(start);\n        }\n        if (!start) {\n          start = 0;\n        }\n\n        for (var _len2 = arguments.length, items = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n          items[_key2 - 3] = arguments[_key2];\n        }\n\n        var ret = array.splice.apply(array, [start, deleteCount].concat(items));\n        if (items.length || ret.length) {\n          (0, _dataApi.notifySplice)(this, array, info.path, start, items.length, ret);\n        }\n        return ret;\n      }\n\n      /**\n       * Removes an item from the beginning of array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.pop`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string | !Array<string|number>} path Path to array.\n       * @return {*} Item that was removed.\n       * @public\n       */\n\n    }, {\n      key: 'shift',\n      value: function shift(path) {\n        var info = { path: '' };\n        var array = /** @type {Array} */(0, _path.get)(this, path, info);\n        var hadLength = Boolean(array.length);\n        var ret = array.shift();\n        if (hadLength) {\n          (0, _dataApi.notifySplice)(this, array, info.path, 0, 0, [ret]);\n        }\n        return ret;\n      }\n\n      /**\n       * Adds items onto the beginning of the array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.push`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string | !Array<string|number>} path Path to array.\n       * @param {...*} items Items to insert info array\n       * @return {number} New length of the array.\n       * @public\n       */\n\n    }, {\n      key: 'unshift',\n      value: function unshift(path) {\n        var info = { path: '' };\n        var array = /** @type {Array} */(0, _path.get)(this, path, info);\n\n        for (var _len3 = arguments.length, items = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n          items[_key3 - 1] = arguments[_key3];\n        }\n\n        var ret = array.unshift.apply(array, items);\n        if (items.length) {\n          (0, _dataApi.notifySplice)(this, array, info.path, 0, items.length, []);\n        }\n        return ret;\n      }\n\n      /**\n       * Notify that a path has changed.\n       *\n       * Example:\n       *\n       *     this.item.user.name = 'Bob';\n       *     this.notifyPath('item.user.name');\n       *\n       * @param {string} path Path that should be notified.\n       * @param {*=} value Value at the path (optional).\n       * @public\n      */\n\n    }, {\n      key: 'notifyPath',\n      value: function notifyPath(path, value) {\n        /** @type {string} */\n        var propPath = void 0;\n        if (arguments.length === 1) {\n          // Get value if not supplied\n          var info = { path: '' };\n          value = (0, _path.get)(this, path, info);\n          propPath = info.path;\n        } else if (Array.isArray(path)) {\n          // Normalize path if needed\n          propPath = (0, _path.normalize)(path);\n        } else {\n          propPath = /** @type{string} */path;\n        }\n        if (this._setPendingPropertyOrPath(propPath, value, true, true)) {\n          this._invalidateProperties();\n        }\n      }\n\n      /**\n       * Equivalent to static `createReadOnlyProperty` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property name\n       * @param {boolean=} protectedSetter Creates a custom protected setter\n       *   when `true`.\n       * @protected\n       */\n\n    }, {\n      key: '_createReadOnlyProperty',\n      value: function _createReadOnlyProperty(property, protectedSetter) {\n        this._addPropertyEffect(property, _propertyEffectsTypes2.default.READ_ONLY);\n        if (protectedSetter) {\n          this['_set' + (0, _dataApi.upper)(property)] = /** @this {PropertyEffects} */function (value) {\n            this._setProperty(property, value);\n          };\n        }\n      }\n\n      /**\n       * Equivalent to static `createPropertyObserver` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property name\n       * @param {string} methodName Name of observer method to call\n       * @param {boolean=} dynamicFn Whether the method name should be included as\n       *   a dependency to the effect.\n       * @protected\n       */\n\n    }, {\n      key: '_createPropertyObserver',\n      value: function _createPropertyObserver(property, methodName, dynamicFn) {\n        var info = { property: property, methodName: methodName, dynamicFn: Boolean(dynamicFn) };\n        this._addPropertyEffect(property, _propertyEffectsTypes2.default.OBSERVE, {\n          fn: _effects.runObserverEffect, info: info, trigger: { name: property }\n        });\n        if (dynamicFn) {\n          this._addPropertyEffect(methodName, _propertyEffectsTypes2.default.OBSERVE, {\n            fn: _effects.runObserverEffect, info: info, trigger: { name: methodName }\n          });\n        }\n      }\n\n      /**\n       * Equivalent to static `createMethodObserver` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} expression Method expression\n       * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n       *   whether method names should be included as a dependency to the effect.\n       * @protected\n       */\n\n    }, {\n      key: '_createMethodObserver',\n      value: function _createMethodObserver(expression, dynamicFn) {\n        var sig = (0, _effects.parseMethod)(expression);\n        if (!sig) {\n          throw new Error(\"Malformed observer expression '\" + expression + \"'\");\n        }\n        (0, _effects.createMethodEffect)(this, sig, _propertyEffectsTypes2.default.OBSERVE, _effects.runMethodEffect, null, dynamicFn);\n      }\n\n      /**\n       * Equivalent to static `createNotifyingProperty` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n\n    }, {\n      key: '_createNotifyingProperty',\n      value: function _createNotifyingProperty(property) {\n        this._addPropertyEffect(property, _propertyEffectsTypes2.default.NOTIFY, {\n          fn: _effects.runNotifyEffect,\n          info: {\n            eventName: CaseMap.camelToDashCase(property) + '-changed',\n            property: property\n          }\n        });\n      }\n\n      /**\n       * Equivalent to static `createReflectedProperty` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n\n    }, {\n      key: '_createReflectedProperty',\n      value: function _createReflectedProperty(property) {\n        var attr = CaseMap.camelToDashCase(property);\n        if (attr[0] === '-') {\n          console.warn('Property ' + property + ' cannot be reflected to attribute ' + attr + ' because \"-\" is not a valid starting attribute name. Use a lowercase first letter for the property thisead.');\n        } else {\n          this._addPropertyEffect(property, _propertyEffectsTypes2.default.REFLECT, {\n            fn: _effects.runReflectEffect,\n            info: {\n              attrName: attr\n            }\n          });\n        }\n      }\n\n      /**\n       * Equivalent to static `createComputedProperty` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Name of computed property to set\n       * @param {string} expression Method expression\n       * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n       *   whether method names should be included as a dependency to the effect.\n       * @protected\n       */\n\n    }, {\n      key: '_createComputedProperty',\n      value: function _createComputedProperty(property, expression, dynamicFn) {\n        var sig = (0, _effects.parseMethod)(expression);\n        if (!sig) {\n          throw new Error(\"Malformed computed expression '\" + expression + \"'\");\n        }\n        (0, _effects.createMethodEffect)(this, sig, _propertyEffectsTypes2.default.COMPUTE, _effects.runComputedEffect, property, dynamicFn);\n      }\n\n      // -- static class methods ------------\n\n      /**\n       * Ensures an accessor exists for the specified property, and adds\n       * to a list of \"property effects\" that will run when the accessor for\n       * the specified property is set.  Effects are grouped by \"type\", which\n       * roughly corresponds to a phase in effect processing.  The effect\n       * metadata should be in the following form:\n       *\n       *     {\n       *       fn: effectFunction, // Reference to function to call to perform effect\n       *       info: { ... }       // Effect metadata passed to function\n       *       trigger: {          // Optional triggering metadata; if not provided\n       *         name: string      // the property is treated as a wildcard\n       *         structured: boolean\n       *         wildcard: boolean\n       *       }\n       *     }\n       *\n       * Effects are called from `_propertiesChanged` in the following order by\n       * type:\n       *\n       * 1. COMPUTE\n       * 2. PROPAGATE\n       * 3. REFLECT\n       * 4. OBSERVE\n       * 5. NOTIFY\n       *\n       * Effect functions are called with the following signature:\n       *\n       *     effectFunction(inst, path, props, oldProps, info, hasPaths)\n       *\n       * @param {string} property Property that should trigger the effect\n       * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @param {Object=} effect Effect metadata object\n       * @protected\n       */\n\n    }, {\n      key: 'PROPERTY_EFFECT_TYPES',\n      get: function get() {\n        return _propertyEffectsTypes2.default;\n      }\n    }], [{\n      key: 'addPropertyEffect',\n      value: function addPropertyEffect(property, type, effect) {\n        this.prototype._addPropertyEffect(property, type, effect);\n      }\n\n      /**\n       * Creates a single-property observer for the given property.\n       *\n       * @param {string} property Property name\n       * @param {string} methodName Name of observer method to call\n       * @param {boolean=} dynamicFn Whether the method name should be included as\n       *   a dependency to the effect.\n       * @protected\n       */\n\n    }, {\n      key: 'createPropertyObserver',\n      value: function createPropertyObserver(property, methodName, dynamicFn) {\n        this.prototype._createPropertyObserver(property, methodName, dynamicFn);\n      }\n\n      /**\n       * Creates a multi-property \"method observer\" based on the provided\n       * expression, which should be a string in the form of a normal Javascript\n       * function signature: `'methodName(arg1, [..., argn])'`.  Each argument\n       * should correspond to a property or path in the context of this\n       * prototype (or instance), or may be a literal string or number.\n       *\n       * @param {string} expression Method expression\n       * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n       *   whether method names should be included as a dependency to the effect.\n       * @protected\n       */\n\n    }, {\n      key: 'createMethodObserver',\n      value: function createMethodObserver(expression, dynamicFn) {\n        this.prototype._createMethodObserver(expression, dynamicFn);\n      }\n\n      /**\n       * Causes the setter for the given property to dispatch `<property>-changed`\n       * events to notify of changes to the property.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n\n    }, {\n      key: 'createNotifyingProperty',\n      value: function createNotifyingProperty(property) {\n        this.prototype._createNotifyingProperty(property);\n      }\n\n      /**\n       * Creates a read-only accessor for the given property.\n       *\n       * To set the property, use the protected `_setProperty` API.\n       * To create a custom protected setter (e.g. `_setMyProp()` for\n       * property `myProp`), pass `true` for `protectedSetter`.\n       *\n       * Note, if the property will have other property effects, this method\n       * should be called first, before adding other effects.\n       *\n       * @param {string} property Property name\n       * @param {boolean=} protectedSetter Creates a custom protected setter\n       *   when `true`.\n       * @protected\n       */\n\n    }, {\n      key: 'createReadOnlyProperty',\n      value: function createReadOnlyProperty(property, protectedSetter) {\n        this.prototype._createReadOnlyProperty(property, protectedSetter);\n      }\n\n      /**\n       * Causes the setter for the given property to reflect the property value\n       * to a (dash-cased) attribute of the same name.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n\n    }, {\n      key: 'createReflectedProperty',\n      value: function createReflectedProperty(property) {\n        this.prototype._createReflectedProperty(property);\n      }\n\n      /**\n       * Creates a computed property whose value is set to the result of the\n       * method described by the given `expression` each time one or more\n       * arguments to the method changes.  The expression should be a string\n       * in the form of a normal Javascript function signature:\n       * `'methodName(arg1, [..., argn])'`\n       *\n       * @param {string} property Name of computed property to set\n       * @param {string} expression Method expression\n       * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n       *   method names should be included as a dependency to the effect.\n       * @protected\n       */\n\n    }, {\n      key: 'createComputedProperty',\n      value: function createComputedProperty(property, expression, dynamicFn) {\n        this.prototype._createComputedProperty(property, expression, dynamicFn);\n      }\n    }]);\n\n    return PropertyEffects;\n  }(propertyEffectsBase);\n\n  // make a typing for closure :P\n\n\n  PropertyEffectsType = PropertyEffects;\n\n  return PropertyEffects;\n});\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PropertyAccessors = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n__webpack_require__(0);\n\nvar _mixin = __webpack_require__(5);\n\nvar _caseMap = __webpack_require__(4);\n\nvar caseMap$0 = _interopRequireWildcard(_caseMap);\n\nvar _async = __webpack_require__(11);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar caseMap = caseMap$0;\n\nvar microtask = _async.microTask;\n\n// Save map of native properties; this forms a blacklist or properties\n// that won't have their values \"saved\" by `saveAccessorValue`, since\n// reading from an HTMLElement accessor from the context of a prototype throws\nvar nativeProperties = {};\nvar proto = HTMLElement.prototype;\nwhile (proto) {\n  var props = Object.getOwnPropertyNames(proto);\n  for (var i = 0; i < props.length; i++) {\n    nativeProperties[props[i]] = true;\n  }\n  proto = Object.getPrototypeOf(proto);\n}\n\n/**\n * Used to save the value of a property that will be overridden with\n * an accessor. If the `model` is a prototype, the values will be saved\n * in `__dataProto`, and it's up to the user (or downstream mixin) to\n * decide how/when to set these values back into the accessors.\n * If `model` is already an instance (it has a `__data` property), then\n * the value will be set as a pending property, meaning the user should\n * call `_invalidateProperties` or `_flushProperties` to take effect\n *\n * @param {Object} model Prototype or instance\n * @param {string} property Name of property\n * @private\n */\nfunction saveAccessorValue(model, property) {\n  // Don't read/store value for any native properties since they could throw\n  if (!nativeProperties[property]) {\n    var value = model[property];\n    if (value !== undefined) {\n      if (model.__data) {\n        // Adding accessor to instance; update the property\n        // It is the user's responsibility to call _flushProperties\n        model._setPendingProperty(property, value);\n      } else {\n        // Adding accessor to proto; save proto's value for instance-time use\n        if (!model.__dataProto) {\n          model.__dataProto = {};\n        } else if (!model.hasOwnProperty(JSCompiler_renameProperty('__dataProto', model))) {\n          model.__dataProto = Object.create(model.__dataProto);\n        }\n        model.__dataProto[property] = value;\n      }\n    }\n  }\n}\n\nvar PropertyAccessors = exports.PropertyAccessors = (0, _mixin.dedupingMixin)(function (superClass) {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyAccessors}\n   * @extends HTMLElement\n   * @unrestricted\n   */\n  var PropertyAccessors = function (_superClass) {\n    _inherits(PropertyAccessors, _superClass);\n\n    _createClass(PropertyAccessors, null, [{\n      key: 'createPropertiesForAttributes',\n\n\n      /**\n       * Generates property accessors for all attributes in the standard\n       * static `observedAttributes` array.\n       *\n       * Attribute names are mapped to property names using the `dash-case` to\n       * `camelCase` convention\n       *\n       */\n      value: function createPropertiesForAttributes() {\n        var a$ = this.observedAttributes;\n        for (var _i = 0; _i < a$.length; _i++) {\n          this.prototype._createPropertyAccessor(caseMap.dashToCamelCase(a$[_i]));\n        }\n      }\n    }]);\n\n    function PropertyAccessors() {\n      _classCallCheck(this, PropertyAccessors);\n\n      /** @type {boolean} */\n      var _this = _possibleConstructorReturn(this, (PropertyAccessors.__proto__ || Object.getPrototypeOf(PropertyAccessors)).call(this));\n\n      _this.__serializing;\n      /** @type {number} */\n      _this.__dataCounter;\n      /** @type {boolean} */\n      _this.__dataEnabled;\n      /** @type {boolean} */\n      _this.__dataReady;\n      /** @type {boolean} */\n      _this.__dataInvalid;\n      /** @type {!Object} */\n      _this.__data;\n      /** @type {Object} */\n      _this.__dataPending;\n      /** @type {Object} */\n      _this.__dataOld;\n      /** @type {Object} */\n      _this.__dataProto;\n      /** @type {Object} */\n      _this.__dataHasAccessor;\n      /** @type {Object} */\n      _this.__dataInstanceProps;\n      _this._initializeProperties();\n      return _this;\n    }\n\n    /**\n     * Implements native Custom Elements `attributeChangedCallback` to\n     * set an attribute value to a property via `_attributeToProperty`.\n     *\n     * @param {string} name Name of attribute that changed\n     * @param {?string} old Old attribute value\n     * @param {?string} value New attribute value\n     */\n\n\n    _createClass(PropertyAccessors, [{\n      key: 'attributeChangedCallback',\n      value: function attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n          this._attributeToProperty(name, value);\n        }\n      }\n\n      /**\n       * Initializes the local storage for property accessors.\n       *\n       * Provided as an override point for performing any setup work prior\n       * to initializing the property accessor system.\n       *\n       * @protected\n       */\n\n    }, {\n      key: '_initializeProperties',\n      value: function _initializeProperties() {\n        this.__serializing = false;\n        this.__dataCounter = 0;\n        this.__dataEnabled = false;\n        this.__dataReady = false;\n        this.__dataInvalid = false;\n        this.__data = {};\n        this.__dataPending = null;\n        this.__dataOld = null;\n        if (this.__dataProto) {\n          this._initializeProtoProperties(this.__dataProto);\n          this.__dataProto = null;\n        }\n        // Capture instance properties; these will be set into accessors\n        // during first flush. Don't set them here, since we want\n        // these to overwrite defaults/constructor assignments\n        for (var p in this.__dataHasAccessor) {\n          if (this.hasOwnProperty(p)) {\n            this.__dataInstanceProps = this.__dataInstanceProps || {};\n            this.__dataInstanceProps[p] = this[p];\n            delete this[p];\n          }\n        }\n      }\n\n      /**\n       * Called at instance time with bag of properties that were overwritten\n       * by accessors on the prototype when accessors were created.\n       *\n       * The default implementation sets these properties back into the\n       * setter at instance time.  This method is provided as an override\n       * point for customizing or providing more efficient initialization.\n       *\n       * @param {Object} props Bag of property values that were overwritten\n       *   when creating property accessors.\n       * @protected\n       */\n\n    }, {\n      key: '_initializeProtoProperties',\n      value: function _initializeProtoProperties(props) {\n        for (var p in props) {\n          this._setProperty(p, props[p]);\n        }\n      }\n\n      /**\n       * Called at ready time with bag of instance properties that overwrote\n       * accessors when the element upgraded.\n       *\n       * The default implementation sets these properties back into the\n       * setter at ready time.  This method is provided as an override\n       * point for customizing or providing more efficient initialization.\n       *\n       * @param {Object} props Bag of property values that were overwritten\n       *   when creating property accessors.\n       * @protected\n       */\n\n    }, {\n      key: '_initializeInstanceProperties',\n      value: function _initializeInstanceProperties(props) {\n        Object.assign(this, props);\n      }\n\n      /**\n       * Ensures the element has the given attribute. If it does not,\n       * assigns the given value to the attribute.\n       *\n       *\n       * @param {string} attribute Name of attribute to ensure is set.\n       * @param {string} value of the attribute.\n       */\n\n    }, {\n      key: '_ensureAttribute',\n      value: function _ensureAttribute(attribute, value) {\n        if (!this.hasAttribute(attribute)) {\n          this._valueToNodeAttribute(this, value, attribute);\n        }\n      }\n\n      /**\n       * Deserializes an attribute to its associated property.\n       *\n       * This method calls the `_deserializeValue` method to convert the string to\n       * a typed value.\n       *\n       * @param {string} attribute Name of attribute to deserialize.\n       * @param {?string} value of the attribute.\n       * @param {*=} type type to deserialize to.\n       */\n\n    }, {\n      key: '_attributeToProperty',\n      value: function _attributeToProperty(attribute, value, type) {\n        // Don't deserialize back to property if currently reflecting\n        if (!this.__serializing) {\n          var property = caseMap.dashToCamelCase(attribute);\n          this[property] = this._deserializeValue(value, type);\n        }\n      }\n\n      /**\n       * Serializes a property to its associated attribute.\n       *\n       * @param {string} property Property name to reflect.\n       * @param {string=} attribute Attribute name to reflect.\n       * @param {*=} value Property value to refect.\n       */\n\n    }, {\n      key: '_propertyToAttribute',\n      value: function _propertyToAttribute(property, attribute, value) {\n        this.__serializing = true;\n        value = arguments.length < 3 ? this[property] : value;\n        this._valueToNodeAttribute(this, value, attribute || caseMap.camelToDashCase(property));\n        this.__serializing = false;\n      }\n\n      /**\n       * Sets a typed value to an HTML attribute on a node.\n       *\n       * This method calls the `_serializeValue` method to convert the typed\n       * value to a string.  If the `_serializeValue` method returns `undefined`,\n       * the attribute will be removed (this is the default for boolean\n       * type `false`).\n       *\n       * @param {Element} node Element to set attribute to.\n       * @param {*} value Value to serialize.\n       * @param {string} attribute Attribute name to serialize to.\n       */\n\n    }, {\n      key: '_valueToNodeAttribute',\n      value: function _valueToNodeAttribute(node, value, attribute) {\n        var str = this._serializeValue(value);\n        if (str === undefined) {\n          node.removeAttribute(attribute);\n        } else {\n          node.setAttribute(attribute, str);\n        }\n      }\n\n      /**\n       * Converts a typed JavaScript value to a string.\n       *\n       * This method is called by Polymer when setting JS property values to\n       * HTML attributes.  Users may override this method on Polymer element\n       * prototypes to provide serialization for custom types.\n       *\n       * @param {*} value Property value to serialize.\n       * @return {string | undefined} String serialized from the provided property value.\n       */\n\n    }, {\n      key: '_serializeValue',\n      value: function _serializeValue(value) {\n        /* eslint-disable no-fallthrough */\n        switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n          case 'boolean':\n            return value ? '' : undefined;\n\n          case 'object':\n            if (value instanceof Date) {\n              return value.toString();\n            } else if (value) {\n              try {\n                return JSON.stringify(value);\n              } catch (x) {\n                return '';\n              }\n            }\n\n          default:\n            return value != null ? value.toString() : undefined;\n        }\n      }\n\n      /**\n       * Converts a string to a typed JavaScript value.\n       *\n       * This method is called by Polymer when reading HTML attribute values to\n       * JS properties.  Users may override this method on Polymer element\n       * prototypes to provide deserialization for custom `type`s.  Note,\n       * the `type` argument is the value of the `type` field provided in the\n       * `properties` configuration object for a given property, and is\n       * by convention the constructor for the type to deserialize.\n       *\n       * Note: The return value of `undefined` is used as a sentinel value to\n       * indicate the attribute should be removed.\n       *\n       * @param {?string} value Attribute value to deserialize.\n       * @param {*=} type Type to deserialize the string to.\n       * @return {*} Typed value deserialized from the provided string.\n       */\n\n    }, {\n      key: '_deserializeValue',\n      value: function _deserializeValue(value, type) {\n        /**\n         * @type {*}\n         */\n        var outValue = void 0;\n        switch (type) {\n          case Number:\n            outValue = Number(value);\n            break;\n\n          case Boolean:\n            outValue = value !== null;\n            break;\n\n          case Object:\n            try {\n              outValue = JSON.parse( /** @type string */value);\n            } catch (x) {\n              // allow non-JSON literals like Strings and Numbers\n            }\n            break;\n\n          case Array:\n            try {\n              outValue = JSON.parse( /** @type string */value);\n            } catch (x) {\n              outValue = null;\n              console.warn('Polymer::Attributes: couldn\\'t decode Array as JSON: ' + value);\n            }\n            break;\n\n          case Date:\n            outValue = new Date(value);\n            break;\n\n          case String:\n          default:\n            outValue = value;\n            break;\n        }\n\n        return outValue;\n      }\n      /* eslint-enable no-fallthrough */\n\n      /**\n       * Creates a setter/getter pair for the named property with its own\n       * local storage.  The getter returns the value in the local storage,\n       * and the setter calls `_setProperty`, which updates the local storage\n       * for the property and enqueues a `_propertiesChanged` callback.\n       *\n       * This method may be called on a prototype or an instance.  Calling\n       * this method may overwrite a property value that already exists on\n       * the prototype/instance by creating the accessor.  When calling on\n       * a prototype, any overwritten values are saved in `__dataProto`,\n       * and it is up to the subclasser to decide how/when to set those\n       * properties back into the accessor.  When calling on an instance,\n       * the overwritten value is set via `_setPendingProperty`, and the\n       * user should call `_invalidateProperties` or `_flushProperties`\n       * for the values to take effect.\n       *\n       * @param {string} property Name of the property\n       * @param {boolean=} readOnly When true, no setter is created; the\n       *   protected `_setProperty` function must be used to set the property\n       * @protected\n       */\n\n    }, {\n      key: '_createPropertyAccessor',\n      value: function _createPropertyAccessor(property, readOnly) {\n        if (!this.hasOwnProperty('__dataHasAccessor')) {\n          this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor);\n        }\n        if (!this.__dataHasAccessor[property]) {\n          this.__dataHasAccessor[property] = true;\n          saveAccessorValue(this, property);\n          Object.defineProperty(this, property, {\n            /* eslint-disable valid-jsdoc */\n            /** @this {PropertyAccessors} */\n            get: function get() {\n              return this.__data[property];\n            },\n            /** @this {PropertyAccessors} */\n            set: readOnly ? function () {} : function (value) {\n              this._setProperty(property, value);\n            }\n            /* eslint-enable */\n          });\n        }\n      }\n\n      /**\n       * Returns true if this library created an accessor for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if an accessor was created\n       */\n\n    }, {\n      key: '_hasAccessor',\n      value: function _hasAccessor(property) {\n        return this.__dataHasAccessor && this.__dataHasAccessor[property];\n      }\n\n      /**\n       * Updates the local storage for a property (via `_setPendingProperty`)\n       * and enqueues a `_proeprtiesChanged` callback.\n       *\n       * @param {string} property Name of the property\n       * @param {*} value Value to set\n       * @protected\n       */\n\n    }, {\n      key: '_setProperty',\n      value: function _setProperty(property, value) {\n        if (this._setPendingProperty(property, value)) {\n          this._invalidateProperties();\n        }\n      }\n\n      /**\n       * Updates the local storage for a property, records the previous value,\n       * and adds it to the set of \"pending changes\" that will be passed to the\n       * `_propertiesChanged` callback.  This method does not enqueue the\n       * `_propertiesChanged` callback.\n       *\n       * @param {string} property Name of the property\n       * @param {*} value Value to set\n       * @return {boolean} Returns true if the property changed\n       * @protected\n       */\n\n    }, {\n      key: '_setPendingProperty',\n      value: function _setPendingProperty(property, value) {\n        var old = this.__data[property];\n        var changed = this._shouldPropertyChange(property, value, old);\n        if (changed) {\n          if (!this.__dataPending) {\n            this.__dataPending = {};\n            this.__dataOld = {};\n          }\n          // Ensure old is captured from the last turn\n          if (this.__dataOld && !(property in this.__dataOld)) {\n            this.__dataOld[property] = old;\n          }\n          this.__data[property] = value;\n          this.__dataPending[property] = value;\n        }\n        return changed;\n      }\n\n      /**\n       * Returns true if the specified property has a pending change.\n       *\n       * @param {string} prop Property name\n       * @return {boolean} True if property has a pending change\n       * @protected\n       */\n\n    }, {\n      key: '_isPropertyPending',\n      value: function _isPropertyPending(prop) {\n        return Boolean(this.__dataPending && prop in this.__dataPending);\n      }\n\n      /**\n       * Marks the properties as invalid, and enqueues an async\n       * `_propertiesChanged` callback.\n       *\n       * @protected\n       */\n\n    }, {\n      key: '_invalidateProperties',\n      value: function _invalidateProperties() {\n        var _this2 = this;\n\n        if (!this.__dataInvalid && this.__dataReady) {\n          this.__dataInvalid = true;\n          microtask.run(function () {\n            if (_this2.__dataInvalid) {\n              _this2.__dataInvalid = false;\n              _this2._flushProperties();\n            }\n          });\n        }\n      }\n\n      /**\n       * Call to enable property accessor processing. Before this method is\n       * called accessor values will be set but side effects are\n       * queued. When called, any pending side effects occur immediately.\n       * For elements, generally `connectedCallback` is a normal spot to do so.\n       * It is safe to call this method multiple times as it only turns on\n       * property accessors once.\n       */\n\n    }, {\n      key: '_enableProperties',\n      value: function _enableProperties() {\n        if (!this.__dataEnabled) {\n          this.__dataEnabled = true;\n          if (this.__dataInstanceProps) {\n            this._initializeInstanceProperties(this.__dataInstanceProps);\n            this.__dataInstanceProps = null;\n          }\n          this.ready();\n        }\n      }\n\n      /**\n       * Calls the `_propertiesChanged` callback with the current set of\n       * pending changes (and old values recorded when pending changes were\n       * set), and resets the pending set of changes. Generally, this method\n       * should not be called in user code.\n       *\n       *\n       * @protected\n       */\n\n    }, {\n      key: '_flushProperties',\n      value: function _flushProperties() {\n        if (this.__dataPending && this.__dataOld) {\n          var changedProps = this.__dataPending;\n          this.__dataPending = null;\n          this.__dataCounter++;\n          this._propertiesChanged(this.__data, changedProps, this.__dataOld);\n          this.__dataCounter--;\n        }\n      }\n\n      /**\n       * Lifecycle callback called the first time properties are being flushed.\n       * Prior to `ready`, all property sets through accessors are queued and\n       * their effects are flushed after this method returns.\n       *\n       * Users may override this function to implement behavior that is\n       * dependent on the element having its properties initialized, e.g.\n       * from defaults (initialized from `constructor`, `_initializeProperties`),\n       * `attributeChangedCallback`, or values propagated from host e.g. via\n       * bindings.  `super.ready()` must be called to ensure the data system\n       * becomes enabled.\n       *\n       * @public\n       */\n\n    }, {\n      key: 'ready',\n      value: function ready() {\n        this.__dataReady = true;\n        // Run normal flush\n        this._flushProperties();\n      }\n\n      /**\n       * Callback called when any properties with accessors created via\n       * `_createPropertyAccessor` have been set.\n       *\n       * @param {!Object} currentProps Bag of all current accessor values\n       * @param {!Object} changedProps Bag of properties changed since the last\n       *   call to `_propertiesChanged`\n       * @param {!Object} oldProps Bag of previous values for each property\n       *   in `changedProps`\n       * @protected\n       */\n\n    }, {\n      key: '_propertiesChanged',\n      value: function _propertiesChanged(currentProps, changedProps, oldProps) {} // eslint-disable-line no-unused-vars\n\n\n      /**\n       * Method called to determine whether a property value should be\n       * considered as a change and cause the `_propertiesChanged` callback\n       * to be enqueued.\n       *\n       * The default implementation returns `true` for primitive types if a\n       * strict equality check fails, and returns `true` for all Object/Arrays.\n       * The method always returns false for `NaN`.\n       *\n       * Override this method to e.g. provide stricter checking for\n       * Objects/Arrays when using immutable patterns.\n       *\n       * @param {string} property Property name\n       * @param {*} value New property value\n       * @param {*} old Previous property value\n       * @return {boolean} Whether the property should be considered a change\n       *   and enqueue a `_proeprtiesChanged` callback\n       * @protected\n       */\n\n    }, {\n      key: '_shouldPropertyChange',\n      value: function _shouldPropertyChange(property, value, old) {\n        return (\n          // Strict equality check\n          old !== value && (\n          // This ensures (old==NaN, value==NaN) always returns false\n          old === old || value === value)\n        );\n      }\n    }]);\n\n    return PropertyAccessors;\n  }(superClass);\n\n  return PropertyAccessors;\n});\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// comes from template-stamp.js but removing the templating using html\n\nfunction createNodeEventHandler(context, eventName, methodName) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  context = context._methodHost || context;\n  var handler = function handler(e) {\n    if (context[methodName]) {\n      context[methodName](e, e.detail);\n    } else {\n      console.warn('listener method `' + methodName + '` not defined');\n    }\n  };\n  return handler;\n}\n\nexports.default = function (superClass) {\n  return function (_superClass) {\n    _inherits(_class, _superClass);\n\n    function _class() {\n      _classCallCheck(this, _class);\n\n      return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));\n    }\n\n    _createClass(_class, [{\n      key: '_addMethodEventListenerToNode',\n\n      /**\n       * Adds an event listener by method name for the event provided.\n       *\n       * This method generates a handler function that looks up the method\n       * name at handling time.\n       *\n       * @param {Node} node Node to add listener on\n       * @param {string} eventName Name of event\n       * @param {string} methodName Name of method\n       * @param {*=} context Context the method will be called on (defaults\n       *   to `node`)\n       * @return {Function} Generated handler function\n       */\n      value: function _addMethodEventListenerToNode(node, eventName, methodName, context) {\n        context = context || node;\n        var handler = createNodeEventHandler(context, eventName, methodName);\n        this._addEventListenerToNode(node, eventName, handler);\n        return handler;\n      }\n\n      /**\n       * Override point for adding custom or simulated event handling.\n       *\n       * @param {Node} node Node to add event listener to\n       * @param {string} eventName Name of event\n       * @param {Function} handler Listener function to add\n       */\n\n    }, {\n      key: '_addEventListenerToNode',\n      value: function _addEventListenerToNode(node, eventName, handler) {\n        node.addEventListener(eventName, handler);\n      }\n\n      /**\n       * Override point for adding custom or simulated event handling.\n       *\n       * @param {Node} node Node to remove event listener from\n       * @param {string} eventName Name of event\n       * @param {Function} handler Listener function to remove\n       */\n\n    }, {\n      key: '_removeEventListenerFromNode',\n      value: function _removeEventListenerFromNode(node, eventName, handler) {\n        node.removeEventListener(eventName, handler);\n      }\n    }]);\n\n    return _class;\n  }(superClass);\n};\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n* Helper api for enqueing client dom created by a host element.\n*\n* By default elements are flushed via `_flushProperties` when\n* `connectedCallback` is called. Elements attach their client dom to\n* themselves at `ready` time which results from this first flush.\n* This provides an ordering guarantee that the client dom an element\n* creates is flushed before the element itself (i.e. client `ready`\n* fires before host `ready`).\n*\n* However, if `_flushProperties` is called *before* an element is connected,\n* as for example `Templatize` does, this ordering guarantee cannot be\n* satisfied because no elements are connected. (Note: Bound elements that\n* receive data do become enqueued clients and are properly ordered but\n* unbound elements are not.)\n*\n* To maintain the desired \"client before host\" ordering guarantee for this\n* case we rely on the \"host stack. Client nodes registers themselves with\n* the creating host element when created. This ensures that all client dom\n* is readied in the proper order, maintaining the desired guarantee.\n*\n* @private\n*/\n\nexports.default = {\n  stack: [],\n\n  /**\n   * @param {*} inst Instance to add to hostStack\n   * @this {hostStack}\n   */\n  registerHost: function registerHost(inst) {\n    if (this.stack.length) {\n      var host = this.stack[this.stack.length - 1];\n      host._enqueueClient(inst);\n    }\n  },\n\n\n  /**\n   * @param {*} inst Instance to begin hosting\n   * @this {hostStack}\n   */\n  beginHosting: function beginHosting(inst) {\n    this.stack.push(inst);\n  },\n\n\n  /**\n   * @param {*} inst Instance to end hosting\n   * @this {hostStack}\n   */\n  endHosting: function endHosting(inst) {\n    var stackLen = this.stack.length;\n    if (stackLen && this.stack[stackLen - 1] === inst) {\n      this.stack.pop();\n    }\n  }\n};\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.ensureOwnEffectMap = ensureOwnEffectMap;\nexports.runEffects = runEffects;\nexports.runEffectsForProperty = runEffectsForProperty;\nexports.pathMatchesTrigger = pathMatchesTrigger;\nexports.runObserverEffect = runObserverEffect;\nexports.runNotifyEffects = runNotifyEffects;\nexports.notifyPath = notifyPath;\nexports.dispatchNotifyEvent = dispatchNotifyEvent;\nexports.runNotifyEffect = runNotifyEffect;\nexports.handleNotification = handleNotification;\nexports.runReflectEffect = runReflectEffect;\nexports.runComputedEffects = runComputedEffects;\nexports.runComputedEffect = runComputedEffect;\nexports.computeLinkedPaths = computeLinkedPaths;\nexports.createMethodEffect = createMethodEffect;\nexports.runMethodEffect = runMethodEffect;\nexports.marshalArgs = marshalArgs;\nexports.parseMethod = parseMethod;\nexports.parseArgs = parseArgs;\nexports.parseArg = parseArg;\n\nvar _path = __webpack_require__(12);\n\nvar _caseMap = __webpack_require__(4);\n\nvar _settings = __webpack_require__(27);\n\nvar _propertyEffectsTypes = __webpack_require__(13);\n\nvar _propertyEffectsTypes2 = _interopRequireDefault(_propertyEffectsTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar dedupeId = 0;\nvar emptyArray = [];\n\n/**\n * Ensures that the model has an own-property map of effects for the given type.\n * The model may be a prototype or an instance.\n *\n * Property effects are stored as arrays of effects by property in a map,\n * by named type on the model. e.g.\n *\n *   __computeEffects: {\n *     foo: [ ... ],\n *     bar: [ ... ]\n *   }\n *\n * If the model does not yet have an effect map for the type, one is created\n * and returned.  If it does, but it is not an own property (i.e. the\n * prototype had effects), the the map is deeply cloned and the copy is\n * set on the model and returned, ready for new effects to be added.\n *\n * @param {Object} model Prototype or instance\n * @param {string} type Property effect type\n * @return {Object} The own-property map of effects for the given type\n * @private\n */\nfunction ensureOwnEffectMap(model, type) {\n  var effects = model[type];\n  if (!effects) {\n    effects = model[type] = {};\n  } else if (!model.hasOwnProperty(type)) {\n    effects = model[type] = Object.create(model[type]);\n    for (var p in effects) {\n      var protoFx = effects[p];\n      var instFx = effects[p] = Array(protoFx.length);\n      for (var i = 0; i < protoFx.length; i++) {\n        instFx[i] = protoFx[i];\n      }\n    }\n  }\n  return effects;\n}\n\n// -- effects ----------------------------------------------\n\n/**\n * Runs all effects of a given type for the given set of property changes\n * on an instance.\n *\n * @param {!PropertyEffectsType} inst The instance with effects to run\n * @param {Object} effects Object map of property-to-Array of effects\n * @param {Object} props Bag of current property changes\n * @param {Object=} oldProps Bag of previous values for changed properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffects(inst, effects, props, oldProps, hasPaths, extraArgs) {\n  if (effects) {\n    var ran = false;\n    var id = dedupeId++;\n    for (var prop in props) {\n      if (runEffectsForProperty(inst, effects, id, prop, props, oldProps, hasPaths, extraArgs)) {\n        ran = true;\n      }\n    }\n    return ran;\n  }\n  return false;\n}\n\n/**\n * Runs a list of effects for a given property.\n *\n * @param {!PropertyEffectsType} inst The instance with effects to run\n * @param {Object} effects Object map of property-to-Array of effects\n * @param {number} dedupeId Counter used for de-duping effects\n * @param {string} prop Name of changed property\n * @param {*} props Changed properties\n * @param {*} oldProps Old properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffectsForProperty(inst, effects, dedupeId, prop, props, oldProps, hasPaths, extraArgs) {\n  var ran = false;\n  var rootProperty = hasPaths ? (0, _path.root)(prop) : prop;\n  var fxs = effects[rootProperty];\n  if (fxs) {\n    for (var i = 0, l = fxs.length, fx; i < l && (fx = fxs[i]); i++) {\n      if ((!fx.info || fx.info.lastRun !== dedupeId) && (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n        if (fx.info) {\n          fx.info.lastRun = dedupeId;\n        }\n        fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);\n        ran = true;\n      }\n    }\n  }\n  return ran;\n}\n\n/**\n * Determines whether a property/path that has changed matches the trigger\n * criteria for an effect.  A trigger is a descriptor with the following\n * structure, which matches the descriptors returned from `parseArg`.\n * e.g. for `foo.bar.*`:\n * ```\n * trigger: {\n *   name: 'a.b',\n *   structured: true,\n *   wildcard: true\n * }\n * ```\n * If no trigger is given, the path is deemed to match.\n *\n * @param {string} path Path or property that changed\n * @param {DataTrigger} trigger Descriptor\n * @return {boolean} Whether the path matched the trigger\n */\nfunction pathMatchesTrigger(path, trigger) {\n  if (trigger) {\n    var triggerPath = trigger.name;\n    return triggerPath === path || trigger.structured && (0, _path.isAncestor)(triggerPath, path) || trigger.wildcard && (0, _path.isDescendant)(triggerPath, path);\n  } else {\n    return true;\n  }\n}\n\n/**\n * Implements the \"observer\" effect.\n *\n * Calls the method with `info.methodName` on the instance, passing the\n * new and old values.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @private\n */\nfunction runObserverEffect(inst, property, props, oldProps, info) {\n  var fn = inst[info.methodName];\n  var changedProp = info.property;\n  if (fn) {\n    fn.call(inst, inst.__data[changedProp], oldProps[changedProp]);\n  } else if (!info.dynamicFn) {\n    console.warn('observer method `' + info.methodName + '` not defined');\n  }\n}\n\n/**\n * Runs \"notify\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * will dispatch path notification events in the case that the property\n * changed was a path and the root property for that path didn't have a\n * \"notify\" effect.  This is to maintain 1.0 behavior that did not require\n * `notify: true` to ensure object sub-property notifications were\n * sent.\n *\n * @param {!PropertyEffectsType} inst The instance with effects to run\n * @param {Object} notifyProps Bag of properties to notify\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @private\n */\nfunction runNotifyEffects(inst, notifyProps, props, oldProps, hasPaths) {\n  // Notify\n  var fxs = inst[_propertyEffectsTypes2.default.NOTIFY];\n  var notified = void 0;\n  var id = dedupeId++;\n  // Try normal notify effects; if none, fall back to try path notification\n  for (var prop in notifyProps) {\n    if (notifyProps[prop]) {\n      if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) {\n        notified = true;\n      } else if (hasPaths && notifyPath(inst, prop, props)) {\n        notified = true;\n      }\n    }\n  }\n  // Flush host if we actually notified and host was batching\n  // And the host has already initialized clients; this prevents\n  // an issue with a host observing data changes before clients are ready.\n  var host = void 0;\n  if (notified && (host = inst.__dataHost) && host._invalidateProperties) {\n    host._invalidateProperties();\n  }\n}\n\n/**\n * Dispatches {property}-changed events with path information in the detail\n * object to indicate a sub-path of the property was changed.\n *\n * @param {!PropertyEffectsType} inst The element from which to fire the event\n * @param {string} path The path that was changed\n * @param {Object} props Bag of current property changes\n * @return {boolean} Returns true if the path was notified\n * @private\n */\nfunction notifyPath(inst, path, props) {\n  var rootProperty = (0, _path.root)(path);\n  if (rootProperty !== path) {\n    var eventName = (0, _caseMap.camelToDashCase)(rootProperty) + '-changed';\n    dispatchNotifyEvent(inst, eventName, props[path], path);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Dispatches {property}-changed events to indicate a property (or path)\n * changed.\n *\n * @param {!PropertyEffectsType} inst The element from which to fire the event\n * @param {string} eventName The name of the event to send ('{property}-changed')\n * @param {*} value The value of the changed property\n * @param {string | null | undefined} path If a sub-path of this property changed, the path\n *   that changed (optional).\n * @private\n * @suppress {invalidCasts}\n */\nfunction dispatchNotifyEvent(inst, eventName, value, path) {\n  var detail = {\n    value: value,\n    queueProperty: true\n  };\n  if (path) {\n    detail.path = path;\n  }\n  /** @type {!HTMLElement} */inst.dispatchEvent(new window.CustomEvent(eventName, { detail: detail }));\n}\n\n/**\n * Implements the \"notify\" effect.\n *\n * Dispatches a non-bubbling event named `info.eventName` on the instance\n * with a detail object containing the new `value`.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @private\n */\nfunction runNotifyEffect(inst, property, props, oldProps, info, hasPaths) {\n  var rootProperty = hasPaths ? (0, _path.root)(property) : property;\n  var path = rootProperty !== property ? property : null;\n  var value = path ? (0, _path.get)(inst, path) : inst.__data[property];\n  if (path && value === undefined) {\n    value = props[property]; // specifically for .splices\n  }\n  dispatchNotifyEvent(inst, info.eventName, value, path);\n}\n\n/**\n * Handler function for 2-way notification events. Receives context\n * information captured in the `addNotifyListener` closure from the\n * `__notifyListeners` metadata.\n *\n * Sets the value of the notified property to the host property or path.  If\n * the event contained path information, translate that path to the host\n * scope's name for that path first.\n *\n * @param {CustomEvent} event Notification event (e.g. '<property>-changed')\n * @param {!PropertyEffectsType} inst Host element instance handling the notification event\n * @param {string} fromProp Child element property that was bound\n * @param {string} toPath Host property/path that was bound\n * @param {boolean} negate Whether the binding was negated\n * @private\n */\nfunction handleNotification(event, inst, fromProp, toPath, negate) {\n  var value = void 0;\n  var detail = /** @type {Object} */event.detail;\n  var fromPath = detail && detail.path;\n  if (fromPath) {\n    toPath = (0, _path.translate)(fromProp, toPath, fromPath);\n    value = detail && detail.value;\n  } else {\n    value = event.target[fromProp];\n  }\n  value = negate ? !value : value;\n  if (!inst[_propertyEffectsTypes2.default.READ_ONLY] || !inst[_propertyEffectsTypes2.default.READ_ONLY][toPath]) {\n    if (inst._setPendingPropertyOrPath(toPath, value, true, Boolean(fromPath)) && (!detail || !detail.queueProperty)) {\n      inst._invalidateProperties();\n    }\n  }\n}\n\n/**\n * Implements the \"reflect\" effect.\n *\n * Sets the attribute named `info.attrName` to the given property value.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @private\n */\nfunction runReflectEffect(inst, property, props, oldProps, info) {\n  var value = inst.__data[property];\n  if (_settings.sanitizeDOMValue) {\n    value = (0, _settings.sanitizeDOMValue)(value, info.attrName, 'attribute', /** @type {Node} */inst);\n  }\n  inst._propertyToAttribute(property, info.attrName, value);\n}\n\n/**\n * Runs \"computed\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * continues to run computed effects based on the output of each pass until\n * there are no more newly computed properties.  This ensures that all\n * properties that will be computed by the initial set of changes are\n * computed before other effects (binding propagation, observers, and notify)\n * run.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {!Object} changedProps Bag of changed properties\n * @param {!Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @private\n */\nfunction runComputedEffects(inst, changedProps, oldProps, hasPaths) {\n  var computeEffects = inst[_propertyEffectsTypes2.default.COMPUTE];\n  if (computeEffects) {\n    var inputProps = changedProps;\n    while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) {\n      Object.assign(oldProps, inst.__dataOld);\n      Object.assign(changedProps, inst.__dataPending);\n      inputProps = inst.__dataPending;\n      inst.__dataPending = null;\n    }\n  }\n}\n\n/**\n * Implements the \"computed property\" effect by running the method with the\n * values of the arguments specified in the `info` object and setting the\n * return value to the computed property specified.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @private\n */\nfunction runComputedEffect(inst, property, props, oldProps, info) {\n  var result = runMethodEffect(inst, property, props, oldProps, info);\n  var computedProp = info.methodInfo;\n  if (inst.__dataHasAccessor && inst.__dataHasAccessor[computedProp]) {\n    inst._setPendingProperty(computedProp, result, true);\n  } else {\n    inst[computedProp] = result;\n  }\n}\n\n/**\n * Computes path changes based on path links set up using the `linkPaths`\n * API.\n *\n * @param {!PropertyEffectsType} inst The instance whose props are changing\n * @param {string | !Array<(string|number)>} path Path that has changed\n * @param {*} value Value of changed path\n * @private\n */\nfunction computeLinkedPaths(inst, path, value) {\n  var links = inst.__dataLinkedPaths;\n  if (links) {\n    var link = void 0;\n    for (var a in links) {\n      var b = links[a];\n      if ((0, _path.isDescendant)(a, path)) {\n        link = (0, _path.translate)(a, b, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      } else if ((0, _path.isDescendant)(b, path)) {\n        link = (0, _path.translate)(b, a, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      }\n    }\n  }\n}\n\n// -- for method-based effects (complexObserver & computed) --------------\n\n/**\n * Adds property effects for each argument in the method signature (and\n * optionally, for the method name if `dynamic` is true) that calls the\n * provided effect function.\n *\n * @param {Element | Object} model Prototype or instance\n * @param {!MethodSignature} sig Method signature metadata\n * @param {string} type Type of property effect to add\n * @param {Function} effectFn Function to run when arguments change\n * @param {*=} methodInfo Effect-specific information to be included in\n *   method effect metadata\n * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n *   method names should be included as a dependency to the effect. Note,\n *   defaults to true if the signature is static (sig.static is true).\n * @private\n */\nfunction createMethodEffect(model, sig, type, effectFn, methodInfo, dynamicFn) {\n  dynamicFn = sig.static || dynamicFn && ((typeof dynamicFn === 'undefined' ? 'undefined' : _typeof(dynamicFn)) !== 'object' || dynamicFn[sig.methodName]);\n  var info = {\n    methodName: sig.methodName,\n    args: sig.args,\n    methodInfo: methodInfo,\n    dynamicFn: dynamicFn\n  };\n  for (var i = 0, arg; i < sig.args.length && (arg = sig.args[i]); i++) {\n    if (!arg.literal) {\n      model._addPropertyEffect(arg.rootProperty, type, {\n        fn: effectFn, info: info, trigger: arg\n      });\n    }\n  }\n  if (dynamicFn) {\n    model._addPropertyEffect(sig.methodName, type, {\n      fn: effectFn, info: info\n    });\n  }\n}\n\n/**\n * Calls a method with arguments marshaled from properties on the instance\n * based on the method signature contained in the effect metadata.\n *\n * Multi-property observers, computed properties, and inline computing\n * functions call this function to invoke the method, then use the return\n * value accordingly.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {*} Returns the return value from the method invocation\n * @private\n */\nfunction runMethodEffect(inst, property, props, oldProps, info) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  var context = inst._methodHost || inst;\n  var fn = context[info.methodName];\n  if (fn) {\n    var args = marshalArgs(inst.__data, info.args, property, props);\n    return fn.apply(context, args);\n  } else if (!info.dynamicFn) {\n    console.warn('method `' + info.methodName + '` not defined');\n  }\n}\n\n/**\n * Gather the argument values for a method specified in the provided array\n * of argument metadata.\n *\n * The `path` and `value` arguments are used to fill in wildcard descriptor\n * when the method is being called as a result of a path notification.\n *\n * @param {Object} data Instance data storage object to read properties from\n * @param {!Array<!MethodArg>} args Array of argument metadata\n * @param {string} path Property/path name that triggered the method effect\n * @param {Object} props Bag of current property changes\n * @return {Array<*>} Array of argument values\n * @private\n */\nfunction marshalArgs(data, args, path, props) {\n  var values = [];\n  for (var i = 0, l = args.length; i < l; i++) {\n    var arg = args[i];\n    var name = arg.name;\n    var v = void 0;\n    if (arg.literal) {\n      v = arg.value;\n    } else {\n      if (arg.structured) {\n        v = (0, _path.get)(data, name);\n        // when data is not stored e.g. `splices`\n        if (v === undefined) {\n          v = props[name];\n        }\n      } else {\n        v = data[name];\n      }\n    }\n    if (arg.wildcard) {\n      // Only send the actual path changed info if the change that\n      // caused the observer to run matched the wildcard\n      var baseChanged = name.indexOf(path + '.') === 0;\n      var matches = path.indexOf(name) === 0 && !baseChanged;\n      values[i] = {\n        path: matches ? path : name,\n        value: matches ? props[path] : v,\n        base: v\n      };\n    } else {\n      values[i] = v;\n    }\n  }\n  return values;\n}\n\n/**\n * Parses an expression string for a method signature, and returns a metadata\n * describing the method in terms of `methodName`, `static` (whether all the\n * arguments are literals), and an array of `args`\n *\n * @param {string} expression The expression to parse\n * @return {?MethodSignature} The method metadata object if a method expression was\n *   found, otherwise `undefined`\n * @private\n */\nfunction parseMethod(expression) {\n  // tries to match valid javascript property names\n  var m = expression.match(/([^\\s]+?)\\(([\\s\\S]*)\\)/);\n  if (m) {\n    var methodName = m[1];\n    var sig = { methodName: methodName, static: true, args: emptyArray };\n    if (m[2].trim()) {\n      // replace escaped commas with comma entity, split on un-escaped commas\n      var args = m[2].replace(/\\\\,/g, '&comma;').split(',');\n      return parseArgs(args, sig);\n    } else {\n      return sig;\n    }\n  }\n  return null;\n}\n\n/**\n * Parses an array of arguments and sets the `args` property of the supplied\n * signature metadata object. Sets the `static` property to false if any\n * argument is a non-literal.\n *\n * @param {!Array<string>} argList Array of argument names\n * @param {!MethodSignature} sig Method signature metadata object\n * @return {!MethodSignature} The updated signature metadata object\n * @private\n */\nfunction parseArgs(argList, sig) {\n  sig.args = argList.map(function (rawArg) {\n    var arg = parseArg(rawArg);\n    if (!arg.literal) {\n      sig.static = false;\n    }\n    return arg;\n  }, this);\n  return sig;\n}\n\n/**\n * Parses an individual argument, and returns an argument metadata object\n * with the following fields:\n *\n *   {\n *     value: 'prop',        // property/path or literal value\n *     literal: false,       // whether argument is a literal\n *     structured: false,    // whether the property is a path\n *     rootProperty: 'prop', // the root property of the path\n *     wildcard: false       // whether the argument was a wildcard '.*' path\n *   }\n *\n * @param {string} rawArg The string value of the argument\n * @return {!MethodArg} Argument metadata object\n * @private\n */\nfunction parseArg(rawArg) {\n  // clean up whitespace\n  var arg = rawArg.trim()\n  // replace comma entity with comma\n  .replace(/&comma;/g, ',')\n  // repair extra escape sequences; note only commas strictly need\n  // escaping, but we allow any other char to be escaped since its\n  // likely users will do this\n  .replace(/\\\\(.)/g, '\\$1') // eslint-disable-line no-useless-escape\n  ;\n  // basic argument descriptor\n  var a = {\n    name: arg,\n    value: '',\n    literal: false\n  };\n  // detect literal value (must be String or Number)\n  var fc = arg[0];\n  if (fc === '-') {\n    fc = arg[1];\n  }\n  if (fc >= '0' && fc <= '9') {\n    fc = '#';\n  }\n  switch (fc) {\n    case \"'\":\n    case '\"':\n      a.value = arg.slice(1, -1);\n      a.literal = true;\n      break;\n    case '#':\n      a.value = Number(arg);\n      a.literal = true;\n      break;\n  }\n  // if not literal, look for structured path\n  if (!a.literal) {\n    a.rootProperty = (0, _path.root)(arg);\n    // detect structured path (has dots)\n    a.structured = (0, _path.isPath)(arg);\n    if (a.structured) {\n      a.wildcard = arg.slice(-2) === '.*';\n      if (a.wildcard) {\n        a.name = arg.slice(0, -2);\n      }\n    }\n  }\n  return a;\n}\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setSanitizeDOMValue = exports.sanitizeDOMValue = exports.setRootPath = exports.rootPath = exports.Settings = exports.useNativeCustomElements = exports.useNativeCSSProperties = exports.useShadow = undefined;\n\n__webpack_require__(0);\n\nvar _resolveUrl = __webpack_require__(14);\n\n/**\n * Legacy settings.\n * @namespace\n * @memberof Polymer\n */\nvar settings = undefined || {};\nvar useShadow = exports.useShadow = !window.ShadyDOM;\nvar useNativeCSSProperties = exports.useNativeCSSProperties = Boolean(!window.ShadyCSS || window.ShadyCSS.nativeCss);\nvar useNativeCustomElements = exports.useNativeCustomElements = !window.customElements.polyfillWrapFlushCallback;\nexports.Settings = settings;\n\n/**\n * Globally settable property that is automatically assigned to\n * `Polymer.ElementMixin` instances, useful for binding in templates to\n * make URL's relative to an application's root.  Defaults to the main\n * document URL, but can be overridden by users.  It may be useful to set\n * `Polymer.rootPath` to provide a stable application mount path when\n * using client side routing.\n *\n * @memberof Polymer\n */\n\nvar rootPath = undefined || (0, _resolveUrl.pathFromUrl)(document.baseURI || window.location.href);\n\nexports.rootPath = rootPath;\nvar setRootPath = exports.setRootPath = function setRootPath(path) {\n  exports.rootPath = rootPath = path;\n};\n\n/**\n * A global callback used to sanitize any value before inserting it into the DOM. The callback signature is:\n *\n *     Polymer = {\n *       sanitizeDOMValue: function(value, name, type, node) { ... }\n *     }\n *\n * Where:\n *\n * `value` is the value to sanitize.\n * `name` is the name of an attribute or property (for example, href).\n * `type` indicates where the value is being inserted: one of property, attribute, or text.\n * `node` is the node where the value is being inserted.\n *\n * @type {(function(*,string,string,Node):*)|undefined}\n * @memberof Polymer\n */\nvar sanitizeDOMValue = undefined;\n\nexports.sanitizeDOMValue = sanitizeDOMValue;\nvar setSanitizeDOMValue = exports.setSanitizeDOMValue = function setSanitizeDOMValue(newSanitizeDOMValue) {\n  exports.sanitizeDOMValue = sanitizeDOMValue = newSanitizeDOMValue;\n};\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.notifySplices = notifySplices;\nexports.notifySplice = notifySplice;\nexports.upper = upper;\n// data api\n\n/**\n * Sends array splice notifications (`.splices` and `.length`)\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!PropertyEffectsType} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {Array} splices Array of splice records\n * @private\n */\nfunction notifySplices(inst, array, path, splices) {\n  var splicesPath = path + '.splices';\n  inst.notifyPath(splicesPath, { indexSplices: splices });\n  inst.notifyPath(path + '.length', array.length);\n  // Null here to allow potentially large splice records to be GC'ed.\n  inst.__data[splicesPath] = { indexSplices: null };\n}\n\n/**\n * Creates a splice record and sends an array splice notification for\n * the described mutation\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!PropertyEffectsType} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {number} index Index at which the array mutation occurred\n * @param {number} addedCount Number of added items\n * @param {Array} removed Array of removed items\n * @private\n */\nfunction notifySplice(inst, array, path, index, addedCount, removed) {\n  notifySplices(inst, array, path, [{\n    index: index,\n    addedCount: addedCount,\n    removed: removed,\n    object: array,\n    type: 'splice'\n  }]);\n}\n\n/**\n * Returns an upper-cased version of the string.\n *\n * @param {string} name String to uppercase\n * @return {string} Uppercased string\n * @private\n */\nfunction upper(name) {\n  return name[0].toUpperCase() + name.substring(1);\n}\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FlattenedNodesObserver = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n__webpack_require__(0);\n\nvar _arraySplice = __webpack_require__(30);\n\nvar _async = __webpack_require__(11);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Returns true if `node` is a slot element\n * @param {HTMLElement} node Node to test.\n * @return {boolean} Returns true if the given `node` is a slot\n * @private\n */\nfunction isSlot(node) {\n  return node.localName === 'slot';\n}\n\n/**\n * Class that listens for changes (additions or removals) to\n * \"flattened nodes\" on a given `node`. The list of flattened nodes consists\n * of a node's children and, for any children that are `<slot>` elements,\n * the expanded flattened list of `assignedNodes`.\n * For example, if the observed node has children `<a></a><slot></slot><b></b>`\n * and the `<slot>` has one `<div>` assigned to it, then the flattened\n * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n * `<slot>` elements assigned to it, these are flattened as well.\n *\n * The provided `callback` is called whenever any change to this list\n * of flattened nodes occurs, where an addition or removal of a node is\n * considered a change. The `callback` is called with one argument, an object\n * containing an array of any `addedNodes` and `removedNodes`.\n *\n * Note: the callback is called asynchronous to any changes\n * at a microtask checkpoint. This is because observation is performed using\n * `MutationObserver` and the `<slot>` element's `slotchange` event which\n * are asynchronous.\n *\n * @memberof Polymer\n * @summary Class that listens for changes (additions or removals) to\n * \"flattened nodes\" on a given `node`.\n */\n\nvar FlattenedNodesObserver = function () {\n  _createClass(FlattenedNodesObserver, null, [{\n    key: 'getFlattenedNodes',\n\n\n    /**\n     * Returns the list of flattened nodes for the given `node`.\n     * This list consists of a node's children and, for any children\n     * that are `<slot>` elements, the expanded flattened list of `assignedNodes`.\n     * For example, if the observed node has children `<a></a><slot></slot><b></b>`\n     * and the `<slot>` has one `<div>` assigned to it, then the flattened\n     * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n     * `<slot>` elements assigned to it, these are flattened as well.\n     *\n     * @param {HTMLElement|HTMLSlotElement} node The node for which to return the list of flattened nodes.\n     * @return {Array} The list of flattened nodes for the given `node`.\n    */\n    value: function getFlattenedNodes(node) {\n      if (isSlot(node)) {\n        return (/** @type {HTMLSlotElement} */node.assignedNodes({ flatten: true })\n        );\n      } else {\n        return Array.from(node.childNodes).map(function (node) {\n          if (isSlot(node)) {\n            return (/** @type {HTMLSlotElement} */node.assignedNodes({ flatten: true })\n            );\n          } else {\n            return [node];\n          }\n        }).reduce(function (a, b) {\n          return a.concat(b);\n        }, []);\n      }\n    }\n\n    /**\n     * @param {Node} target Node on which to listen for changes.\n     * @param {Function} callback Function called when there are additions\n     * or removals from the target's list of flattened nodes.\n    */\n\n  }]);\n\n  function FlattenedNodesObserver(target, callback) {\n    var _this = this;\n\n    _classCallCheck(this, FlattenedNodesObserver);\n\n    /** @type {MutationObserver} */\n    this._shadyChildrenObserver = null;\n    /** @type {MutationObserver} */\n    this._nativeChildrenObserver = null;\n    this._connected = false;\n    this._target = target;\n    this.callback = callback;\n    this._effectiveNodes = [];\n    this._observer = null;\n    this._scheduled = false;\n    /** @type {function()} */\n    this._boundSchedule = function () {\n      _this._schedule();\n    };\n    this.connect();\n    this._schedule();\n  }\n\n  /**\n   * Activates an observer. This method is automatically called when\n   * a `FlattenedNodesObserver` is created. It should only be called to\n   * re-activate an observer that has been deactivated via the `disconnect` method.\n   */\n\n\n  _createClass(FlattenedNodesObserver, [{\n    key: 'connect',\n    value: function connect() {\n      var _this2 = this;\n\n      if (isSlot(this._target)) {\n        this._listenSlots([this._target]);\n      } else {\n        this._listenSlots(this._target.children);\n        if (window.ShadyDOM) {\n          this._shadyChildrenObserver = ShadyDOM.observeChildren(this._target, function (mutations) {\n            _this2._processMutations(mutations);\n          });\n        } else {\n          this._nativeChildrenObserver = new MutationObserver(function (mutations) {\n            _this2._processMutations(mutations);\n          });\n          this._nativeChildrenObserver.observe(this._target, { childList: true });\n        }\n      }\n      this._connected = true;\n    }\n\n    /**\n     * Deactivates the flattened nodes observer. After calling this method\n     * the observer callback will not be called when changes to flattened nodes\n     * occur. The `connect` method may be subsequently called to reactivate\n     * the observer.\n     */\n\n  }, {\n    key: 'disconnect',\n    value: function disconnect() {\n      if (isSlot(this._target)) {\n        this._unlistenSlots([this._target]);\n      } else {\n        this._unlistenSlots(this._target.children);\n        if (window.ShadyDOM && this._shadyChildrenObserver) {\n          ShadyDOM.unobserveChildren(this._shadyChildrenObserver);\n          this._shadyChildrenObserver = null;\n        } else if (this._nativeChildrenObserver) {\n          this._nativeChildrenObserver.disconnect();\n          this._nativeChildrenObserver = null;\n        }\n      }\n      this._connected = false;\n    }\n  }, {\n    key: '_schedule',\n    value: function _schedule() {\n      var _this3 = this;\n\n      if (!this._scheduled) {\n        this._scheduled = true;\n        _async.microTask.run(function () {\n          return _this3.flush();\n        });\n      }\n    }\n  }, {\n    key: '_processMutations',\n    value: function _processMutations(mutations) {\n      this._processSlotMutations(mutations);\n      this.flush();\n    }\n  }, {\n    key: '_processSlotMutations',\n    value: function _processSlotMutations(mutations) {\n      if (mutations) {\n        for (var i = 0; i < mutations.length; i++) {\n          var mutation = mutations[i];\n          if (mutation.addedNodes) {\n            this._listenSlots(mutation.addedNodes);\n          }\n          if (mutation.removedNodes) {\n            this._unlistenSlots(mutation.removedNodes);\n          }\n        }\n      }\n    }\n\n    /**\n     * Flushes the observer causing any pending changes to be immediately\n     * delivered the observer callback. By default these changes are delivered\n     * asynchronously at the next microtask checkpoint.\n     *\n     * @return {boolean} Returns true if any pending changes caused the observer\n     * callback to run.\n     */\n\n  }, {\n    key: 'flush',\n    value: function flush() {\n      if (!this._connected) {\n        return false;\n      }\n      if (window.ShadyDOM) {\n        ShadyDOM.flush();\n      }\n      if (this._nativeChildrenObserver) {\n        this._processSlotMutations(this._nativeChildrenObserver.takeRecords());\n      } else if (this._shadyChildrenObserver) {\n        this._processSlotMutations(this._shadyChildrenObserver.takeRecords());\n      }\n      this._scheduled = false;\n      var info = {\n        target: this._target,\n        addedNodes: [],\n        removedNodes: []\n      };\n      var newNodes = this.constructor.getFlattenedNodes(this._target);\n      var splices = (0, _arraySplice.calculateSplices)(newNodes, this._effectiveNodes);\n      // process removals\n      for (var i = 0, s; i < splices.length && (s = splices[i]); i++) {\n        for (var j = 0, n; j < s.removed.length && (n = s.removed[j]); j++) {\n          info.removedNodes.push(n);\n        }\n      }\n      // process adds\n      for (var _i = 0, _s; _i < splices.length && (_s = splices[_i]); _i++) {\n        for (var _j = _s.index; _j < _s.index + _s.addedCount; _j++) {\n          info.addedNodes.push(newNodes[_j]);\n        }\n      }\n      // update cache\n      this._effectiveNodes = newNodes;\n      var didFlush = false;\n      if (info.addedNodes.length || info.removedNodes.length) {\n        didFlush = true;\n        this.callback.call(this._target, info);\n      }\n      return didFlush;\n    }\n  }, {\n    key: '_listenSlots',\n    value: function _listenSlots(nodeList) {\n      for (var i = 0; i < nodeList.length; i++) {\n        var n = nodeList[i];\n        if (isSlot(n)) {\n          n.addEventListener('slotchange', this._boundSchedule);\n        }\n      }\n    }\n  }, {\n    key: '_unlistenSlots',\n    value: function _unlistenSlots(nodeList) {\n      for (var i = 0; i < nodeList.length; i++) {\n        var n = nodeList[i];\n        if (isSlot(n)) {\n          n.removeEventListener('slotchange', this._boundSchedule);\n        }\n      }\n    }\n  }]);\n\n  return FlattenedNodesObserver;\n}();\n\nexports.FlattenedNodesObserver = FlattenedNodesObserver;\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calculateSplices = undefined;\n\n__webpack_require__(0);\n\nfunction newSplice(index, removed, addedCount) {\n  return {\n    index: index,\n    removed: removed,\n    addedCount: addedCount\n  };\n}\n\nvar EDIT_LEAVE = 0;\nvar EDIT_UPDATE = 1;\nvar EDIT_ADD = 2;\nvar EDIT_DELETE = 3;\n\n// Note: This function is *based* on the computation of the Levenshtein\n// \"edit\" distance. The one change is that \"updates\" are treated as two\n// edits - not one. With Array splices, an update is really a delete\n// followed by an add. By retaining this, we optimize for \"keeping\" the\n// maximum array items in the original array. For example:\n//\n//   'xxxx123' -> '123yyyy'\n//\n// With 1-edit updates, the shortest path would be just to update all seven\n// characters. With 2-edit updates, we delete 4, leave 3, and add 4. This\n// leaves the substring '123' intact.\nfunction calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd) {\n  // \"Deletion\" columns\n  var rowCount = oldEnd - oldStart + 1;\n  var columnCount = currentEnd - currentStart + 1;\n  var distances = new Array(rowCount);\n\n  // \"Addition\" rows. Initialize null column.\n  for (var i = 0; i < rowCount; i++) {\n    distances[i] = new Array(columnCount);\n    distances[i][0] = i;\n  }\n\n  // Initialize null row\n  for (var j = 0; j < columnCount; j++) {\n    distances[0][j] = j;\n  }for (var _i = 1; _i < rowCount; _i++) {\n    for (var _j = 1; _j < columnCount; _j++) {\n      if (equals(current[currentStart + _j - 1], old[oldStart + _i - 1])) distances[_i][_j] = distances[_i - 1][_j - 1];else {\n        var north = distances[_i - 1][_j] + 1;\n        var west = distances[_i][_j - 1] + 1;\n        distances[_i][_j] = north < west ? north : west;\n      }\n    }\n  }\n\n  return distances;\n}\n\n// This starts at the final weight, and walks \"backward\" by finding\n// the minimum previous weight recursively until the origin of the weight\n// matrix.\nfunction spliceOperationsFromEditDistances(distances) {\n  var i = distances.length - 1;\n  var j = distances[0].length - 1;\n  var current = distances[i][j];\n  var edits = [];\n  while (i > 0 || j > 0) {\n    if (i == 0) {\n      edits.push(EDIT_ADD);\n      j--;\n      continue;\n    }\n    if (j == 0) {\n      edits.push(EDIT_DELETE);\n      i--;\n      continue;\n    }\n    var northWest = distances[i - 1][j - 1];\n    var west = distances[i - 1][j];\n    var north = distances[i][j - 1];\n\n    var min = void 0;\n    if (west < north) min = west < northWest ? west : northWest;else min = north < northWest ? north : northWest;\n\n    if (min == northWest) {\n      if (northWest == current) {\n        edits.push(EDIT_LEAVE);\n      } else {\n        edits.push(EDIT_UPDATE);\n        current = northWest;\n      }\n      i--;\n      j--;\n    } else if (min == west) {\n      edits.push(EDIT_DELETE);\n      i--;\n      current = west;\n    } else {\n      edits.push(EDIT_ADD);\n      j--;\n      current = north;\n    }\n  }\n\n  edits.reverse();\n  return edits;\n}\n\n/**\n * Splice Projection functions:\n *\n * A splice map is a representation of how a previous array of items\n * was transformed into a new array of items. Conceptually it is a list of\n * tuples of\n *\n *   <index, removed, addedCount>\n *\n * which are kept in ascending index order of. The tuple represents that at\n * the |index|, |removed| sequence of items were removed, and counting forward\n * from |index|, |addedCount| items were added.\n */\n\n/**\n * Lacking individual splice mutation information, the minimal set of\n * splices can be synthesized given the previous state and final state of an\n * array. The basic approach is to calculate the edit distance matrix and\n * choose the shortest path through it.\n *\n * Complexity: O(l * p)\n *   l: The length of the current array\n *   p: The length of the old array\n *\n * @param {Array} current The current \"changed\" array for which to\n * calculate splices.\n * @param {number} currentStart Starting index in the `current` array for\n * which splices are calculated.\n * @param {number} currentEnd Ending index in the `current` array for\n * which splices are calculated.\n * @param {Array} old The original \"unchanged\" array to compare `current`\n * against to determine splices.\n * @param {number} oldStart Starting index in the `old` array for\n * which splices are calculated.\n * @param {number} oldEnd Ending index in the `old` array for\n * which splices are calculated.\n * @return {Array} Returns an array of splice record objects. Each of these\n * contains: `index` the location where the splice occurred; `removed`\n * the array of removed items from this location; `addedCount` the number\n * of items added at this location.\n */\nfunction calcSplices(current, currentStart, currentEnd, old, oldStart, oldEnd) {\n  var prefixCount = 0;\n  var suffixCount = 0;\n  var splice = void 0;\n\n  var minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);\n  if (currentStart == 0 && oldStart == 0) prefixCount = sharedPrefix(current, old, minLength);\n\n  if (currentEnd == current.length && oldEnd == old.length) suffixCount = sharedSuffix(current, old, minLength - prefixCount);\n\n  currentStart += prefixCount;\n  oldStart += prefixCount;\n  currentEnd -= suffixCount;\n  oldEnd -= suffixCount;\n\n  if (currentEnd - currentStart == 0 && oldEnd - oldStart == 0) return [];\n\n  if (currentStart == currentEnd) {\n    splice = newSplice(currentStart, [], 0);\n    while (oldStart < oldEnd) {\n      splice.removed.push(old[oldStart++]);\n    }return [splice];\n  } else if (oldStart == oldEnd) return [newSplice(currentStart, [], currentEnd - currentStart)];\n\n  var ops = spliceOperationsFromEditDistances(calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd));\n\n  splice = undefined;\n  var splices = [];\n  var index = currentStart;\n  var oldIndex = oldStart;\n  for (var i = 0; i < ops.length; i++) {\n    switch (ops[i]) {\n      case EDIT_LEAVE:\n        if (splice) {\n          splices.push(splice);\n          splice = undefined;\n        }\n\n        index++;\n        oldIndex++;\n        break;\n      case EDIT_UPDATE:\n        if (!splice) splice = newSplice(index, [], 0);\n\n        splice.addedCount++;\n        index++;\n\n        splice.removed.push(old[oldIndex]);\n        oldIndex++;\n        break;\n      case EDIT_ADD:\n        if (!splice) splice = newSplice(index, [], 0);\n\n        splice.addedCount++;\n        index++;\n        break;\n      case EDIT_DELETE:\n        if (!splice) splice = newSplice(index, [], 0);\n\n        splice.removed.push(old[oldIndex]);\n        oldIndex++;\n        break;\n    }\n  }\n\n  if (splice) {\n    splices.push(splice);\n  }\n  return splices;\n}\n\nfunction sharedPrefix(current, old, searchLength) {\n  for (var i = 0; i < searchLength; i++) {\n    if (!equals(current[i], old[i])) return i;\n  }return searchLength;\n}\n\nfunction sharedSuffix(current, old, searchLength) {\n  var index1 = current.length;\n  var index2 = old.length;\n  var count = 0;\n  while (count < searchLength && equals(current[--index1], old[--index2])) {\n    count++;\n  }return count;\n}\n\nfunction calculateSplices(current, previous) {\n  return calcSplices(current, 0, current.length, previous, 0, previous.length);\n}\n\nfunction equals(currentValue, previousValue) {\n  return currentValue === previousValue;\n}\n\nexports.calculateSplices = calculateSplices;\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _resolveUrl = __webpack_require__(14);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nexports.default = function (superClass) {\n  return function (_superClass) {\n    _inherits(_class, _superClass);\n\n    function _class() {\n      _classCallCheck(this, _class);\n\n      var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n\n      _this._boundHashChanged = _this._hashChanged.bind(_this);\n      _this._boundUrlChanged = _this._urlChanged.bind(_this);\n      _this._boundGlobalOnClick = _this._globalOnClick.bind(_this);\n      return _this;\n    }\n\n    _createClass(_class, [{\n      key: 'connectedCallback',\n      value: function connectedCallback() {\n        if (_get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'disconnectedCallback', this)) {\n          _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'connectedCallback', this).call(this);\n        }\n        window.addEventListener('hashchange', this._boundHashChanged);\n        window.addEventListener('location-changed', this._boundUrlChanged);\n        window.addEventListener('popstate', this._boundUrlChanged);\n        document.body.addEventListener('click', this._boundGlobalOnClick, true);\n        this._lastChangedAt = window.performance.now() - (this.dwellTime - 200);\n        this._initialized = true;\n\n        // set initialize values\n        this.path = window.decodeURIComponent(window.location.pathname);\n        this.query = window.location.search.slice(1);\n        this.hash = window.decodeURIComponent(window.location.hash.slice(1));\n        this.dwellTime = 2000;\n        this._initialized = false;\n        this._urlChanged();\n      }\n    }, {\n      key: 'disconnectedCallback',\n      value: function disconnectedCallback() {\n        if (_get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'disconnectedCallback', this)) {\n          _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'disconnectedCallback', this).call(this);\n        }\n        window.removeEventListener('hashchange', this._boundHashChanged);\n        window.removeEventListener('location-changed', this._boundUrlChanged);\n        window.removeEventListener('popstate', this._boundUrlChanged);\n        document.body.removeEventListener('click', this._boundGlobalOnClick);\n        this._initialized = false;\n      }\n    }, {\n      key: '_hashChanged',\n      value: function _hashChanged() {\n        this.hash = window.decodeURIComponent(window.location.hash.substring(1));\n      }\n    }, {\n      key: '_urlChanged',\n      value: function _urlChanged() {\n        // We want to extract all info out of the updated URL before we\n        // try to write anything back into it.\n        //\n        // i.e. without _dontUpdateUrl we'd overwrite the new path with the old\n        // one when we set this.hash. Likewise for query.\n        this._dontUpdateUrl = true;\n        this._hashChanged();\n        this.path = window.decodeURIComponent(window.location.pathname);\n        this.query = window.location.search.substring(1);\n        this._dontUpdateUrl = false;\n        this._updateUrl();\n      }\n    }, {\n      key: '_getUrl',\n      value: function _getUrl() {\n        var partiallyEncodedPath = window.encodeURI(this.path).replace(/\\#/g, '%23').replace(/\\?/g, '%3F'); // eslint-disable-line no-useless-escape\n        var partiallyEncodedQuery = '';\n        if (this.query) {\n          partiallyEncodedQuery = '?' + this.query.replace(/\\#/g, '%23'); // eslint-disable-line no-useless-escape\n        }\n        var partiallyEncodedHash = '';\n        if (this.hash) {\n          partiallyEncodedHash = '#' + window.encodeURI(this.hash);\n        }\n        return partiallyEncodedPath + partiallyEncodedQuery + partiallyEncodedHash;\n      }\n    }, {\n      key: '_updateUrl',\n      value: function _updateUrl() {\n        if (this._dontUpdateUrl || !this._initialized) {\n          return;\n        }\n\n        if (this.path === window.decodeURIComponent(window.location.pathname) && this.query === window.location.search.substring(1) && this.hash === window.decodeURIComponent(window.location.hash.substring(1))) {\n          // Nothing to do, the current URL is a representation of our properties.\n          return;\n        }\n        var newUrl = this._getUrl();\n        // Need to use a full URL in case the containing page has a base URI.\n        var fullNewUrl = (0, _resolveUrl.resolveUrl)(newUrl, window.location.protocol + '//' + window.location.host).href;\n        var now = window.performance.now();\n        var shouldReplace = this._lastChangedAt + this.dwellTime > now;\n        this._lastChangedAt = now;\n        if (shouldReplace) {\n          window.history.replaceState({}, '', fullNewUrl);\n        } else {\n          window.history.pushState({}, '', fullNewUrl);\n        }\n        window.dispatchEvent(new window.CustomEvent('location-changed'));\n      }\n\n      /**\n       * A necessary evil so that links work as expected. Does its best to\n       * bail out early if possible.\n       *\n       * @param {MouseEvent} event .\n       */\n\n    }, {\n      key: '_globalOnClick',\n      value: function _globalOnClick(event) {\n        // If another event handler has stopped this event then there's nothing\n        // for us to do. This can happen e.g. when there are multiple\n        // iron-location elements in a page.\n        if (event.defaultPrevented) {\n          return;\n        }\n        var href = this._getSameOriginLinkHref(event);\n        if (!href) {\n          return;\n        }\n        event.preventDefault();\n        // If the navigation is to the current page we shouldn't add a history\n        // entry or fire a change event.\n        if (href === window.location.href) {\n          return;\n        }\n        window.history.pushState({}, '', href);\n        window.dispatchEvent(new window.CustomEvent('location-changed'));\n      }\n\n      /**\n       * Returns the absolute URL of the link (if any) that this click event\n       * is clicking on, if we can and should override the resulting full\n       * page navigation. Returns null otherwise.\n       *\n       * @param {MouseEvent} event .\n       * @return {string?} .\n       */\n\n    }, {\n      key: '_getSameOriginLinkHref',\n      value: function _getSameOriginLinkHref(event) {\n        // We only care about left-clicks.\n        if (event.button !== 0) {\n          return null;\n        }\n        // We don't want modified clicks, where the intent is to open the page\n        // in a new tab.\n        if (event.metaKey || event.ctrlKey) {\n          return null;\n        }\n        var eventPath = event.composedPath();\n        var anchor = null;\n        for (var i = 0; i < eventPath.length; i++) {\n          var element = eventPath[i];\n          if (element.tagName === 'A' && element.href) {\n            anchor = element;\n            break;\n          }\n        }\n        // If there's no link there's nothing to do.\n        if (!anchor) {\n          return null;\n        }\n        // Target blank is a new tab, don't intercept.\n        if (anchor.target === '_blank') {\n          // capture link click\n          if (anchor.href && window.ga) {\n            window.ga('send', 'event', 'Link', 'Click', anchor.href, 1);\n          }\n          return null;\n        }\n        // If the link is for an existing parent frame, don't intercept.\n        if ((anchor.target === '_top' || anchor.target === '_parent') && window.top !== window) {\n          return null;\n        }\n        var href = anchor.href;\n        // It only makes sense for us to intercept same-origin navigations.\n        // pushState/replaceState don't work with cross-origin links.\n        var url;\n        if (document.baseURI != null) {\n          url = (0, _resolveUrl.resolveUrl)(href, /** @type {string} */document.baseURI);\n        } else {\n          url = (0, _resolveUrl.resolveUrl)(href);\n        }\n        var origin;\n        // IE Polyfill\n        if (window.location.origin) {\n          origin = window.location.origin;\n        } else {\n          origin = window.location.protocol + '//' + window.location.host;\n        }\n        var urlOrigin;\n        if (url.origin) {\n          urlOrigin = url.origin;\n        } else {\n          urlOrigin = url.protocol + '//' + url.host;\n        }\n        if (urlOrigin !== origin) {\n          return null;\n        }\n        var normalizedHref = url.pathname + url.search + url.hash;\n        // pathname should start with '/', but may not if `new URL` is not supported\n        if (normalizedHref[0] !== '/') {\n          normalizedHref = '/' + normalizedHref;\n        }\n        // If we've been configured not to handle this url... don't handle it!\n        if (this._urlSpaceRegExp && !this._urlSpaceRegExp.test(normalizedHref)) {\n          return null;\n        }\n        // Need to use a full URL in case the containing page has a base URI.\n        var fullNormalizedHref = (0, _resolveUrl.resolveUrl)(normalizedHref, window.location.href).href;\n        return fullNormalizedHref;\n      }\n    }, {\n      key: '_makeRegExp',\n      value: function _makeRegExp(urlSpaceRegex) {\n        return RegExp(urlSpaceRegex);\n      }\n    }]);\n\n    return _class;\n  }(superClass);\n};\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// import 'polymer/lib/mixins/property-effects.html'\nexports.default = function (superClass) {\n  return function (_superClass) {\n    _inherits(_class, _superClass);\n\n    function _class() {\n      _classCallCheck(this, _class);\n\n      return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));\n    }\n\n    _createClass(_class, [{\n      key: 'connectedCallback',\n      value: function connectedCallback() {\n        if (_get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'connectedCallback', this)) {\n          _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'connectedCallback', this).call(this);\n        }\n\n        // initialize values\n        this.paramsObject = {};\n        this._dontReact = false;\n      }\n    }, {\n      key: '_queryChanged',\n      value: function _queryChanged(query) {\n        this.paramsString = query;\n      }\n    }, {\n      key: '_paramsStringChanged',\n      value: function _paramsStringChanged() {\n        this._dontReact = true;\n        this.paramsObject = this._decodeParams(this.paramsString);\n        this._dontReact = false;\n      }\n    }, {\n      key: 'paramsObjectChanged',\n      value: function paramsObjectChanged() {\n        if (this._dontReact) {\n          return;\n        }\n        this.paramsString = this._encodeParams(this.paramsObject).replace(/%3F/g, '?').replace(/%2F/g, '/').replace(/'/g, '%27');\n      }\n    }, {\n      key: '_encodeParams',\n      value: function _encodeParams(params) {\n        var encodedParams = [];\n        for (var key in params) {\n          var value = params[key];\n          if (value === '') {\n            encodedParams.push(encodeURIComponent(key));\n          } else if (value) {\n            encodedParams.push(encodeURIComponent(key) + '=' + encodeURIComponent(value.toString()));\n          }\n        }\n        return encodedParams.join('&');\n      }\n    }, {\n      key: '_decodeParams',\n      value: function _decodeParams(paramString) {\n        var params = {};\n        // Work around a bug in decodeURIComponent where + is not\n        // converted to spaces:\n        paramString = (paramString || '').replace(/\\+/g, '%20');\n        var paramList = paramString.split('&');\n        for (var i = 0; i < paramList.length; i++) {\n          var param = paramList[i].split('=');\n          if (param[0]) {\n            params[decodeURIComponent(param[0])] = decodeURIComponent(param[1] || '');\n          }\n        }\n        return params;\n      }\n    }]);\n\n    return _class;\n  }(superClass);\n};\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp;\nmodule.exports.parse = parse;\nmodule.exports.compile = compile;\nmodule.exports.tokensToFunction = tokensToFunction;\nmodule.exports.tokensToRegExp = tokensToRegExp;\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n// Match escaped characters that would otherwise appear in future matches.\n// This allows the user to escape special characters that won't transform.\n'(\\\\\\\\.)',\n// Match Express-style parameters and un-named parameters with a prefix\n// and optional suffixes. Matches appear as:\n//\n// \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\"]\n// \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined]\n'(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'].join('|'), 'g');\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse(str, options) {\n  var tokens = [];\n  var key = 0;\n  var index = 0;\n  var path = '';\n  var defaultDelimiter = options && options.delimiter || '/';\n  var delimiters = options && options.delimiters || './';\n  var pathEscaped = false;\n  var res;\n\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    var m = res[0];\n    var escaped = res[1];\n    var offset = res.index;\n    path += str.slice(index, offset);\n    index = offset + m.length;\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1];\n      pathEscaped = true;\n      continue;\n    }\n\n    var prev = '';\n    var next = str[index];\n    var name = res[2];\n    var capture = res[3];\n    var group = res[4];\n    var modifier = res[5];\n\n    if (!pathEscaped && path.length) {\n      var k = path.length - 1;\n\n      if (delimiters.indexOf(path[k]) > -1) {\n        prev = path[k];\n        path = path.slice(0, k);\n      }\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path);\n      path = '';\n      pathEscaped = false;\n    }\n\n    var partial = prev !== '' && next !== undefined && next !== prev;\n    var repeat = modifier === '+' || modifier === '*';\n    var optional = modifier === '?' || modifier === '*';\n    var delimiter = prev || defaultDelimiter;\n    var pattern = capture || group;\n\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'\n    });\n  }\n\n  // Push any remaining characters.\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index));\n  }\n\n  return tokens;\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile(str, options) {\n  return tokensToFunction(parse(str, options));\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction(tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length);\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (_typeof(tokens[i]) === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');\n    }\n  }\n\n  return function (data, options) {\n    var path = '';\n    var encode = options && options.encode || encodeURIComponent;\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n\n      if (typeof token === 'string') {\n        path += token;\n        continue;\n      }\n\n      var value = data ? data[token.name] : undefined;\n      var segment;\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array');\n        }\n\n        if (value.length === 0) {\n          if (token.optional) continue;\n\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty');\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j]);\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"');\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment;\n        }\n\n        continue;\n      }\n\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value));\n\n        if (!matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"');\n        }\n\n        path += token.prefix + segment;\n        continue;\n      }\n\n      if (token.optional) {\n        // Prepend partial segment prefixes.\n        if (token.partial) path += token.prefix;\n\n        continue;\n      }\n\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'));\n    }\n\n    return path;\n  };\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString(str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1');\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup(group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1');\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags(options) {\n  return options && options.sensitive ? '' : 'i';\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp(path, keys) {\n  if (!keys) return path;\n\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g);\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        pattern: null\n      });\n    }\n  }\n\n  return path;\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp(path, keys, options) {\n  var parts = [];\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source);\n  }\n\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options));\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction stringToRegexp(path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options);\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction tokensToRegExp(tokens, keys, options) {\n  options = options || {};\n\n  var strict = options.strict;\n  var end = options.end !== false;\n  var delimiter = escapeString(options.delimiter || '/');\n  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|');\n  var route = '';\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (typeof token === 'string') {\n      route += escapeString(token);\n    } else {\n      var prefix = escapeString(token.prefix);\n      var capture = '(?:' + token.pattern + ')';\n\n      if (keys) keys.push(token);\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*';\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?';\n        } else {\n          capture = prefix + '(' + capture + ')?';\n        }\n      } else {\n        capture = prefix + '(' + capture + ')';\n      }\n\n      route += capture;\n    }\n  }\n\n  // In non-strict mode we allow a delimiter at the end of a match.\n  if (!strict) {\n    route += '(?:' + delimiter + '(?=' + endsWith + '))?';\n  }\n\n  if (end) {\n    route += endsWith === '$' ? endsWith : '(?=' + endsWith + ')';\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += '(?=' + delimiter + '|' + endsWith + ')';\n  }\n\n  return new RegExp('^' + route, flags(options));\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp(path, keys, options) {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys);\n  }\n\n  if (Array.isArray(path)) {\n    return arrayToRegexp( /** @type {!Array} */path, keys, options);\n  }\n\n  return stringToRegexp( /** @type {string} */path, keys, options);\n}\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = {\n  'landing-page': function landingPage() {\n    return __webpack_require__.e/* import() */(0).then(__webpack_require__.bind(null, 59));\n  }\n};\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar auth = {\n  auth: function auth() {}\n};\n\nexports.default = auth;\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _templateObject = _taggedTemplateLiteral(['\\n  <style is=\"custom-style\">\\n    ', '\\n  </style>\\n\\n  <div class=\"main\" role=\"main\">\\n    <slot></slot>\\n  </div>\\n'], ['\\n  <style is=\"custom-style\">\\n    ', '\\n  </style>\\n\\n  <div class=\"main\" role=\"main\">\\n    <slot></slot>\\n  </div>\\n']);\n\nvar _litHtml = __webpack_require__(10);\n\nvar _style = __webpack_require__(37);\n\nvar _style2 = _interopRequireDefault(_style);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nexports.default = function () {\n  return (0, _litHtml.html)(_templateObject, _style2.default.toString());\n};\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n        var result = __webpack_require__(38);\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(19)(undefined);\n// imports\n\n\n// module\nexports.push([module.i, \"div[role='main'] {\\n  position: relative; }\\n\\n::slotted(.page) {\\n  position: absolute;\\n  background-color: white;\\n  top: 0;\\n  opacity: 0;\\n  z-index: -1;\\n  transition: opacity 0.3s;\\n  display: none; }\\n\\n::slotted(*) > .page {\\n  position: absolute;\\n  background-color: white;\\n  top: 0;\\n  opacity: 0;\\n  z-index: -1;\\n  transition: opacity 0.3s;\\n  display: none; }\\n\\n::slotted(.page--on-view) {\\n  position: relative !important;\\n  opacity: 1;\\n  z-index: 0;\\n  display: block; }\\n\\n::slotted(*) > .page--on-view {\\n  position: relative !important;\\n  opacity: 1;\\n  z-index: 0;\\n  display: block; }\\n\", \"\"]);\n\n// exports\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// main.js"," \t// install a JSONP callback for chunk loading\n \tvar parentJsonpFunction = window[\"webpackJsonp\"];\n \twindow[\"webpackJsonp\"] = function webpackJsonpCallback(chunkIds, moreModules, executeModules) {\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [], result;\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules, executeModules);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t};\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// objects to store loaded and loading chunks\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData === 0) {\n \t\t\treturn new Promise(function(resolve) { resolve(); });\n \t\t}\n\n \t\t// a Promise means \"currently loading\".\n \t\tif(installedChunkData) {\n \t\t\treturn installedChunkData[2];\n \t\t}\n\n \t\t// setup Promise in chunk cache\n \t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t});\n \t\tinstalledChunkData[2] = promise;\n\n \t\t// start chunk loading\n \t\tvar head = document.getElementsByTagName('head')[0];\n \t\tvar script = document.createElement('script');\n \t\tscript.type = 'text/javascript';\n \t\tscript.charset = 'utf-8';\n \t\tscript.async = true;\n \t\tscript.timeout = 120000;\n\n \t\tif (__webpack_require__.nc) {\n \t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t}\n \t\tscript.src = __webpack_require__.p + \"\" + ({\"0\":\"landing-page\"}[chunkId]||chunkId) + \".\" + chunkId + \".js\";\n \t\tvar timeout = setTimeout(onScriptComplete, 120000);\n \t\tscript.onerror = script.onload = onScriptComplete;\n \t\tfunction onScriptComplete() {\n \t\t\t// avoid mem leaks in IE.\n \t\t\tscript.onerror = script.onload = null;\n \t\t\tclearTimeout(timeout);\n \t\t\tvar chunk = installedChunks[chunkId];\n \t\t\tif(chunk !== 0) {\n \t\t\t\tif(chunk) {\n \t\t\t\t\tchunk[1](new Error('Loading chunk ' + chunkId + ' failed.'));\n \t\t\t\t}\n \t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t}\n \t\t};\n \t\thead.appendChild(script);\n\n \t\treturn promise;\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 20);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ed4ebd2b7b4a1bb5d91d","window.JSCompiler_renameProperty = function(prop, obj) { return prop; }\n\n/** @namespace */\nlet Polymer;\n\n\n\n// WEBPACK FOOTER //\n// ../node_modules/@polymer/polymer/lib/utils/boot.js","import './boot.js';\n\nconst caseMap = {};\nconst DASH_TO_CAMEL = /-[a-z]/g;\nconst CAMEL_TO_DASH = /([A-Z])/g;\n\nexport function dashToCamelCase(dash) {\n  return caseMap[dash] || (\n    caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL,\n      (m) => m[1].toUpperCase()\n    )\n  );\n}\n\nexport function camelToDashCase(camel) {\n  return caseMap[camel] || (\n    caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase()\n  );\n}\n\n\n\n// WEBPACK FOOTER //\n// ../node_modules/@polymer/polymer/lib/utils/case-map.js","import './boot.js';\n\n// unique global id for deduping mixins.\nlet dedupeId = 0;\n\n/**\n * @constructor\n * @extends {Function}\n */\nfunction MixinFunction(){}\n/** @type {(WeakMap | undefined)} */\nMixinFunction.prototype.__mixinApplications;\n/** @type {(Object | undefined)} */\nMixinFunction.prototype.__mixinSet;\n\nexport const dedupingMixin = function(mixin) {\n  let mixinApplications = /** @type {!MixinFunction} */(mixin).__mixinApplications;\n  if (!mixinApplications) {\n    mixinApplications = new WeakMap();\n    /** @type {!MixinFunction} */(mixin).__mixinApplications = mixinApplications;\n  }\n  // maintain a unique id for each mixin\n  let mixinDedupeId = dedupeId++;\n  function dedupingMixin(base) {\n    let baseSet = /** @type {!MixinFunction} */(base).__mixinSet;\n    if (baseSet && baseSet[mixinDedupeId]) {\n      return base;\n    }\n    let map = mixinApplications;\n    let extended = map.get(base);\n    if (!extended) {\n      extended = /** @type {!Function} */(mixin)(base);\n      map.set(base, extended);\n    }\n    // copy inherited mixin set from the extended class, or the base class\n    // NOTE: we avoid use of Set here because some browser (IE11)\n    // cannot extend a base Set via the constructor.\n    let mixinSet = Object.create(/** @type {!MixinFunction} */(extended).__mixinSet || baseSet || null);\n    mixinSet[mixinDedupeId] = true;\n    /** @type {!MixinFunction} */(extended).__mixinSet = mixinSet;\n    return extended;\n  }\n\n  return dedupingMixin;\n};\n\n\n\n// WEBPACK FOOTER //\n// ../node_modules/@polymer/polymer/lib/utils/mixin.js","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n// The first argument to JS template tags retain identity across multiple\n// calls to a tag for the same literal, so we can cache work done per literal\n// in a Map.\nconst templates = new Map();\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport function html(strings, ...values) {\n    let template = templates.get(strings);\n    if (template === undefined) {\n        template = new Template(strings);\n        templates.set(strings, template);\n    }\n    return new TemplateResult(template, values);\n}\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(template, values) {\n        this.template = template;\n        this.values = values;\n    }\n}\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n */\nexport function render(result, container, partCallback = defaultPartCallback) {\n    let instance = container.__templateInstance;\n    // Repeat render, just call update()\n    if (instance !== undefined && instance.template === result.template &&\n        instance._partCallback === partCallback) {\n        instance.update(result.values);\n        return;\n    }\n    // First render, create a new TemplateInstance and append it\n    instance = new TemplateInstance(result.template, partCallback);\n    container.__templateInstance = instance;\n    const fragment = instance._clone();\n    instance.update(result.values);\n    let child;\n    while ((child = container.lastChild)) {\n        container.removeChild(child);\n    }\n    container.appendChild(fragment);\n}\n/**\n * An expression marker with embedded unique key to avoid\n * https://github.com/PolymerLabs/lit-html/issues/62\n */\nconst exprMarker = `{{lit-${Math.random()}}}`;\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport class TemplatePart {\n    constructor(type, index, name, rawName, strings) {\n        this.type = type;\n        this.index = index;\n        this.name = name;\n        this.rawName = rawName;\n        this.strings = strings;\n    }\n}\nexport class Template {\n    constructor(strings) {\n        this.parts = [];\n        this.element = document.createElement('template');\n        this.element.innerHTML = strings.join(exprMarker);\n        const walker = document.createTreeWalker(this.element.content, 5 /* elements & text */);\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        while (walker.nextNode()) {\n            index++;\n            const node = walker.currentNode;\n            if (node.nodeType === 1 /* ELEMENT_NODE */) {\n                if (!node.hasAttributes())\n                    continue;\n                const attributes = node.attributes;\n                for (let i = 0; i < attributes.length; i++) {\n                    const attribute = attributes.item(i);\n                    const attributeStrings = attribute.value.split(exprMarker);\n                    if (attributeStrings.length > 1) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute attribute\n                        const attributeString = strings[partIndex];\n                        // Trim the trailing literal value if this is an interpolation\n                        const rawNameString = attributeString.substring(0, attributeString.length - attributeStrings[0].length);\n                        // Find the attribute name\n                        const rawName = rawNameString.match(/((?:\\w|[.\\-_$])+)=[\"']?$/)[1];\n                        this.parts.push(new TemplatePart('attribute', index, attribute.name, rawName, attributeStrings));\n                        node.removeAttribute(attribute.name);\n                        partIndex += attributeStrings.length - 1;\n                        i--;\n                    }\n                }\n            }\n            else if (node.nodeType === 3 /* TEXT_NODE */) {\n                const strings = node.nodeValue.split(exprMarker);\n                if (strings.length > 1) {\n                    const parent = node.parentNode;\n                    const lastIndex = strings.length - 1;\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                    // We keep this current node, but reset its content to the last\n                    // literal part. We insert new literal nodes before this so that the\n                    // tree walker keeps its position correctly.\n                    node.textContent = strings[lastIndex];\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        parent.insertBefore(new Text(strings[i]), node);\n                        this.parts.push(new TemplatePart('node', index++));\n                    }\n                }\n                else if (!node.nodeValue.trim()) {\n                    nodesToRemove.push(node);\n                    index--;\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nexport const getValue = (part, value) => {\n    // `null` as the value of a Text node will render the string 'null'\n    // so we convert it to undefined\n    if (value != null && value.__litDirective === true) {\n        value = value(part);\n    }\n    return value === null ? undefined : value;\n};\nexport const directive = (f) => {\n    f.__litDirective = true;\n    return f;\n};\nexport class AttributePart {\n    constructor(instance, element, name, strings) {\n        this.instance = instance;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.size = strings.length - 1;\n    }\n    setValue(values, startIndex) {\n        const strings = this.strings;\n        let text = '';\n        for (let i = 0; i < strings.length; i++) {\n            text += strings[i];\n            if (i < strings.length - 1) {\n                const v = getValue(this, values[startIndex + i]);\n                if (v &&\n                    (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n                    for (const t of v) {\n                        // TODO: we need to recursively call getValue into iterables...\n                        text += t;\n                    }\n                }\n                else {\n                    text += v;\n                }\n            }\n        }\n        this.element.setAttribute(this.name, text);\n    }\n}\nexport class NodePart {\n    constructor(instance, startNode, endNode) {\n        this.instance = instance;\n        this.startNode = startNode;\n        this.endNode = endNode;\n    }\n    setValue(value) {\n        value = getValue(this, value);\n        if (value === null ||\n            !(typeof value === 'object' || typeof value === 'function')) {\n            // Handle primitive values\n            // If the value didn't change, do nothing\n            if (value === this._previousValue) {\n                return;\n            }\n            this._setText(value);\n        }\n        else if (value instanceof TemplateResult) {\n            this._setTemplateResult(value);\n        }\n        else if (Array.isArray(value) || value[Symbol.iterator]) {\n            this._setIterable(value);\n        }\n        else if (value instanceof Node) {\n            this._setNode(value);\n        }\n        else if (value.then !== undefined) {\n            this._setPromise(value);\n        }\n        else {\n            // Fallback, will render the string representation\n            this._setText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _setNode(value) {\n        this.clear();\n        this._insert(value);\n        this._previousValue = value;\n    }\n    _setText(value) {\n        const node = this.startNode.nextSibling;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === Node.TEXT_NODE) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if _previousValue is\n            // primitive?\n            node.textContent = value;\n        }\n        else {\n            this._setNode(new Text(value));\n        }\n        this._previousValue = value;\n    }\n    _setTemplateResult(value) {\n        let instance;\n        if (this._previousValue &&\n            this._previousValue.template === value.template) {\n            instance = this._previousValue;\n        }\n        else {\n            instance =\n                new TemplateInstance(value.template, this.instance._partCallback);\n            this._setNode(instance._clone());\n            this._previousValue = instance;\n        }\n        instance.update(value.values);\n    }\n    _setIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _previousValue is an array, then the previous render was of an\n        // iterable and _previousValue will contain the NodeParts from the previous\n        // render. If _previousValue is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this._previousValue)) {\n            this.clear();\n            this._previousValue = [];\n        }\n        // Lets of keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this._previousValue;\n        let partIndex = 0;\n        for (const item of value) {\n            // Try to reuse an existing part\n            let itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                // If we're creating the first item part, it's startNode should be the\n                // container's startNode\n                let itemStart = this.startNode;\n                // If we're not creating the first part, create a new separator marker\n                // node, and fix up the previous part's endNode to point to it\n                if (partIndex > 0) {\n                    const previousPart = itemParts[partIndex - 1];\n                    itemStart = previousPart.endNode = new Text();\n                    this._insert(itemStart);\n                }\n                itemPart = new NodePart(this.instance, itemStart, this.endNode);\n                itemParts.push(itemPart);\n            }\n            itemPart.setValue(item);\n            partIndex++;\n        }\n        if (partIndex === 0) {\n            this.clear();\n            this._previousValue = undefined;\n        }\n        else if (partIndex < itemParts.length) {\n            const lastPart = itemParts[partIndex - 1];\n            this.clear(lastPart.endNode.previousSibling);\n            lastPart.endNode = this.endNode;\n        }\n    }\n    _setPromise(value) {\n        value.then((v) => {\n            if (this._previousValue === value) {\n                this.setValue(v);\n            }\n        });\n        this._previousValue = value;\n    }\n    clear(startNode = this.startNode) {\n        let node;\n        while ((node = startNode.nextSibling) !== this.endNode) {\n            node.parentNode.removeChild(node);\n        }\n    }\n}\nexport const defaultPartCallback = (instance, templatePart, node) => {\n    if (templatePart.type === 'attribute') {\n        return new AttributePart(instance, node, templatePart.name, templatePart.strings);\n    }\n    else if (templatePart.type === 'node') {\n        return new NodePart(instance, node, node.nextSibling);\n    }\n    throw new Error(`Unknown part type ${templatePart.type}`);\n};\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, partCallback = defaultPartCallback) {\n        this._parts = [];\n        this.template = template;\n        this._partCallback = partCallback;\n    }\n    update(values) {\n        let valueIndex = 0;\n        for (const part of this._parts) {\n            if (part.size === undefined) {\n                part.setValue(values[valueIndex]);\n                valueIndex++;\n            }\n            else {\n                part.setValue(values, valueIndex);\n                valueIndex += part.size;\n            }\n        }\n    }\n    _clone() {\n        const fragment = document.importNode(this.template.element.content, true);\n        if (this.template.parts.length > 0) {\n            const walker = document.createTreeWalker(fragment, 5 /* elements & text */);\n            const parts = this.template.parts;\n            let index = 0;\n            let partIndex = 0;\n            let templatePart = parts[0];\n            let node = walker.nextNode();\n            while (node != null && partIndex < parts.length) {\n                if (index === templatePart.index) {\n                    this._parts.push(this._partCallback(this, templatePart, node));\n                    templatePart = parts[++partIndex];\n                }\n                else {\n                    index++;\n                    node = walker.nextNode();\n                }\n            }\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=lit-html.js.map\n\n\n// WEBPACK FOOTER //\n// ../node_modules/lit-html/lit-html.js","import './boot.js';\n\n/** @typedef {{run: function(function(), number=):number, cancel: function(number)}} */\nlet AsyncInterface; // eslint-disable-line no-unused-vars\n\n// Microtask implemented using Mutation Observer\nlet microtaskCurrHandle = 0;\nlet microtaskLastHandle = 0;\nlet microtaskCallbacks = [];\nlet microtaskNodeContent = 0;\nlet microtaskNode = document.createTextNode('');\nnew window.MutationObserver(microtaskFlush).observe(microtaskNode, {characterData: true});\n\nfunction microtaskFlush() {\n  const len = microtaskCallbacks.length;\n  for (let i = 0; i < len; i++) {\n    let cb = microtaskCallbacks[i];\n    if (cb) {\n      try {\n        cb();\n      } catch (e) {\n        setTimeout(() => { throw e; });\n      }\n    }\n  }\n  microtaskCallbacks.splice(0, len);\n  microtaskLastHandle += len;\n}\n\nexport const timeOut = {\n  /**\n   * Returns a sub-module with the async interface providing the provided\n   * delay.\n   *\n   * @memberof Polymer.Async.timeOut\n   * @param {number} delay Time to wait before calling callbacks in ms\n   * @return {AsyncInterface} An async timeout interface\n   */\n  after(delay) {\n    return  {\n      run(fn) { return setTimeout(fn, delay); },\n      cancel: window.clearTimeout.bind(window)\n    };\n  },\n  /**\n   * Enqueues a function called in the next task.\n   *\n   * @memberof Polymer.Async.timeOut\n   * @param {Function} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run: window.setTimeout.bind(window),\n  /**\n   * Cancels a previously enqueued `timeOut` callback.\n   *\n   * @memberof Polymer.Async.timeOut\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   */\n  cancel: window.clearTimeout.bind(window)\n};\n\nexport const animationFrame = {\n  /**\n   * Enqueues a function called at `requestAnimationFrame` timing.\n   *\n   * @memberof Polymer.Async.animationFrame\n   * @param {Function} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run: window.requestAnimationFrame.bind(window),\n  /**\n   * Cancels a previously enqueued `animationFrame` callback.\n   *\n   * @memberof Polymer.Async.timeOut\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   */\n  cancel: window.cancelAnimationFrame.bind(window)\n};\n\nexport const idlePeriod = {\n  /**\n   * Enqueues a function called at `requestIdleCallback` timing.\n   *\n   * @memberof Polymer.Async.idlePeriod\n   * @param {function(IdleDeadline)} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(fn) {\n    return window.requestIdleCallback ?\n      window.requestIdleCallback(fn) :\n      window.setTimeout(fn, 16);\n  },\n  /**\n   * Cancels a previously enqueued `idlePeriod` callback.\n   *\n   * @memberof Polymer.Async.idlePeriod\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   */\n  cancel(handle) {\n    window.cancelIdleCallback ?\n      window.cancelIdleCallback(handle) :\n      window.clearTimeout(handle);\n  }\n};\n\nexport const microTask = {\n\n  /**\n   * Enqueues a function called at microtask timing.\n   *\n   * @memberof Polymer.Async.microTask\n   * @param {Function} callback Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(callback) {\n    microtaskNode.textContent = microtaskNodeContent++;\n    microtaskCallbacks.push(callback);\n    return microtaskCurrHandle++;\n  },\n\n  /**\n   * Cancels a previously enqueued `microTask` callback.\n   *\n   * @memberof Polymer.Async.microTask\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   */\n  cancel(handle) {\n    const idx = handle - microtaskLastHandle;\n    if (idx >= 0) {\n      if (!microtaskCallbacks[idx]) {\n        throw new Error('invalid async handle: ' + handle);\n      }\n      microtaskCallbacks[idx] = null;\n    }\n  }\n\n};\n\n\n\n// WEBPACK FOOTER //\n// ../node_modules/@polymer/polymer/lib/utils/async.js","import './boot.js';\n\nexport function isPath(path) {\n  return path.indexOf('.') >= 0;\n}\n\nexport function root(path) {\n  let dotIndex = path.indexOf('.');\n  if (dotIndex === -1) {\n    return path;\n  }\n  return path.slice(0, dotIndex);\n}\n\nexport function isAncestor(base, path) {\n  //     base.startsWith(path + '.');\n  return base.indexOf(path + '.') === 0;\n}\n\nexport function isDescendant(base, path) {\n  //     path.startsWith(base + '.');\n  return path.indexOf(base + '.') === 0;\n}\n\nexport function translate(base, newBase, path) {\n  return newBase + path.slice(base.length);\n}\n\nexport function matches(base, path) {\n  return (base === path) ||\n         isAncestor(base, path) ||\n         isDescendant(base, path);\n}\n\nexport function normalize(path) {\n  if (Array.isArray(path)) {\n    let parts = [];\n    for (let i=0; i<path.length; i++) {\n      let args = path[i].toString().split('.');\n      for (let j=0; j<args.length; j++) {\n        parts.push(args[j]);\n      }\n    }\n    return parts.join('.');\n  } else {\n    return path;\n  }\n}\n\nexport function split(path) {\n  if (Array.isArray(path)) {\n    return normalize(path).split('.');\n  }\n  return path.toString().split('.');\n}\n\nexport function get(root, path, info) {\n  let prop = root;\n  let parts = split(path);\n  // Loop over path parts[0..n-1] and dereference\n  for (let i=0; i<parts.length; i++) {\n    if (!prop) {\n      return;\n    }\n    let part = parts[i];\n    prop = prop[part];\n  }\n  if (info) {\n    info.path = parts.join('.');\n  }\n  return prop;\n}\n\nexport function set(root, path, value) {\n  let prop = root;\n  let parts = split(path);\n  let last = parts[parts.length-1];\n  if (parts.length > 1) {\n    // Loop over path parts[0..n-2] and dereference\n    for (let i=0; i<parts.length-1; i++) {\n      let part = parts[i];\n      prop = prop[part];\n      if (!prop) {\n        return;\n      }\n    }\n    // Set value to object at end of path\n    prop[last] = value;\n  } else {\n    // Simple property set\n    prop[path] = value;\n  }\n  return parts.join('.');\n}\n\nexport const isDeep = isPath;\n\n\n\n// WEBPACK FOOTER //\n// ../node_modules/@polymer/polymer/lib/utils/path.js","/**\n * Property effect types; effects are stored on the prototype using these keys\n * @enum {string}\n */\nconst TYPES = {\n  COMPUTE: '__computeEffects',\n  REFLECT: '__reflectEffects',\n  NOTIFY: '__notifyEffects',\n  PROPAGATE: '__propagateEffects',\n  OBSERVE: '__observeEffects',\n  READ_ONLY: '__readOnly'\n};\n\nexport default TYPES;\n\n\n\n// WEBPACK FOOTER //\n// ../src/core/utils/property-effects-types.js","import './boot.js';\n\nlet CSS_URL_RX = /(url\\()([^)]*)(\\))/g;\nlet ABS_URL = /(^\\/)|(^#)|(^[\\w-\\d]*:)/;\nlet workingURL;\nlet resolveDoc;\n/**\n * Resolves the given URL against the provided `baseUri'.\n *\n * @memberof Polymer.ResolveUrl\n * @param {string} url Input URL to resolve\n * @param {?string=} baseURI Base URI to resolve the URL against\n * @return {string} resolved URL\n */\nfunction resolveUrl(url, baseURI) {\n  if (url && ABS_URL.test(url)) {\n    return url;\n  }\n  // Lazy feature detection.\n  if (workingURL === undefined) {\n    workingURL = false;\n    try {\n      const u = new URL('b', 'http://a');\n      u.pathname = 'c%20d';\n      workingURL = (u.href === 'http://a/c%20d');\n    } catch (e) {\n      // silently fail\n    }\n  }\n  if (!baseURI) {\n    baseURI = document.baseURI || window.location.href;\n  }\n  if (workingURL) {\n    return (new URL(url, baseURI)).href;\n  }\n  // Fallback to creating an anchor into a disconnected document.\n  if (!resolveDoc) {\n    resolveDoc = document.implementation.createHTMLDocument('temp');\n    resolveDoc.base = resolveDoc.createElement('base');\n    resolveDoc.head.appendChild(resolveDoc.base);\n    resolveDoc.anchor = resolveDoc.createElement('a');\n    resolveDoc.body.appendChild(resolveDoc.anchor);\n  }\n  resolveDoc.base.href = baseURI;\n  resolveDoc.anchor.href = url;\n  return resolveDoc.anchor.href || url;\n\n}\n\n/**\n * Resolves any relative URL's in the given CSS text against the provided\n * `ownerDocument`'s `baseURI`.\n *\n * @memberof Polymer.ResolveUrl\n * @param {string} cssText CSS text to process\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Processed CSS text with resolved URL's\n */\nfunction resolveCss(cssText, baseURI) {\n  return cssText.replace(CSS_URL_RX, function(m, pre, url, post) {\n    return pre + '\\'' +\n      resolveUrl(url.replace(/[\"']/g, ''), baseURI) +\n      '\\'' + post;\n  });\n}\n\n/**\n * Returns a path from a given `url`. The path includes the trailing\n * `/` from the url.\n *\n * @memberof Polymer.ResolveUrl\n * @param {string} url Input URL to transform\n * @return {string} resolved path\n */\nfunction pathFromUrl(url) {\n  return url.substring(0, url.lastIndexOf('/') + 1);\n}\n\nexport { resolveCss };\nexport { resolveUrl };\nexport { pathFromUrl };\n\n\n\n// WEBPACK FOOTER //\n// ../node_modules/@polymer/polymer/lib/utils/resolve-url.js","import { dedupingMixin } from '@polymer/polymer/lib/utils/mixin';\nimport * as caseMap$0 from '@polymer/polymer/lib/utils/case-map';\n// import { cssFromModuleImports, cssFromTemplate } from '@polymer/polymer/lib/utils/style-gather';\n// import { resolveUrl as resolveUrl$0 } from '@polymer/polymer/lib/utils/resolve-url';\nimport { render, html } from 'lit-html';\nimport { PropertyEffects } from './property-effects';\nconst { camelToDashCase } = caseMap$0;\n\nconst JSCompiler_renameProperty = (prop, obj) => { // eslint-disable-line camelcase\n  return prop;\n};\n\nexport const ElementMixin = dedupingMixin(base => {\n  /**\n   * @constructor\n   * @extends {base}\n   * @implements {Polymer_PropertyEffects}\n   */\n  const polymerElementBase = PropertyEffects(base);\n\n  let caseMap = caseMap$0;\n\n  /**\n   * Returns the `properties` object specifically on `klass`. Use for:\n   * (1) super chain mixes togther to make `propertiesForClass` which is\n   * then used to make `observedAttributes`.\n   * (2) properties effects and observers are created from it at `finalize` time.\n   *\n   * @param {HTMLElement} klass Element class\n   * @return {Object} Object containing own properties for this class\n   * @private\n   */\n  function ownPropertiesForClass (klass) {\n    if (!klass.hasOwnProperty(\n      JSCompiler_renameProperty('__ownProperties', klass))) {\n      klass.__ownProperties =\n        klass.hasOwnProperty(JSCompiler_renameProperty('properties', klass))\n          ? /** @type PolymerElementConstructor */ (klass).properties : {};\n    }\n    return klass.__ownProperties;\n  }\n\n  /**\n   * Returns the `observers` array specifically on `klass`. Use for\n   * setting up observers.\n   *\n   * @param {HTMLElement} klass Element class\n   * @return {Array} Array containing own observers for this class\n   * @private\n   */\n  function ownObserversForClass (klass) {\n    if (!klass.hasOwnProperty(\n      JSCompiler_renameProperty('__ownObservers', klass))) {\n      klass.__ownObservers =\n        klass.hasOwnProperty(JSCompiler_renameProperty('observers', klass))\n          ? /** @type PolymerElementConstructor */ (klass).observers : [];\n    }\n    return klass.__ownObservers;\n  }\n\n  /**\n   * Mixes `props` into `flattenedProps` but upgrades shorthand type\n   * syntax to { type: Type}.\n   *\n   * @param {Object} flattenedProps Bag to collect flattened properties into\n   * @param {Object} props Bag of properties to add to `flattenedProps`\n   * @return {Object} The input `flattenedProps` bag\n   * @private\n   */\n  function flattenProperties (flattenedProps, props) {\n    for (let p in props) {\n      let o = props[p];\n      if (typeof o === 'function') {\n        o = { type: o };\n      }\n      flattenedProps[p] = o;\n    }\n    return flattenedProps;\n  }\n\n  /**\n   * Returns a flattened list of properties mixed together from the chain of all\n   * constructor's `config.properties`. This list is used to create\n   * (1) observedAttributes,\n   * (2) class property default values\n   *\n   * @param {PolymerElementConstructor} klass Element class\n   * @return {PolymerElementProperties} Flattened properties for this class\n   * @suppress {missingProperties} class.prototype is not a property for some reason?\n   * @private\n   */\n  function propertiesForClass (klass) {\n    if (!klass.hasOwnProperty(\n      JSCompiler_renameProperty('__classProperties', klass))) {\n      klass.__classProperties =\n      flattenProperties({}, ownPropertiesForClass(klass));\n      let superCtor = Object.getPrototypeOf(klass.prototype).constructor;\n      if (superCtor.prototype instanceof PolymerElement) {\n        klass.__classProperties = Object.assign(\n          Object.create(propertiesForClass(/** @type PolymerElementConstructor */(superCtor))),\n          klass.__classProperties);\n      }\n    }\n    return klass.__classProperties;\n  }\n\n  /**\n   * Returns a list of properties with default values.\n   * This list is created as an optimization since it is a subset of\n   * the list returned from `propertiesForClass`.\n   * This list is used in `_initializeProperties` to set property defaults.\n   *\n   * @param {PolymerElementConstructor} klass Element class\n   * @return {PolymerElementProperties} Flattened properties for this class\n   *   that have default values\n   * @private\n   */\n  function propertyDefaultsForClass (klass) {\n    if (!klass.hasOwnProperty(\n      JSCompiler_renameProperty('__classPropertyDefaults', klass))) {\n      klass.__classPropertyDefaults = null;\n      let props = propertiesForClass(klass);\n      for (let p in props) {\n        let info = props[p];\n        if ('value' in info) {\n          klass.__classPropertyDefaults = klass.__classPropertyDefaults || {};\n          klass.__classPropertyDefaults[p] = info;\n        }\n      }\n    }\n    return klass.__classPropertyDefaults;\n  }\n\n  /**\n   * Returns true if a `klass` has finalized. Called in `ElementClass.finalize()`\n   * @param {PolymerElementConstructor} klass Element class\n   * @return {boolean} True if all metaprogramming for this class has been\n   *   completed\n   * @private\n   */\n  function hasClassFinalized (klass) {\n    return klass.hasOwnProperty(JSCompiler_renameProperty('__finalized', klass));\n  }\n\n  /**\n   * Called by `ElementClass.finalize()`. Ensures this `klass` and\n   * *all superclasses* are finalized by traversing the prototype chain\n   * and calling `klass.finalize()`.\n   *\n   * @param {PolymerElementConstructor} klass Element class\n   * @private\n   */\n  function finalizeClassAndSuper (klass) {\n    let proto = /** @type PolymerElementConstructor */ (klass).prototype;\n    let superCtor = Object.getPrototypeOf(proto).constructor;\n    if (superCtor.prototype instanceof PolymerElement) {\n      superCtor.finalize();\n    }\n    finalizeClass(klass);\n  }\n\n  /**\n   * Configures a `klass` based on a staic `klass.config` object and\n   * a `template`. This includes creating accessors and effects\n   * for properties in `config` and the `template` as well as preparing the\n   * `template` for stamping.\n   *\n   * @param {PolymerElementConstructor} klass Element class\n   * @private\n   */\n  function finalizeClass (klass) {\n    klass.__finalized = true;\n    let proto = /** @type PolymerElementConstructor */ (klass).prototype;\n    if (klass.hasOwnProperty(\n      JSCompiler_renameProperty('is', klass)) && klass.is) {\n      register(proto);\n    }\n    let props = ownPropertiesForClass(klass);\n    if (props) {\n      finalizeProperties(proto, props);\n    }\n    let observers = ownObserversForClass(klass);\n    if (observers) {\n      finalizeObservers(proto, observers, props);\n    }\n    // note: create \"working\" template that is finalized at instance time\n    // let template = /** @type PolymerElementConstructor */ (klass).template;\n    // if (template) {\n    //   if (typeof template === 'string') {\n    //     let t = document.createElement('template');\n    //     t.innerHTML = template;\n    //     template = t;\n    //   } else {\n    //     template = template.cloneNode(true);\n    //   }\n    //   proto._template = template;\n    // }\n  }\n\n  /**\n   * Configures a `proto` based on a `properties` object.\n   * Leverages `PropertyEffects` to create property accessors and effects\n   * supporting, observers, reflecting to attributes, change notification,\n   * computed properties, and read only properties.\n   * @param {PolymerElement} proto Element class prototype to add accessors\n   *    and effects to\n   * @param {Object} properties Flattened bag of property descriptors for\n   *    this class\n   * @private\n   */\n  function finalizeProperties (proto, properties) {\n    for (let p in properties) {\n      createPropertyFromConfig(proto, p, properties[p], properties);\n    }\n  }\n\n  /**\n   * Configures a `proto` based on a `observers` array.\n   * Leverages `PropertyEffects` to create observers.\n   * @param {PolymerElement} proto Element class prototype to add accessors\n   *   and effects to\n   * @param {Object} observers Flattened array of observer descriptors for\n   *   this class\n   * @param {Object} dynamicFns Object containing keys for any properties\n   *   that are functions and should trigger the effect when the function\n   *   reference is changed\n   * @private\n   */\n  function finalizeObservers (proto, observers, dynamicFns) {\n    for (let i = 0; i < observers.length; i++) {\n      proto._createMethodObserver(observers[i], dynamicFns);\n    }\n  }\n\n  /**\n   * Creates effects for a property.\n   *\n   * Note, once a property has been set to\n   * `readOnly`, `computed`, `reflectToAttribute`, or `notify`\n   * these values may not be changed. For example, a subclass cannot\n   * alter these settings. However, additional `observers` may be added\n   * by subclasses.\n   *\n   * The info object should may contain property metadata as follows:\n   *\n   * * `type`: {function} type to which an attribute matching the property\n   * is deserialized. Note the property is camel-cased from a dash-cased\n   * attribute. For example, 'foo-bar' attribute is dersialized to a\n   * property named 'fooBar'.\n   *\n   * * `readOnly`: {boolean} creates a readOnly property and\n   * makes a private setter for the private of the form '_setFoo' for a\n   * property 'foo',\n   *\n   * * `computed`: {string} creates a computed property. A computed property\n   * also automatically is set to `readOnly: true`. The value is calculated\n   * by running a method and arguments parsed from the given string. For\n   * example 'compute(foo)' will compute a given property when the\n   * 'foo' property changes by executing the 'compute' method. This method\n   * must return the computed value.\n   *\n   * * `reflectToAttriute`: {boolean} If true, the property value is reflected\n   * to an attribute of the same name. Note, the attribute is dash-cased\n   * so a property named 'fooBar' is reflected as 'foo-bar'.\n   *\n   * * `notify`: {boolean} sends a non-bubbling notification event when\n   * the property changes. For example, a property named 'foo' sends an\n   * event named 'foo-changed' with `event.detail` set to the value of\n   * the property.\n   *\n   * * observer: {string} name of a method that runs when the property\n   * changes. The arguments of the method are (value, previousValue).\n   *\n   * Note: Users may want control over modifying property\n   * effects via subclassing. For example, a user might want to make a\n   * reflectToAttribute property not do so in a subclass. We've chosen to\n   * disable this because it leads to additional complication.\n   * For example, a readOnly effect generates a special setter. If a subclass\n   * disables the effect, the setter would fail unexpectedly.\n   * Based on feedback, we may want to try to make effects more malleable\n   * and/or provide an advanced api for manipulating them.\n   * Also consider adding warnings when an effect cannot be changed.\n   *\n   * @param {PolymerElement} proto Element class prototype to add accessors\n   *   and effects to\n   * @param {string} name Name of the property.\n   * @param {Object} info Info object from which to create property effects.\n   * Supported keys:\n   * @param {Object} allProps Flattened map of all properties defined in this\n   *   element (including inherited properties)\n   * @private\n   */\n  function createPropertyFromConfig (proto, name, info, allProps) {\n    // computed forces readOnly...\n    if (info.computed) {\n      info.readOnly = true;\n    }\n    // Note, since all computed properties are readOnly, this prevents\n    // adding additional computed property effects (which leads to a confusing\n    // setup where multiple triggers for setting a property)\n    // While we do have `hasComputedEffect` this is set on the property's\n    // dependencies rather than itself.\n    if (info.computed && !proto._hasReadOnlyEffect(name)) {\n      proto._createComputedProperty(name, info.computed, allProps);\n    }\n    if (info.readOnly && !proto._hasReadOnlyEffect(name)) {\n      proto._createReadOnlyProperty(name, !info.computed);\n    }\n    if (info.reflectToAttribute && !proto._hasReflectEffect(name)) {\n      proto._createReflectedProperty(name);\n    }\n    if (info.notify && !proto._hasNotifyEffect(name)) {\n      proto._createNotifyingProperty(name);\n    }\n    // always add observer\n    if (info.observer) {\n      proto._createPropertyObserver(name, info.observer, allProps[info.observer]);\n    }\n  }\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @unrestricted\n   * @implements {Polymer_ElementMixin}\n   */\n  class PolymerElement extends polymerElementBase {\n    /**\n     * Standard Custom Elements V1 API.  The default implementation returns\n     * a list of dash-cased attributes based on a flattening of all properties\n     * declared in `static get properties()` for this element and any\n     * superclasses.\n     *\n     * @return {Array} Observed attribute list\n     */\n    static get observedAttributes () {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('__observedAttributes', this))) {\n        let list = [];\n        let properties = propertiesForClass(this);\n        for (let prop in properties) {\n          list.push(camelToDashCase(prop));\n        }\n        this.__observedAttributes = list;\n      }\n      return this.__observedAttributes;\n    }\n\n    /**\n     * Called automatically when the first element instance is created to\n     * ensure that class finalization work has been completed.\n     * May be called by users to eagerly perform class finalization work\n     * prior to the creation of the first element instance.\n     *\n     * Class finalization work generally includes meta-programming such as\n     * creating property accessors and any property effect metadata needed for\n     * the features used.\n     *\n     * @public\n     */\n    static finalize () {\n      if (!hasClassFinalized(this)) {\n        finalizeClassAndSuper(this);\n      }\n    }\n\n    /**\n     * Overrides the default `Polymer.PropertyAccessors` to ensure class\n     * metaprogramming related to property accessors and effects has\n     * completed (calls `finalize`).\n     *\n     * It also initializes any property defaults provided via `value` in\n     * `properties` metadata.\n     *\n     * @override\n     * @suppress {invalidCasts}\n     */\n    _initializeProperties () {\n      instanceCount++;\n      this.constructor.finalize();\n      // // note: finalize template when we have access to `localName` to\n      // // avoid dependence on `is` for polyfilling styling.\n      // if (this._template && !this._template.__polymerFinalized) {\n      //   this._template.__polymerFinalized = true;\n      //   const baseURI =\n      //     importPath ? resolveUrl$0(importPath) : '';\n      //   finalizeTemplate(/** @type {!PolymerElement} */(this.__proto__), this._template, baseURI,\n      //     /** @type {!HTMLElement} */(this).localName);\n      // }\n      super._initializeProperties();\n      // apply property defaults...\n      let p$ = propertyDefaultsForClass(this.constructor);\n      if (!p$) {\n        return;\n      }\n      for (let p in p$) {\n        let info = p$[p];\n        // Don't set default value if there is already an own property, which\n        // happens when a `properties` property with default but no effects had\n        // a property set (e.g. bound) by its host before upgrade\n        if (!this.hasOwnProperty(p)) {\n          let value = typeof info.value === 'function'\n            ? info.value.call(this)\n            : info.value;\n          // Set via `_setProperty` if there is an accessor, to enable\n          // initializing readOnly property defaults\n          if (this._hasAccessor(p)) {\n            this._setPendingProperty(p, value, true);\n          } else {\n            this[p] = value;\n          }\n        }\n      }\n    }\n\n    /**\n     * Provides a default implementation of the standard Custom Elements\n     * `connectedCallback`.\n     *\n     * The default implementation enables the property effects system and\n     * flushes any pending properties, and updates shimmed CSS properties\n     * when using the ShadyCSS scoping/custom properties polyfill.\n     *\n     * @suppress {invalidCasts}\n     */\n    connectedCallback () {\n      if (window.ShadyCSS) {\n        var template = document.createElement('template');\n        render(this.template(), template.content);\n        window.ShadyCSS.prepareTemplate(template, this.constructor.is);\n        window.ShadyCSS.styleElement(/** @type {!HTMLElement} */(this));\n      }\n\n      this._enableProperties();\n    }\n\n    /**\n     * Provides a default implementation of the standard Custom Elements\n     * `disconnectedCallback`.\n     */\n    disconnectedCallback () {}\n\n    ready () {\n      var props = propertiesForClass(this.constructor);\n      for (var i in props) {\n        this._createPropertyAccessor(i, props[i].readOnly);\n      }\n      super.ready();\n    }\n\n    /**\n     * Implements `PropertyEffects`'s `_readyClients` call. Attaches\n     * element dom by calling `_attachDom` with the dom stamped from the\n     * element's template via `_stampTemplate`. Note that this allows\n     * client dom to be attached to the element prior to any observers\n     * running.\n     *\n     * @override\n     */\n    _readyClients () {\n      this._attachDom();\n\n      // The super._readyClients here sets the clients initialized flag.\n      // We must wait to do this until after client dom is created/attached\n      // so that this flag can be checked to prevent notifications fired\n      // during this process from being handled before clients are ready.\n      super._readyClients();\n    }\n\n    /**\n     * Attaches an element's stamped dom to itself. By default,\n     * this method creates a `shadowRoot` and adds the dom to it.\n     * However, this method may be overridden to allow an element\n     * to put its dom in another location.\n     *\n     * @throws {Error}\n     * @suppress {missingReturn}\n     * @param {StampedTemplate} dom to attach to the element.\n     * @return {ShadowRoot} node to which the dom has been attached.\n     */\n    _attachDom () {\n      if (this.attachShadow) {\n        if (!this.shadowRoot) {\n          this.attachShadow({mode: 'open'});\n        }\n        this.render();\n      } else {\n        throw new Error('ShadowDOM not available. ' +\n          // TODO(sorvell): move to compile-time conditional when supported\n        'Polymer.Element can create dom as children instead of in ' +\n        'ShadowDOM by setting `this.root = this;` before `ready`.');\n      }\n    }\n\n    /**\n     * Provides a default implementation of the standard Custom Elements\n     * `attributeChangedCallback`.\n     *\n     * By default, attributes declared in `properties` metadata are\n     * deserialized using their `type` information to properties of the\n     * same name.  \"Dash-cased\" attributes are deserialzed to \"camelCase\"\n     * properties.\n     *\n     * @param {string} name Name of attribute.\n     * @param {?string} old Old value of attribute.\n     * @param {?string} value Current value of attribute.\n     * @override\n     */\n    attributeChangedCallback (name, old, value) {\n      if (old !== value) {\n        let property = caseMap.dashToCamelCase(name);\n        let type = propertiesForClass(this.constructor)[property].type;\n        if (!this._hasReadOnlyEffect(property)) {\n          this._attributeToProperty(name, value, type);\n        }\n      }\n    }\n\n    /**\n     * When using the ShadyCSS scoping and custom property shim, causes all\n     * shimmed styles in this element (and its subtree) to be updated\n     * based on current custom property values.\n     *\n     * The optional parameter overrides inline custom property styles with an\n     * object of properties where the keys are CSS properties, and the values\n     * are strings.\n     *\n     * Example: `this.updateStyles({'--color': 'blue'})`\n     *\n     * These properties are retained unless a value of `null` is set.\n     *\n     * @param {Object=} properties Bag of custom property key/values to\n     *   apply to this element.\n     * @suppress {invalidCasts}\n     */\n    updateStyles (properties) {\n      if (window.ShadyCSS) {\n        window.ShadyCSS.styleSubtree(/** @type {!HTMLElement} */(this), properties);\n      }\n    }\n\n    render () {\n      render(this.template(this), this.shadowRoot);\n    }\n\n    template () {\n      return html``;\n    }\n  }\n\n  return PolymerElement;\n});\n\nexport let instanceCount = 0;\nexport const registrations = [];\n\nexport function _regLog (prototype) {\n  console.log('[' + prototype.is + ']: registered');\n}\n\nexport function register (prototype) {\n  registrations.push(prototype);\n  undefined && _regLog(prototype);\n}\n\nexport function dumpRegistrations () {\n  registrations.forEach(_regLog);\n}\n\nexport const updateStyles = (props) => {\n  if (window.ShadyCSS) {\n    window.ShadyCSS.styleDocument(props);\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ../src/core/mixins/element-mixin.js","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/css-loader/lib/css-base.js","import './src/core/components/main-router';\n\n\n\n// WEBPACK FOOTER //\n// ../index.js","import { ElementMixin } from '../../mixins/element-mixin';\nimport { FlattenedNodesObserver } from '@polymer/polymer/lib/utils/flattened-nodes-observer';\nimport LocationMixin from '../../mixins/location-mixin';\nimport QueryParamsMixin from '../../mixins/query-params-mixin';\nimport pathToRegexp from 'path-to-regexp';\nimport fragments from '../../fragments';\nimport auth from '../../../authentication';\nimport template from './template';\n\nclass MainRouter extends QueryParamsMixin(LocationMixin(ElementMixin(window.HTMLElement))) {\n  static get is () { return 'main-router'; }\n\n  static get properties () {\n    return {\n      params: {\n        type: Object\n      },\n\n      queryParams: {\n        type: Object\n      },\n\n      currentRoute: {\n        type: String\n      },\n\n      // location-mixin\n      path: {\n        type: String\n      },\n\n      query: {\n        type: String,\n        observer: '_queryChanged'\n      },\n\n      urlSpaceRegex: {\n        type: String\n      },\n\n      hash: {\n        type: String\n      },\n\n      dwellTime: {\n        type: Number\n      },\n\n      _urlSpaceRegExp: {\n        type: String,\n        computed: '_makeRegExp(urlSpaceRegex)'\n      },\n\n      _lastChangedAt: {\n        type: String\n      },\n\n      _initialized: {\n        type: Boolean\n      },\n\n      // query params 'paramsString', 'paramsObject', '_dontReact'\n\n      paramsString: {\n        type: String,\n        observer: '_paramsStringChanged'\n      },\n\n      paramsObject: {\n        type: Object\n      },\n\n      _dontReact: {\n        type: Boolean\n      }\n    };\n  }\n\n  static get observers () {\n    return [\n      '_pathChanged(path)',\n      '_updateUrl(path, query, hash)'\n    ];\n  }\n\n  constructor () {\n    super();\n    this._routes = {};\n    this.state = {};\n  }\n\n  connectedCallback () {\n    super.connectedCallback();\n    this._observer = new FlattenedNodesObserver(this, (info) => {\n      this._contentAdded(info.addedNodes.filter((node) => (node.nodeType === window.Node.ELEMENT_NODE)));\n    });\n    // import(/* webpackChunkName: \"app-toast\" */ '../modules/app-toast/components/app-toast.html').then(() => {\n    //   var messageInterval = setInterval(() => {\n    //     if (messages.length > 0) {\n    //       var {message, optTapHandler, optAction, optActionHandler, optDuration} = messages.pop()\n    //       this.showMessage(message, optTapHandler, optAction, optActionHandler, optDuration)\n    //     } else {\n    //       clearInterval(messageInterval)\n    //       messageInterval = null\n    //     }\n    //   }, 5000)\n    // })\n\n    // this._listener = store.subscribe(() => {\n    //   this.state = store.getState();\n    //   this._pathChanged(this.path);\n    // });\n  }\n\n  disconnectedCallback () {\n    if (super.disconnectedCallback) {\n      super.disconnectedCallback();\n    }\n    if (this._observer) this._observer.disconnect();\n    if (this._listener) this._listener();\n  }\n\n  template () {\n    return template(this);\n  }\n\n  showMessage (message, optTapHandler, optAction, optActionHandler, optDuration) {\n    // if (this.shadowRoot.querySelector('app-toast').showMessage) {\n    //   this.shadowRoot.querySelector('app-toast').showMessage(message, optTapHandler, optAction, optActionHandler, optDuration)\n    // } else {\n    //   messages.push({message, optTapHandler, optAction, optActionHandler, optDuration})\n    // }\n  }\n\n  // closeToast () {\n  //   this.shadowRoot.querySelector('app-toast').close();\n  // }\n\n  _contentAdded (pages) {\n    pages.forEach(page => {\n      page.classList.add('page');\n      this._routes[page.getAttribute('route')] = {\n        element: page,\n        auth: page.getAttribute('auth')\n      };\n    });\n    this._pathChanged(this.path);\n  }\n\n  _pathChanged (path) {\n    // load statistics if it went through here\n    if (path === '/_statistic.html' || path === '/_bundle-sizes.html') {\n      window.location.href = path;\n      return;\n    }\n\n    path = path.replace(/index\\.html$/, '');\n\n    var routeName = null;\n    Object.entries(this._routes).forEach(route => {\n      if (routeName) return;\n      var params = {};\n      const keys = [];\n      const re = pathToRegexp(route[0], keys);\n      const exec = re.exec(path);\n\n      if (exec) {\n        params = {};\n        for (var j = 0; j < keys.length; j++) {\n          params[keys[j].name] = exec[j + 1];\n        }\n        routeName = route[0];\n        this.params = params;\n      }\n    });\n\n    this._checkAuth(routeName || 'not-found');\n  }\n\n  _checkAuth (route) {\n    if (this._routes[route] && this._routes[route].auth && auth[this._routes[route].auth]) {\n      if (auth[this._routes[route].auth] instanceof Promise) {\n        auth[this._routes[route].auth]()\n          .then((res) => {\n            if (res) {\n              this._loadPage(route);\n            } else {\n              this._loadPage('not-authorized');\n            }\n          })\n          .catch((e) => {\n            console.log(e);\n            this._loadPage('not-authorized');\n          });\n      } else if (typeof auth[this._routes[route].auth] === 'function' && auth[this._routes[route].auth](this)) {\n        this._loadPage(route);\n      } else {\n        this._loadPage('not-authorized');\n      }\n    } else {\n      this._loadPage(route);\n    }\n  }\n\n  _loadPage (route) {\n    const routes = Object.assign({}, fragments);\n    for (var i in this._routes) {\n      if (this._routes[i] && this._routes[i].element) this._routes[i].element.classList.remove('page--on-view');\n    }\n\n    if (this._routes[route] && this._routes[route].element) {\n      this._routes[route].element.classList.add('page--on-view');\n    }\n    if (this._routes[route]) {\n      // console.log(this._routes[route])\n      var name = this._routes[route].element.nodeName.toLowerCase();\n      routes[name]().then(() => {\n        if (this._routes[route].element._setProperty) {\n          this._routes[route].element._setProperty('params', this.params);\n          this._routes[route].element._setProperty('queryParams', this.paramsObject);\n        }\n        if (this._routes[route].element.reload) {\n          this._routes[route].element.reload();\n        }\n\n        if (document.querySelector('.header') && document.querySelector('.header').reload) {\n          document.querySelector('.header').reload();\n        }\n\n        if (document.querySelector('.drawer') && document.querySelector('.drawer').reload) {\n          document.querySelector('.drawer').reload();\n        }\n\n        window.scrollTo(0, 0);\n        if (window.ga) {\n          window.ga('set', 'page', this.path);\n          window.ga('send', 'pageview');\n        }\n      });\n    }\n  }\n}\n\nwindow.customElements.define(MainRouter.is, MainRouter);\n\n\n\n// WEBPACK FOOTER //\n// ../src/core/components/main-router/index.js","import {PropertyAccessors} from '@polymer/polymer/lib/mixins/property-accessors';\nimport {dedupingMixin} from '@polymer/polymer/lib/utils/mixin';\nimport { root as root$0, get as get$0, isPath as isPath$0, set as set$0, normalize } from '@polymer/polymer/lib/utils/path';\nimport * as caseMap from '@polymer/polymer/lib/utils/case-map';\nimport TemplateStamp from './template-stamp';\nimport TYPES from '../utils/property-effects-types';\nimport hostStack from '../utils/host-stack';\nimport { runComputedEffect, runReflectEffect, ensureOwnEffectMap, computeLinkedPaths, runComputedEffects, runEffects, runNotifyEffects, runObserverEffect, parseMethod, createMethodEffect, runMethodEffect, runNotifyEffect } from '../utils/effects';\nimport { notifySplices, notifySplice, upper } from '../utils/data-api';\n\n/** @const {Object} */\nconst CaseMap = caseMap;\nlet PropertyEffectsType; // eslint-disable-line no-unused-vars\n\nexport const PropertyEffects = dedupingMixin(superClass => {\n  const propertyEffectsBase = TemplateStamp(PropertyAccessors(superClass));\n\n  // /** @class {!HTMLElement} */\n  class PropertyEffects extends propertyEffectsBase {\n    constructor () {\n      super();\n      /** @type {boolean} */\n      this.__dataClientsReady; // eslint-disable-line no-unused-expressions\n      /** @type {Array} */\n      this.__dataPendingClients; // eslint-disable-line no-unused-expressions\n      /** @type {Object} */\n      this.__dataToNotify; // eslint-disable-line no-unused-expressions\n      /** @type {Object} */\n      this.__dataLinkedPaths; // eslint-disable-line no-unused-expressions\n      /** @type {boolean} */\n      this.__dataHasPaths; // eslint-disable-line no-unused-expressions\n      /** @type {Object} */\n      this.__dataCompoundStorage; // eslint-disable-line no-unused-expressions\n      /** @type {Polymer_PropertyEffects} */\n      this.__dataHost; // eslint-disable-line no-unused-expressions\n      /** @type {!Object} */\n      this.__dataTemp; // eslint-disable-line no-unused-expressions\n      /** @type {boolean} */\n      this.__dataClientsInitialized; // eslint-disable-line no-unused-expressions\n      /** @type {!Object} */\n      this.__data; // eslint-disable-line no-unused-expressions\n      /** @type {!Object} */\n      this.__dataPending; // eslint-disable-line no-unused-expressions\n      /** @type {!Object} */\n      this.__dataOld; // eslint-disable-line no-unused-expressions\n      /** @type {Object} */\n      this.__computeEffects; // eslint-disable-line no-unused-expressions\n      /** @type {Object} */\n      this.__reflectEffects; // eslint-disable-line no-unused-expressions\n      /** @type {Object} */\n      this.__notifyEffects; // eslint-disable-line no-unused-expressions\n      /** @type {Object} */\n      this.__propagateEffects; // eslint-disable-line no-unused-expressions\n      /** @type {Object} */\n      this.__observeEffects; // eslint-disable-line no-unused-expressions\n      /** @type {Object} */\n      this.__readOnly; // eslint-disable-line no-unused-expressions\n      /** @type {number} */\n      this.__dataCounter; // eslint-disable-line no-unused-expressions\n    }\n\n    get PROPERTY_EFFECT_TYPES () {\n      return TYPES;\n    }\n\n    _initializeProperties () {\n      super._initializeProperties();\n      hostStack.registerHost(this);\n      this.__dataClientsReady = false;\n      this.__dataPendingClients = null;\n      this.__dataToNotify = null;\n      this.__dataLinkedPaths = null;\n      this.__dataHasPaths = false;\n      // May be set on instance prior to upgrade\n      this.__dataCompoundStorage = this.__dataCompoundStorage || null;\n      this.__dataHost = this.__dataHost || null;\n      this.__dataTemp = {};\n      this.__dataClientsInitialized = false;\n    }\n\n    /**\n     * Overrides `Polymer.PropertyAccessors` implementation to provide a\n     * more efficient implementation of initializing properties from\n     * the prototype on the instance.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the prototype\n     */\n    _initializeProtoProperties (props) {\n      this.__data = Object.create(props);\n      this.__dataPending = Object.create(props);\n      this.__dataOld = {};\n    }\n\n    /**\n     * Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n     * `_setProperty`'s `shouldNotify: true`.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the instance\n     */\n    _initializeInstanceProperties (props) {\n      let readOnly = this[TYPES.READ_ONLY];\n      for (let prop in props) {\n        if (!readOnly || !readOnly[prop]) {\n          this.__dataPending = this.__dataPending || {};\n          this.__dataOld = this.__dataOld || {};\n          this.__data[prop] = this.__dataPending[prop] = props[prop];\n        }\n      }\n    }\n\n    // Prototype setup ----------------------------------------\n\n    /**\n     * Equivalent to static `addPropertyEffect` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @protected\n     */\n    _addPropertyEffect (property, type, effect) {\n      this._createPropertyAccessor(property, type === TYPES.READ_ONLY);\n      // effects are accumulated into arrays per property based on type\n      let effects = ensureOwnEffectMap(this, type)[property];\n      if (!effects) {\n        effects = this[type][property] = [];\n      }\n      effects.push(effect);\n    }\n\n    /**\n     * Removes the given property effect.\n     *\n     * @param {string} property Property the effect was associated with\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object to remove\n     */\n    _removePropertyEffect (property, type, effect) {\n      let effects = ensureOwnEffectMap(this, type)[property];\n      let idx = effects.indexOf(effect);\n      if (idx >= 0) {\n        effects.splice(idx, 1);\n      }\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a property effect\n     * of a certain type.\n     *\n     * @param {string} property Property name\n     * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasPropertyEffect (property, type) {\n      let effects = this[type];\n      return Boolean(effects && effects[property]);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"read only\"\n     * accessor for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasReadOnlyEffect (property) {\n      return this._hasPropertyEffect(property, TYPES.READ_ONLY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"notify\"\n     * property effect for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasNotifyEffect (property) {\n      return this._hasPropertyEffect(property, TYPES.NOTIFY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"reflect to attribute\"\n     * property effect for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasReflectEffect (property) {\n      return this._hasPropertyEffect(property, TYPES.REFLECT);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"computed\"\n     * property effect for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasComputedEffect (property) {\n      return this._hasPropertyEffect(property, TYPES.COMPUTE);\n    }\n\n    // Runtime ----------------------------------------\n\n    /**\n     * Sets a pending property or path.  If the root property of the path in\n     * question had no accessor, the path is set, otherwise it is enqueued\n     * via `_setPendingProperty`.\n     *\n     * This function isolates relatively expensive functionality necessary\n     * for the public API (`set`, `setProperties`, `notifyPath`, and property\n     * change listeners via {{...}} bindings), such that it is only done\n     * when paths enter the system, and not at every propagation step.  It\n     * also sets a `__dataHasPaths` flag on the instance which is used to\n     * fast-path slower path-matching code in the property effects host paths.\n     *\n     * `path` can be a path string or array of path parts as accepted by the\n     * public API.\n     *\n     * @param {string | !Array<number|string>} path Path to set\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify Set to true if this change should\n     *  cause a property notification event dispatch\n     * @param {boolean=} isPathNotification If the path being set is a path\n     *   notification of an already changed value, as opposed to a request\n     *   to set and notify the change.  In the latter `false` case, a dirty\n     *   check is performed and then the value is set to the path before\n     *   enqueuing the pending property change.\n     * @return {boolean} Returns true if the property/path was enqueued in\n     *   the pending changes bag.\n     * @protected\n     */\n    _setPendingPropertyOrPath (path, value, shouldNotify, isPathNotification) {\n      if (isPathNotification ||\n          root$0(Array.isArray(path) ? path[0] : path) !== path) {\n        // Dirty check changes being set to a path against the actual object,\n        // since this is the entry point for paths into the system; from here\n        // the only dirty checks are against the `__dataTemp` cache to prevent\n        // duplicate work in the same turn only. Note, if this was a notification\n        // of a change already set to a path (isPathNotification: true),\n        // we always let the change through and skip the `set` since it was\n        // already dirty checked at the point of entry and the underlying\n        // object has already been updated\n        if (!isPathNotification) {\n          let old = get$0(this, path);\n          path = /** @type {string} */ (set$0(this, path, value));\n          // Use property-accessor's simpler dirty check\n          if (!path || !super._shouldPropertyChange(path, value, old)) {\n            return false;\n          }\n        }\n        this.__dataHasPaths = true;\n        if (this._setPendingProperty(/** @type{string} */(path), value, shouldNotify)) {\n          computeLinkedPaths(this, path, value);\n          return true;\n        }\n      } else {\n        if (this.__dataHasAccessor && this.__dataHasAccessor[path]) {\n          return this._setPendingProperty(/** @type{string} */(path), value, shouldNotify);\n        } else {\n          this[path] = value;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Applies a value to a non-Polymer element/node's property.\n     *\n     * The implementation makes a best-effort at binding interop:\n     * Some native element properties have side-effects when\n     * re-setting the same value (e.g. setting `<input>.value` resets the\n     * cursor position), so we do a dirty-check before setting the value.\n     * However, for better interop with non-Polymer custom elements that\n     * accept objects, we explicitly re-set object changes coming from the\n     * Polymer world (which may include deep object changes without the\n     * top reference changing), erring on the side of providing more\n     * information.\n     *\n     * Users may override this method to provide alternate approaches.\n     *\n     * @param {Node} node The node to set a property on\n     * @param {string} prop The property to set\n     * @param {*} value The value to set\n     * @protected\n     */\n    _setUnmanagedPropertyToNode (node, prop, value) {\n      // It is a judgment call that resetting primitives is\n      // \"bad\" and resettings objects is also \"good\"; alternatively we could\n      // implement a whitelist of tag & property values that should never\n      // be reset (e.g. <input>.value && <select>.value)\n      if (value !== node[prop] || typeof value === 'object') {\n        node[prop] = value;\n      }\n    }\n\n    /**\n     * Overrides the `PropertyAccessors` implementation to introduce special\n     * dirty check logic depending on the property & value being set:\n     *\n     * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n     *    Stored in `__dataTemp`, dirty checked against `__dataTemp`\n     * 2. Object set to simple property (e.g. 'prop': {...})\n     *    Stored in `__dataTemp` and `__data`, dirty checked against\n     *    `__dataTemp` by default implementation of `_shouldPropertyChange`\n     * 3. Primitive value set to simple property (e.g. 'prop': 42)\n     *    Stored in `__data`, dirty checked against `__data`\n     *\n     * The dirty-check is important to prevent cycles due to two-way\n     * notification, but paths and objects are only dirty checked against any\n     * previous value set during this turn via a \"temporary cache\" that is\n     * cleared when the last `_propertiesChaged` exits. This is so:\n     * a. any cached array paths (e.g. 'array.3.prop') may be invalidated\n     *    due to array mutations like shift/unshift/splice; this is fine\n     *    since path changes are dirty-checked at user entry points like `set`\n     * b. dirty-checking for objects only lasts one turn to allow the user\n     *    to mutate the object in-place and re-set it with the same identity\n     *    and have all sub-properties re-propagated in a subsequent turn.\n     *\n     * The temp cache is not necessarily sufficient to prevent invalid array\n     * paths, since a splice can happen during the same turn (with pathological\n     * user code); we could introduce a \"fixup\" for temporarily cached array\n     * paths if needed: https://github.com/Polymer/polymer/issues/4227\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify True if property should fire notification\n     *   event (applies only for `notify: true` properties)\n     * @return {boolean} Returns true if the property changed\n     * @override\n     */\n    _setPendingProperty (property, value, shouldNotify) {\n      let isPath = this.__dataHasPaths && isPath$0(property);\n      let prevProps = isPath ? this.__dataTemp : this.__data;\n      if (this._shouldPropertyChange(property, value, prevProps[property])) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (!(property in this.__dataOld)) {\n          this.__dataOld[property] = this.__data[property];\n        }\n        // Paths are stored in temporary cache (cleared at end of turn),\n        // which is used for dirty-checking, all others stored in __data\n        if (isPath) {\n          this.__dataTemp[property] = value;\n        } else {\n          this.__data[property] = value;\n        }\n        // All changes go into pending property bag, passed to _propertiesChanged\n        this.__dataPending[property] = value;\n        // Track properties that should notify separately\n        if (isPath || (this[TYPES.NOTIFY] && this[TYPES.NOTIFY][property])) {\n          this.__dataToNotify = this.__dataToNotify || {};\n          this.__dataToNotify[property] = shouldNotify;\n        }\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Overrides base implementation to ensure all accessors set `shouldNotify`\n     * to true, for per-property notification tracking.\n     *\n     * @override\n     */\n    _setProperty (property, value) {\n      if (this._setPendingProperty(property, value, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Overrides `PropertyAccessor`'s default async queuing of\n     * `_propertiesChanged`: if `__dataReady` is false (has not yet been\n     * manually flushed), the function no-ops; otherwise flushes\n     * `_propertiesChanged` synchronously.\n     *\n     * @override\n     */\n    _invalidateProperties () {\n      if (this.__dataReady) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Enqueues the given client on a list of pending clients, whose\n     * pending property changes can later be flushed via a call to\n     * `_flushClients`.\n     *\n     * @param {Object} client PropertyEffects client to enqueue\n     * @protected\n     */\n    _enqueueClient (client) {\n      this.__dataPendingClients = this.__dataPendingClients || [];\n      if (client !== this) {\n        this.__dataPendingClients.push(client);\n      }\n    }\n\n    /**\n     * Flushes any clients previously enqueued via `_enqueueClient`, causing\n     * their `_flushProperties` method to run.\n     *\n     * @protected\n     */\n    _flushClients () {\n      if (!this.__dataClientsReady) {\n        this.__dataClientsReady = true;\n        this._readyClients();\n        // Override point where accessors are turned on; importantly,\n        // this is after clients have fully readied, providing a guarantee\n        // that any property effects occur only after all clients are ready.\n        this.__dataReady = true;\n      } else {\n        this.__enableOrFlushClients();\n      }\n    }\n\n    // NOTE: We ensure clients either enable or flush as appropriate. This\n    // handles two corner cases:\n    // (1) clients flush properly when connected/enabled before the host\n    // enables; e.g.\n    //   (a) Templatize stamps with no properties and does not flush and\n    //   (b) the instance is inserted into dom and\n    //   (c) then the instance flushes.\n    // (2) clients enable properly when not connected/enabled when the host\n    // flushes; e.g.\n    //   (a) a template is runtime stamped and not yet connected/enabled\n    //   (b) a host sets a property, causing stamped dom to flush\n    //   (c) the stamped dom enables.\n    __enableOrFlushClients () {\n      let clients = this.__dataPendingClients;\n      if (clients) {\n        this.__dataPendingClients = null;\n        for (let i = 0; i < clients.length; i++) {\n          let client = clients[i];\n          if (!client.__dataEnabled) {\n            client._enableProperties();\n          } else if (client.__dataPending) {\n            client._flushProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Perform any initial setup on client dom. Called before the first\n     * `_flushProperties` call on client dom and before any element\n     * observers are called.\n     *\n     * @protected\n     */\n    _readyClients () {\n      this.__enableOrFlushClients();\n    }\n\n    /**\n     * Sets a bag of property changes to this instance, and\n     * synchronously processes all effects of the properties as a batch.\n     *\n     * Property names must be simple properties, not paths.  Batched\n     * path propagation is not supported.\n     *\n     * @param {Object} props Bag of one or more key-value pairs whose key is\n     *   a property and value is the new value to set for that property.\n     * @param {boolean=} setReadOnly When true, any private values set in\n     *   `props` will be set. By default, `setProperties` will not set\n     *   `readOnly: true` root properties.\n     * @public\n     */\n    setProperties (props, setReadOnly) {\n      for (let path in props) {\n        if (setReadOnly || !this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][path]) {\n          // TODO(kschaaf): explicitly disallow paths in setProperty?\n          // wildcard observers currently only pass the first changed path\n          // in the `info` object, and you could do some odd things batching\n          // paths, e.g. {'foo.bar': {...}, 'foo': null}\n          this._setPendingPropertyOrPath(path, props[path], true);\n        }\n      }\n      this._invalidateProperties();\n    }\n\n    /**\n     * Overrides `PropertyAccessors` so that property accessor\n     * side effects are not enabled until after client dom is fully ready.\n     * Also calls `_flushClients` callback to ensure client dom is enabled\n     * that was not enabled as a result of flushing properties.\n     *\n     * @override\n     */\n    ready () {\n      // It is important that `super.ready()` is not called here as it\n      // immediately turns on accessors. Instead, we wait until `readyClients`\n      // to enable accessors to provide a guarantee that clients are ready\n      // before processing any accessors side effects.\n      this._flushProperties();\n      // If no data was pending, `_flushProperties` will not `flushClients`\n      // so ensure this is done.\n      if (!this.__dataClientsReady) {\n        this._flushClients();\n      }\n      // Before ready, client notifications do not trigger _flushProperties.\n      // Therefore a flush is necessary here if data has been set.\n      if (this.__dataPending) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Implements `PropertyAccessors`'s properties changed callback.\n     *\n     * Runs each class of effects for the batch of changed properties in\n     * a specific order (compute, propagate, reflect, observe, notify).\n     *\n     * @override\n     */\n    _propertiesChanged (currentProps, changedProps, oldProps) {\n      // ----------------------------\n      // let c = Object.getOwnPropertyNames(changedProps || {});\n      // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);\n      // if (window.debug) { debugger; }\n      // ----------------------------\n      let hasPaths = this.__dataHasPaths;\n      this.__dataHasPaths = false;\n      // Compute properties\n      runComputedEffects(this, changedProps, oldProps, hasPaths);\n      // Clear notify properties prior to possible reentry (propagate, observe),\n      // but after computing effects have a chance to add to them\n      let notifyProps = this.__dataToNotify;\n      this.__dataToNotify = null;\n      // Propagate properties to clients\n      this._propagatePropertyChanges(changedProps, oldProps, hasPaths);\n      // Flush clients\n      this._flushClients();\n      // Reflect properties\n      runEffects(this, this[TYPES.REFLECT], changedProps, oldProps, hasPaths);\n      // Observe properties\n      runEffects(this, this[TYPES.OBSERVE], changedProps, oldProps, hasPaths);\n      // Notify properties to host\n      if (notifyProps) {\n        runNotifyEffects(this, notifyProps, changedProps, oldProps, hasPaths);\n      }\n      // Clear temporary cache at end of turn\n      if (this.__dataCounter === 1) {\n        this.__dataTemp = {};\n      }\n\n      if (this.render) {\n        this.render();\n      }\n      // ----------------------------\n      // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);\n      // ----------------------------\n    }\n\n    /**\n     * Called to propagate any property changes to stamped template nodes\n     * managed by this element.\n     *\n     * @param {Object} changedProps Bag of changed properties\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @protected\n     */\n    _propagatePropertyChanges (changedProps, oldProps, hasPaths) {\n      if (this[TYPES.PROPAGATE]) {\n        runEffects(this, this[TYPES.PROPAGATE], changedProps, oldProps, hasPaths);\n      }\n    }\n\n    /**\n     * Aliases one data path as another, such that path notifications from one\n     * are routed to the other.\n     *\n     * @param {string | !Array<string|number>} to Target path to link.\n     * @param {string | !Array<string|number>} from Source path to link.\n     * @public\n     */\n    linkPaths (to, from) {\n      to = normalize(to);\n      from = normalize(from);\n      this.__dataLinkedPaths = this.__dataLinkedPaths || {};\n      this.__dataLinkedPaths[to] = from;\n    }\n\n    /**\n     * Removes a data path alias previously established with `_linkPaths`.\n     *\n     * Note, the path to unlink should be the target (`to`) used when\n     * linking the paths.\n     *\n     * @param {string | !Array<string|number>} path Target path to unlink.\n     * @public\n     */\n    unlinkPaths (path) {\n      path = normalize(path);\n      if (this.__dataLinkedPaths) {\n        delete this.__dataLinkedPaths[path];\n      }\n    }\n\n    /**\n      * Notify that an array has changed.\n      *\n      * Example:\n      *\n      *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n      *     ...\n      *     this.items.splice(1, 1, {name: 'Sam'});\n      *     this.items.push({name: 'Bob'});\n      *     this.notifySplices('items', [\n      *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1, obect: this.items, type: 'splice' },\n      *       { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n      *     ]);\n      *\n      * @param {string} path Path that should be notified.\n      * @param {Array} splices Array of splice records indicating ordered\n      *   changes that occurred to the array. Each record should have the\n      *   following fields:\n      *    * index: index at which the change occurred\n      *    * removed: array of items that were removed from this index\n      *    * addedCount: number of new items added at this index\n      *    * object: a reference to the array in question\n      *    * type: the string literal 'splice'\n      *\n      *   Note that splice records _must_ be normalized such that they are\n      *   reported in index order (raw results from `Object.observe` are not\n      *   ordered and must be normalized/merged before notifying).\n      * @public\n    */\n    notifySplices (path, splices) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      notifySplices(this, array, info.path, splices);\n    }\n\n    /**\n     * Convenience method for reading a value from a path.\n     *\n     * Note, if any part in the path is undefined, this method returns\n     * `undefined` (this method does not throw when dereferencing undefined\n     * paths).\n     *\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `users.12.name` or `['users', 12, 'name']`).\n     * @param {Object=} root Root object from which the path is evaluated.\n     * @return {*} Value at the path, or `undefined` if any part of the path\n     *   is undefined.\n     * @public\n     */\n    get (path, root) {\n      return get$0(root || this, path);\n    }\n\n    /**\n     * Convenience method for setting a value to a path and notifying any\n     * elements bound to the same path.\n     *\n     * Note, if any part in the path except for the last is undefined,\n     * this method does nothing (this method does not throw when\n     * dereferencing undefined paths).\n     *\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).\n     * @param {*} value Value to set at the specified path.\n     * @param {Object=} root Root object from which the path is evaluated.\n     *   When specified, no notification will occur.\n     * @public\n    */\n    set (path, value, root) {\n      if (root) {\n        set$0(root, path, value);\n      } else {\n        if (!this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][/** @type {string} */(path)]) {\n          if (this._setPendingPropertyOrPath(path, value, true)) {\n            this._invalidateProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Adds items onto the end of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to push onto array\n     * @return {number} New length of the array.\n     * @public\n     */\n    push (path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      let len = array.length;\n      let ret = array.push(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, len, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the end of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    pop (path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.pop();\n      if (hadLength) {\n        notifySplice(this, array, info.path, array.length, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Starting from the start index specified, removes 0 or more items\n     * from the array and inserts 0 or more new items in their place.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.splice`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {number} start Index from which to start removing/inserting.\n     * @param {number} deleteCount Number of items to remove.\n     * @param {...*} items Items to insert into array.\n     * @return {Array} Array of removed items.\n     * @public\n     */\n    splice (path, start, deleteCount, ...items) {\n      let info = { path: '' };\n      let array = /** @type {Array} */(get$0(this, path, info));\n      // Normalize fancy native splice handling of crazy start values\n      if (start < 0) {\n        start = array.length - Math.floor(-start);\n      } else {\n        start = Math.floor(start);\n      }\n      if (!start) {\n        start = 0;\n      }\n      let ret = array.splice(start, deleteCount, ...items);\n      if (items.length || ret.length) {\n        notifySplice(this, array, info.path, start, items.length, ret);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the beginning of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    shift (path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.shift();\n      if (hadLength) {\n        notifySplice(this, array, info.path, 0, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Adds items onto the beginning of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to insert info array\n     * @return {number} New length of the array.\n     * @public\n     */\n    unshift (path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      let ret = array.unshift(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, 0, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Notify that a path has changed.\n     *\n     * Example:\n     *\n     *     this.item.user.name = 'Bob';\n     *     this.notifyPath('item.user.name');\n     *\n     * @param {string} path Path that should be notified.\n     * @param {*=} value Value at the path (optional).\n     * @public\n    */\n    notifyPath (path, value) {\n      /** @type {string} */\n      let propPath;\n      if (arguments.length === 1) {\n        // Get value if not supplied\n        let info = {path: ''};\n        value = get$0(this, path, info);\n        propPath = info.path;\n      } else if (Array.isArray(path)) {\n        // Normalize path if needed\n        propPath = normalize(path);\n      } else {\n        propPath = /** @type{string} */(path);\n      }\n      if (this._setPendingPropertyOrPath(propPath, value, true, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Equivalent to static `createReadOnlyProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @protected\n     */\n    _createReadOnlyProperty (property, protectedSetter) {\n      this._addPropertyEffect(property, TYPES.READ_ONLY);\n      if (protectedSetter) {\n        this['_set' + upper(property)] = /** @this {PropertyEffects} */function (value) {\n          this._setProperty(property, value);\n        };\n      }\n    }\n\n    /**\n     * Equivalent to static `createPropertyObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @param {string} methodName Name of observer method to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @protected\n     */\n    _createPropertyObserver (property, methodName, dynamicFn) {\n      let info = { property, methodName, dynamicFn: Boolean(dynamicFn) };\n      this._addPropertyEffect(property, TYPES.OBSERVE, {\n        fn: runObserverEffect, info, trigger: {name: property}\n      });\n      if (dynamicFn) {\n        this._addPropertyEffect(methodName, TYPES.OBSERVE, {\n          fn: runObserverEffect, info, trigger: {name: methodName}\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createMethodObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @protected\n     */\n    _createMethodObserver (expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed observer expression '\" + expression + \"'\");\n      }\n      createMethodEffect(this, sig, TYPES.OBSERVE, runMethodEffect, null, dynamicFn);\n    }\n\n    /**\n     * Equivalent to static `createNotifyingProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @protected\n     */\n    _createNotifyingProperty (property) {\n      this._addPropertyEffect(property, TYPES.NOTIFY, {\n        fn: runNotifyEffect,\n        info: {\n          eventName: CaseMap.camelToDashCase(property) + '-changed',\n          property: property\n        }\n      });\n    }\n\n    /**\n     * Equivalent to static `createReflectedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @protected\n     */\n    _createReflectedProperty (property) {\n      let attr = CaseMap.camelToDashCase(property);\n      if (attr[0] === '-') {\n        console.warn('Property ' + property + ' cannot be reflected to attribute ' +\n          attr + ' because \"-\" is not a valid starting attribute name. Use a lowercase first letter for the property thisead.');\n      } else {\n        this._addPropertyEffect(property, TYPES.REFLECT, {\n          fn: runReflectEffect,\n          info: {\n            attrName: attr\n          }\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createComputedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @protected\n     */\n    _createComputedProperty (property, expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed computed expression '\" + expression + \"'\");\n      }\n      createMethodEffect(this, sig, TYPES.COMPUTE, runComputedEffect, property, dynamicFn);\n    }\n\n    // -- static class methods ------------\n\n    /**\n     * Ensures an accessor exists for the specified property, and adds\n     * to a list of \"property effects\" that will run when the accessor for\n     * the specified property is set.  Effects are grouped by \"type\", which\n     * roughly corresponds to a phase in effect processing.  The effect\n     * metadata should be in the following form:\n     *\n     *     {\n     *       fn: effectFunction, // Reference to function to call to perform effect\n     *       info: { ... }       // Effect metadata passed to function\n     *       trigger: {          // Optional triggering metadata; if not provided\n     *         name: string      // the property is treated as a wildcard\n     *         structured: boolean\n     *         wildcard: boolean\n     *       }\n     *     }\n     *\n     * Effects are called from `_propertiesChanged` in the following order by\n     * type:\n     *\n     * 1. COMPUTE\n     * 2. PROPAGATE\n     * 3. REFLECT\n     * 4. OBSERVE\n     * 5. NOTIFY\n     *\n     * Effect functions are called with the following signature:\n     *\n     *     effectFunction(inst, path, props, oldProps, info, hasPaths)\n     *\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @protected\n     */\n    static addPropertyEffect (property, type, effect) {\n      this.prototype._addPropertyEffect(property, type, effect);\n    }\n\n    /**\n     * Creates a single-property observer for the given property.\n     *\n     * @param {string} property Property name\n     * @param {string} methodName Name of observer method to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @protected\n     */\n    static createPropertyObserver (property, methodName, dynamicFn) {\n      this.prototype._createPropertyObserver(property, methodName, dynamicFn);\n    }\n\n    /**\n     * Creates a multi-property \"method observer\" based on the provided\n     * expression, which should be a string in the form of a normal Javascript\n     * function signature: `'methodName(arg1, [..., argn])'`.  Each argument\n     * should correspond to a property or path in the context of this\n     * prototype (or instance), or may be a literal string or number.\n     *\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @protected\n     */\n    static createMethodObserver (expression, dynamicFn) {\n      this.prototype._createMethodObserver(expression, dynamicFn);\n    }\n\n    /**\n     * Causes the setter for the given property to dispatch `<property>-changed`\n     * events to notify of changes to the property.\n     *\n     * @param {string} property Property name\n     * @protected\n     */\n    static createNotifyingProperty (property) {\n      this.prototype._createNotifyingProperty(property);\n    }\n\n    /**\n     * Creates a read-only accessor for the given property.\n     *\n     * To set the property, use the protected `_setProperty` API.\n     * To create a custom protected setter (e.g. `_setMyProp()` for\n     * property `myProp`), pass `true` for `protectedSetter`.\n     *\n     * Note, if the property will have other property effects, this method\n     * should be called first, before adding other effects.\n     *\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @protected\n     */\n    static createReadOnlyProperty (property, protectedSetter) {\n      this.prototype._createReadOnlyProperty(property, protectedSetter);\n    }\n\n    /**\n     * Causes the setter for the given property to reflect the property value\n     * to a (dash-cased) attribute of the same name.\n     *\n     * @param {string} property Property name\n     * @protected\n     */\n    static createReflectedProperty (property) {\n      this.prototype._createReflectedProperty(property);\n    }\n\n    /**\n     * Creates a computed property whose value is set to the result of the\n     * method described by the given `expression` each time one or more\n     * arguments to the method changes.  The expression should be a string\n     * in the form of a normal Javascript function signature:\n     * `'methodName(arg1, [..., argn])'`\n     *\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n     *   method names should be included as a dependency to the effect.\n     * @protected\n     */\n    static createComputedProperty (property, expression, dynamicFn) {\n      this.prototype._createComputedProperty(property, expression, dynamicFn);\n    }\n  }\n\n  // make a typing for closure :P\n  PropertyEffectsType = PropertyEffects;\n\n  return PropertyEffects;\n});\n\n\n\n// WEBPACK FOOTER //\n// ../src/core/mixins/property-effects.js","import '../utils/boot.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport * as caseMap$0 from '../utils/case-map.js';\nimport { microTask } from '../utils/async.js';\n\nlet caseMap = caseMap$0;\n\nlet microtask = microTask;\n\n// Save map of native properties; this forms a blacklist or properties\n// that won't have their values \"saved\" by `saveAccessorValue`, since\n// reading from an HTMLElement accessor from the context of a prototype throws\nconst nativeProperties = {};\nlet proto = HTMLElement.prototype;\nwhile (proto) {\n  let props = Object.getOwnPropertyNames(proto);\n  for (let i=0; i<props.length; i++) {\n    nativeProperties[props[i]] = true;\n  }\n  proto = Object.getPrototypeOf(proto);\n}\n\n/**\n * Used to save the value of a property that will be overridden with\n * an accessor. If the `model` is a prototype, the values will be saved\n * in `__dataProto`, and it's up to the user (or downstream mixin) to\n * decide how/when to set these values back into the accessors.\n * If `model` is already an instance (it has a `__data` property), then\n * the value will be set as a pending property, meaning the user should\n * call `_invalidateProperties` or `_flushProperties` to take effect\n *\n * @param {Object} model Prototype or instance\n * @param {string} property Name of property\n * @private\n */\nfunction saveAccessorValue(model, property) {\n  // Don't read/store value for any native properties since they could throw\n  if (!nativeProperties[property]) {\n    let value = model[property];\n    if (value !== undefined) {\n      if (model.__data) {\n        // Adding accessor to instance; update the property\n        // It is the user's responsibility to call _flushProperties\n        model._setPendingProperty(property, value);\n      } else {\n        // Adding accessor to proto; save proto's value for instance-time use\n        if (!model.__dataProto) {\n          model.__dataProto = {};\n        } else if (!model.hasOwnProperty(JSCompiler_renameProperty('__dataProto', model))) {\n          model.__dataProto = Object.create(model.__dataProto);\n        }\n        model.__dataProto[property] = value;\n      }\n    }\n  }\n}\n\nexport const PropertyAccessors = dedupingMixin(superClass => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyAccessors}\n   * @extends HTMLElement\n   * @unrestricted\n   */\n  class PropertyAccessors extends superClass {\n\n    /**\n     * Generates property accessors for all attributes in the standard\n     * static `observedAttributes` array.\n     *\n     * Attribute names are mapped to property names using the `dash-case` to\n     * `camelCase` convention\n     *\n     */\n    static createPropertiesForAttributes() {\n      let a$ = this.observedAttributes;\n      for (let i=0; i < a$.length; i++) {\n        this.prototype._createPropertyAccessor(caseMap.dashToCamelCase(a$[i]));\n      }\n    }\n\n    constructor() {\n      super();\n      /** @type {boolean} */\n      this.__serializing;\n      /** @type {number} */\n      this.__dataCounter;\n      /** @type {boolean} */\n      this.__dataEnabled;\n      /** @type {boolean} */\n      this.__dataReady;\n      /** @type {boolean} */\n      this.__dataInvalid;\n      /** @type {!Object} */\n      this.__data;\n      /** @type {Object} */\n      this.__dataPending;\n      /** @type {Object} */\n      this.__dataOld;\n      /** @type {Object} */\n      this.__dataProto;\n      /** @type {Object} */\n      this.__dataHasAccessor;\n      /** @type {Object} */\n      this.__dataInstanceProps;\n      this._initializeProperties();\n    }\n\n    /**\n     * Implements native Custom Elements `attributeChangedCallback` to\n     * set an attribute value to a property via `_attributeToProperty`.\n     *\n     * @param {string} name Name of attribute that changed\n     * @param {?string} old Old attribute value\n     * @param {?string} value New attribute value\n     */\n    attributeChangedCallback(name, old, value) {\n      if (old !== value) {\n        this._attributeToProperty(name, value);\n      }\n    }\n\n    /**\n     * Initializes the local storage for property accessors.\n     *\n     * Provided as an override point for performing any setup work prior\n     * to initializing the property accessor system.\n     *\n     * @protected\n     */\n    _initializeProperties() {\n      this.__serializing = false;\n      this.__dataCounter = 0;\n      this.__dataEnabled = false;\n      this.__dataReady = false;\n      this.__dataInvalid = false;\n      this.__data = {};\n      this.__dataPending = null;\n      this.__dataOld = null;\n      if (this.__dataProto) {\n        this._initializeProtoProperties(this.__dataProto);\n        this.__dataProto = null;\n      }\n      // Capture instance properties; these will be set into accessors\n      // during first flush. Don't set them here, since we want\n      // these to overwrite defaults/constructor assignments\n      for (let p in this.__dataHasAccessor) {\n        if (this.hasOwnProperty(p)) {\n          this.__dataInstanceProps = this.__dataInstanceProps || {};\n          this.__dataInstanceProps[p] = this[p];\n          delete this[p];\n        }\n      }\n    }\n\n    /**\n     * Called at instance time with bag of properties that were overwritten\n     * by accessors on the prototype when accessors were created.\n     *\n     * The default implementation sets these properties back into the\n     * setter at instance time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @protected\n     */\n    _initializeProtoProperties(props) {\n      for (let p in props) {\n        this._setProperty(p, props[p]);\n      }\n    }\n\n    /**\n     * Called at ready time with bag of instance properties that overwrote\n     * accessors when the element upgraded.\n     *\n     * The default implementation sets these properties back into the\n     * setter at ready time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @protected\n     */\n    _initializeInstanceProperties(props) {\n      Object.assign(this, props);\n    }\n\n    /**\n     * Ensures the element has the given attribute. If it does not,\n     * assigns the given value to the attribute.\n     *\n     *\n     * @param {string} attribute Name of attribute to ensure is set.\n     * @param {string} value of the attribute.\n     */\n    _ensureAttribute(attribute, value) {\n      if (!this.hasAttribute(attribute)) {\n        this._valueToNodeAttribute(this, value, attribute);\n      }\n    }\n\n    /**\n     * Deserializes an attribute to its associated property.\n     *\n     * This method calls the `_deserializeValue` method to convert the string to\n     * a typed value.\n     *\n     * @param {string} attribute Name of attribute to deserialize.\n     * @param {?string} value of the attribute.\n     * @param {*=} type type to deserialize to.\n     */\n    _attributeToProperty(attribute, value, type) {\n      // Don't deserialize back to property if currently reflecting\n      if (!this.__serializing) {\n        let property = caseMap.dashToCamelCase(attribute);\n        this[property] = this._deserializeValue(value, type);\n      }\n    }\n\n    /**\n     * Serializes a property to its associated attribute.\n     *\n     * @param {string} property Property name to reflect.\n     * @param {string=} attribute Attribute name to reflect.\n     * @param {*=} value Property value to refect.\n     */\n    _propertyToAttribute(property, attribute, value) {\n      this.__serializing = true;\n      value = (arguments.length < 3) ? this[property] : value;\n      this._valueToNodeAttribute(this, value,\n        attribute || caseMap.camelToDashCase(property));\n      this.__serializing = false;\n    }\n\n    /**\n     * Sets a typed value to an HTML attribute on a node.\n     *\n     * This method calls the `_serializeValue` method to convert the typed\n     * value to a string.  If the `_serializeValue` method returns `undefined`,\n     * the attribute will be removed (this is the default for boolean\n     * type `false`).\n     *\n     * @param {Element} node Element to set attribute to.\n     * @param {*} value Value to serialize.\n     * @param {string} attribute Attribute name to serialize to.\n     */\n    _valueToNodeAttribute(node, value, attribute) {\n      let str = this._serializeValue(value);\n      if (str === undefined) {\n        node.removeAttribute(attribute);\n      } else {\n        node.setAttribute(attribute, str);\n      }\n    }\n\n    /**\n     * Converts a typed JavaScript value to a string.\n     *\n     * This method is called by Polymer when setting JS property values to\n     * HTML attributes.  Users may override this method on Polymer element\n     * prototypes to provide serialization for custom types.\n     *\n     * @param {*} value Property value to serialize.\n     * @return {string | undefined} String serialized from the provided property value.\n     */\n    _serializeValue(value) {\n      /* eslint-disable no-fallthrough */\n      switch (typeof value) {\n        case 'boolean':\n          return value ? '' : undefined;\n\n        case 'object':\n          if (value instanceof Date) {\n            return value.toString();\n          } else if (value) {\n            try {\n              return JSON.stringify(value);\n            } catch(x) {\n              return '';\n            }\n          }\n\n        default:\n          return value != null ? value.toString() : undefined;\n      }\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * This method is called by Polymer when reading HTML attribute values to\n     * JS properties.  Users may override this method on Polymer element\n     * prototypes to provide deserialization for custom `type`s.  Note,\n     * the `type` argument is the value of the `type` field provided in the\n     * `properties` configuration object for a given property, and is\n     * by convention the constructor for the type to deserialize.\n     *\n     * Note: The return value of `undefined` is used as a sentinel value to\n     * indicate the attribute should be removed.\n     *\n     * @param {?string} value Attribute value to deserialize.\n     * @param {*=} type Type to deserialize the string to.\n     * @return {*} Typed value deserialized from the provided string.\n     */\n    _deserializeValue(value, type) {\n      /**\n       * @type {*}\n       */\n      let outValue;\n      switch (type) {\n        case Number:\n          outValue = Number(value);\n          break;\n\n        case Boolean:\n          outValue = (value !== null);\n          break;\n\n        case Object:\n          try {\n            outValue = JSON.parse(/** @type string */(value));\n          } catch(x) {\n            // allow non-JSON literals like Strings and Numbers\n          }\n          break;\n\n        case Array:\n          try {\n            outValue = JSON.parse(/** @type string */(value));\n          } catch(x) {\n            outValue = null;\n            console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${value}`);\n          }\n          break;\n\n        case Date:\n          outValue = new Date(value);\n          break;\n\n        case String:\n        default:\n          outValue = value;\n          break;\n      }\n\n      return outValue;\n    }\n    /* eslint-enable no-fallthrough */\n\n    /**\n     * Creates a setter/getter pair for the named property with its own\n     * local storage.  The getter returns the value in the local storage,\n     * and the setter calls `_setProperty`, which updates the local storage\n     * for the property and enqueues a `_propertiesChanged` callback.\n     *\n     * This method may be called on a prototype or an instance.  Calling\n     * this method may overwrite a property value that already exists on\n     * the prototype/instance by creating the accessor.  When calling on\n     * a prototype, any overwritten values are saved in `__dataProto`,\n     * and it is up to the subclasser to decide how/when to set those\n     * properties back into the accessor.  When calling on an instance,\n     * the overwritten value is set via `_setPendingProperty`, and the\n     * user should call `_invalidateProperties` or `_flushProperties`\n     * for the values to take effect.\n     *\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created; the\n     *   protected `_setProperty` function must be used to set the property\n     * @protected\n     */\n    _createPropertyAccessor(property, readOnly) {\n      if (!this.hasOwnProperty('__dataHasAccessor')) {\n        this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor);\n      }\n      if (!this.__dataHasAccessor[property]) {\n        this.__dataHasAccessor[property] = true;\n        saveAccessorValue(this, property);\n        Object.defineProperty(this, property, {\n          /* eslint-disable valid-jsdoc */\n          /** @this {PropertyAccessors} */\n          get: function() {\n            return this.__data[property];\n          },\n          /** @this {PropertyAccessors} */\n          set: readOnly ? function() {} : function(value) {\n            this._setProperty(property, value);\n          }\n          /* eslint-enable */\n        });\n      }\n    }\n\n    /**\n     * Returns true if this library created an accessor for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if an accessor was created\n     */\n    _hasAccessor(property) {\n      return this.__dataHasAccessor && this.__dataHasAccessor[property];\n    }\n\n    /**\n     * Updates the local storage for a property (via `_setPendingProperty`)\n     * and enqueues a `_proeprtiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @protected\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Updates the local storage for a property, records the previous value,\n     * and adds it to the set of \"pending changes\" that will be passed to the\n     * `_propertiesChanged` callback.  This method does not enqueue the\n     * `_propertiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {boolean} Returns true if the property changed\n     * @protected\n     */\n    _setPendingProperty(property, value) {\n      let old = this.__data[property];\n      let changed = this._shouldPropertyChange(property, value, old);\n      if (changed) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (this.__dataOld && !(property in this.__dataOld)) {\n          this.__dataOld[property] = old;\n        }\n        this.__data[property] = value;\n        this.__dataPending[property] = value;\n      }\n      return changed;\n    }\n\n    /**\n     * Returns true if the specified property has a pending change.\n     *\n     * @param {string} prop Property name\n     * @return {boolean} True if property has a pending change\n     * @protected\n     */\n    _isPropertyPending(prop) {\n      return Boolean(this.__dataPending && (prop in this.__dataPending));\n    }\n\n    /**\n     * Marks the properties as invalid, and enqueues an async\n     * `_propertiesChanged` callback.\n     *\n     * @protected\n     */\n    _invalidateProperties() {\n      if (!this.__dataInvalid && this.__dataReady) {\n        this.__dataInvalid = true;\n        microtask.run(() => {\n          if (this.__dataInvalid) {\n            this.__dataInvalid = false;\n            this._flushProperties();\n          }\n        });\n      }\n    }\n\n    /**\n     * Call to enable property accessor processing. Before this method is\n     * called accessor values will be set but side effects are\n     * queued. When called, any pending side effects occur immediately.\n     * For elements, generally `connectedCallback` is a normal spot to do so.\n     * It is safe to call this method multiple times as it only turns on\n     * property accessors once.\n     */\n    _enableProperties() {\n      if (!this.__dataEnabled) {\n        this.__dataEnabled = true;\n        if (this.__dataInstanceProps) {\n          this._initializeInstanceProperties(this.__dataInstanceProps);\n          this.__dataInstanceProps = null;\n        }\n        this.ready();\n      }\n    }\n\n    /**\n     * Calls the `_propertiesChanged` callback with the current set of\n     * pending changes (and old values recorded when pending changes were\n     * set), and resets the pending set of changes. Generally, this method\n     * should not be called in user code.\n     *\n     *\n     * @protected\n     */\n    _flushProperties() {\n      if (this.__dataPending && this.__dataOld) {\n        let changedProps = this.__dataPending;\n        this.__dataPending = null;\n        this.__dataCounter++;\n        this._propertiesChanged(this.__data, changedProps, this.__dataOld);\n        this.__dataCounter--;\n      }\n    }\n\n    /**\n     * Lifecycle callback called the first time properties are being flushed.\n     * Prior to `ready`, all property sets through accessors are queued and\n     * their effects are flushed after this method returns.\n     *\n     * Users may override this function to implement behavior that is\n     * dependent on the element having its properties initialized, e.g.\n     * from defaults (initialized from `constructor`, `_initializeProperties`),\n     * `attributeChangedCallback`, or values propagated from host e.g. via\n     * bindings.  `super.ready()` must be called to ensure the data system\n     * becomes enabled.\n     *\n     * @public\n     */\n    ready() {\n      this.__dataReady = true;\n      // Run normal flush\n      this._flushProperties();\n    }\n\n    /**\n     * Callback called when any properties with accessors created via\n     * `_createPropertyAccessor` have been set.\n     *\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {!Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {!Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @protected\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Method called to determine whether a property value should be\n     * considered as a change and cause the `_propertiesChanged` callback\n     * to be enqueued.\n     *\n     * The default implementation returns `true` for primitive types if a\n     * strict equality check fails, and returns `true` for all Object/Arrays.\n     * The method always returns false for `NaN`.\n     *\n     * Override this method to e.g. provide stricter checking for\n     * Objects/Arrays when using immutable patterns.\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     *   and enqueue a `_proeprtiesChanged` callback\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return (\n        // Strict equality check\n        (old !== value &&\n         // This ensures (old==NaN, value==NaN) always returns false\n         (old === old || value === value))\n      );\n    }\n\n  }\n\n  return PropertyAccessors;\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ../node_modules/@polymer/polymer/lib/mixins/property-accessors.js","// comes from template-stamp.js but removing the templating using html\n\nfunction createNodeEventHandler (context, eventName, methodName) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  context = context._methodHost || context;\n  let handler = function (e) {\n    if (context[methodName]) {\n      context[methodName](e, e.detail);\n    } else {\n      console.warn('listener method `' + methodName + '` not defined');\n    }\n  };\n  return handler;\n}\n\nexport default superClass => {\n  return class extends superClass {\n    /**\n     * Adds an event listener by method name for the event provided.\n     *\n     * This method generates a handler function that looks up the method\n     * name at handling time.\n     *\n     * @param {Node} node Node to add listener on\n     * @param {string} eventName Name of event\n     * @param {string} methodName Name of method\n     * @param {*=} context Context the method will be called on (defaults\n     *   to `node`)\n     * @return {Function} Generated handler function\n     */\n    _addMethodEventListenerToNode (node, eventName, methodName, context) {\n      context = context || node;\n      let handler = createNodeEventHandler(context, eventName, methodName);\n      this._addEventListenerToNode(node, eventName, handler);\n      return handler;\n    }\n\n    /**\n     * Override point for adding custom or simulated event handling.\n     *\n     * @param {Node} node Node to add event listener to\n     * @param {string} eventName Name of event\n     * @param {Function} handler Listener function to add\n     */\n    _addEventListenerToNode (node, eventName, handler) {\n      node.addEventListener(eventName, handler);\n    }\n\n    /**\n     * Override point for adding custom or simulated event handling.\n     *\n     * @param {Node} node Node to remove event listener from\n     * @param {string} eventName Name of event\n     * @param {Function} handler Listener function to remove\n     */\n    _removeEventListenerFromNode (node, eventName, handler) {\n      node.removeEventListener(eventName, handler);\n    }\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ../src/core/mixins/template-stamp.js","/**\n* Helper api for enqueing client dom created by a host element.\n*\n* By default elements are flushed via `_flushProperties` when\n* `connectedCallback` is called. Elements attach their client dom to\n* themselves at `ready` time which results from this first flush.\n* This provides an ordering guarantee that the client dom an element\n* creates is flushed before the element itself (i.e. client `ready`\n* fires before host `ready`).\n*\n* However, if `_flushProperties` is called *before* an element is connected,\n* as for example `Templatize` does, this ordering guarantee cannot be\n* satisfied because no elements are connected. (Note: Bound elements that\n* receive data do become enqueued clients and are properly ordered but\n* unbound elements are not.)\n*\n* To maintain the desired \"client before host\" ordering guarantee for this\n* case we rely on the \"host stack. Client nodes registers themselves with\n* the creating host element when created. This ensures that all client dom\n* is readied in the proper order, maintaining the desired guarantee.\n*\n* @private\n*/\n\nexport default {\n  stack: [],\n\n  /**\n   * @param {*} inst Instance to add to hostStack\n   * @this {hostStack}\n   */\n  registerHost (inst) {\n    if (this.stack.length) {\n      let host = this.stack[this.stack.length - 1];\n      host._enqueueClient(inst);\n    }\n  },\n\n  /**\n   * @param {*} inst Instance to begin hosting\n   * @this {hostStack}\n   */\n  beginHosting (inst) {\n    this.stack.push(inst);\n  },\n\n  /**\n   * @param {*} inst Instance to end hosting\n   * @this {hostStack}\n   */\n  endHosting (inst) {\n    let stackLen = this.stack.length;\n    if (stackLen && this.stack[stackLen - 1] === inst) {\n      this.stack.pop();\n    }\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ../src/core/utils/host-stack.js","import { root as root$0, isAncestor, isDescendant, get as get$0, isPath as isPath$0, translate } from '@polymer/polymer/lib/utils/path';\nimport { camelToDashCase as camelToDashCase$0 } from '@polymer/polymer/lib/utils/case-map';\nimport { sanitizeDOMValue } from '@polymer/polymer/lib/utils/settings';\nimport TYPES from './property-effects-types';\n\nlet dedupeId = 0;\nconst emptyArray = [];\n\n/**\n * Ensures that the model has an own-property map of effects for the given type.\n * The model may be a prototype or an instance.\n *\n * Property effects are stored as arrays of effects by property in a map,\n * by named type on the model. e.g.\n *\n *   __computeEffects: {\n *     foo: [ ... ],\n *     bar: [ ... ]\n *   }\n *\n * If the model does not yet have an effect map for the type, one is created\n * and returned.  If it does, but it is not an own property (i.e. the\n * prototype had effects), the the map is deeply cloned and the copy is\n * set on the model and returned, ready for new effects to be added.\n *\n * @param {Object} model Prototype or instance\n * @param {string} type Property effect type\n * @return {Object} The own-property map of effects for the given type\n * @private\n */\nexport function ensureOwnEffectMap (model, type) {\n  let effects = model[type];\n  if (!effects) {\n    effects = model[type] = {};\n  } else if (!model.hasOwnProperty(type)) {\n    effects = model[type] = Object.create(model[type]);\n    for (let p in effects) {\n      let protoFx = effects[p];\n      let instFx = effects[p] = Array(protoFx.length);\n      for (let i = 0; i < protoFx.length; i++) {\n        instFx[i] = protoFx[i];\n      }\n    }\n  }\n  return effects;\n}\n\n// -- effects ----------------------------------------------\n\n/**\n * Runs all effects of a given type for the given set of property changes\n * on an instance.\n *\n * @param {!PropertyEffectsType} inst The instance with effects to run\n * @param {Object} effects Object map of property-to-Array of effects\n * @param {Object} props Bag of current property changes\n * @param {Object=} oldProps Bag of previous values for changed properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nexport function runEffects (inst, effects, props, oldProps, hasPaths, extraArgs) {\n  if (effects) {\n    let ran = false;\n    let id = dedupeId++;\n    for (let prop in props) {\n      if (runEffectsForProperty(inst, effects, id, prop, props, oldProps, hasPaths, extraArgs)) {\n        ran = true;\n      }\n    }\n    return ran;\n  }\n  return false;\n}\n\n/**\n * Runs a list of effects for a given property.\n *\n * @param {!PropertyEffectsType} inst The instance with effects to run\n * @param {Object} effects Object map of property-to-Array of effects\n * @param {number} dedupeId Counter used for de-duping effects\n * @param {string} prop Name of changed property\n * @param {*} props Changed properties\n * @param {*} oldProps Old properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nexport function runEffectsForProperty (inst, effects, dedupeId, prop, props, oldProps, hasPaths, extraArgs) {\n  let ran = false;\n  let rootProperty = hasPaths ? root$0(prop) : prop;\n  let fxs = effects[rootProperty];\n  if (fxs) {\n    for (let i = 0, l = fxs.length, fx; (i < l) && (fx = fxs[i]); i++) {\n      if ((!fx.info || fx.info.lastRun !== dedupeId) &&\n          (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n        if (fx.info) {\n          fx.info.lastRun = dedupeId;\n        }\n        fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);\n        ran = true;\n      }\n    }\n  }\n  return ran;\n}\n\n/**\n * Determines whether a property/path that has changed matches the trigger\n * criteria for an effect.  A trigger is a descriptor with the following\n * structure, which matches the descriptors returned from `parseArg`.\n * e.g. for `foo.bar.*`:\n * ```\n * trigger: {\n *   name: 'a.b',\n *   structured: true,\n *   wildcard: true\n * }\n * ```\n * If no trigger is given, the path is deemed to match.\n *\n * @param {string} path Path or property that changed\n * @param {DataTrigger} trigger Descriptor\n * @return {boolean} Whether the path matched the trigger\n */\nexport function pathMatchesTrigger (path, trigger) {\n  if (trigger) {\n    let triggerPath = trigger.name;\n    return (triggerPath === path) ||\n      (trigger.structured && isAncestor(triggerPath, path)) ||\n      (trigger.wildcard && isDescendant(triggerPath, path));\n  } else {\n    return true;\n  }\n}\n\n/**\n * Implements the \"observer\" effect.\n *\n * Calls the method with `info.methodName` on the instance, passing the\n * new and old values.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @private\n */\nexport function runObserverEffect (inst, property, props, oldProps, info) {\n  let fn = inst[info.methodName];\n  let changedProp = info.property;\n  if (fn) {\n    fn.call(inst, inst.__data[changedProp], oldProps[changedProp]);\n  } else if (!info.dynamicFn) {\n    console.warn('observer method `' + info.methodName + '` not defined');\n  }\n}\n\n/**\n * Runs \"notify\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * will dispatch path notification events in the case that the property\n * changed was a path and the root property for that path didn't have a\n * \"notify\" effect.  This is to maintain 1.0 behavior that did not require\n * `notify: true` to ensure object sub-property notifications were\n * sent.\n *\n * @param {!PropertyEffectsType} inst The instance with effects to run\n * @param {Object} notifyProps Bag of properties to notify\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @private\n */\nexport function runNotifyEffects (inst, notifyProps, props, oldProps, hasPaths) {\n  // Notify\n  let fxs = inst[TYPES.NOTIFY];\n  let notified;\n  let id = dedupeId++;\n  // Try normal notify effects; if none, fall back to try path notification\n  for (let prop in notifyProps) {\n    if (notifyProps[prop]) {\n      if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) {\n        notified = true;\n      } else if (hasPaths && notifyPath(inst, prop, props)) {\n        notified = true;\n      }\n    }\n  }\n  // Flush host if we actually notified and host was batching\n  // And the host has already initialized clients; this prevents\n  // an issue with a host observing data changes before clients are ready.\n  let host;\n  if (notified && (host = inst.__dataHost) && host._invalidateProperties) {\n    host._invalidateProperties();\n  }\n}\n\n/**\n * Dispatches {property}-changed events with path information in the detail\n * object to indicate a sub-path of the property was changed.\n *\n * @param {!PropertyEffectsType} inst The element from which to fire the event\n * @param {string} path The path that was changed\n * @param {Object} props Bag of current property changes\n * @return {boolean} Returns true if the path was notified\n * @private\n */\nexport function notifyPath (inst, path, props) {\n  let rootProperty = root$0(path);\n  if (rootProperty !== path) {\n    let eventName = camelToDashCase$0(rootProperty) + '-changed';\n    dispatchNotifyEvent(inst, eventName, props[path], path);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Dispatches {property}-changed events to indicate a property (or path)\n * changed.\n *\n * @param {!PropertyEffectsType} inst The element from which to fire the event\n * @param {string} eventName The name of the event to send ('{property}-changed')\n * @param {*} value The value of the changed property\n * @param {string | null | undefined} path If a sub-path of this property changed, the path\n *   that changed (optional).\n * @private\n * @suppress {invalidCasts}\n */\nexport function dispatchNotifyEvent (inst, eventName, value, path) {\n  let detail = {\n    value: value,\n    queueProperty: true\n  };\n  if (path) {\n    detail.path = path;\n  }\n  /** @type {!HTMLElement} */(inst).dispatchEvent(new window.CustomEvent(eventName, { detail }));\n}\n\n/**\n * Implements the \"notify\" effect.\n *\n * Dispatches a non-bubbling event named `info.eventName` on the instance\n * with a detail object containing the new `value`.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @private\n */\nexport function runNotifyEffect (inst, property, props, oldProps, info, hasPaths) {\n  let rootProperty = hasPaths ? root$0(property) : property;\n  let path = rootProperty !== property ? property : null;\n  let value = path ? get$0(inst, path) : inst.__data[property];\n  if (path && value === undefined) {\n    value = props[property];  // specifically for .splices\n  }\n  dispatchNotifyEvent(inst, info.eventName, value, path);\n}\n\n/**\n * Handler function for 2-way notification events. Receives context\n * information captured in the `addNotifyListener` closure from the\n * `__notifyListeners` metadata.\n *\n * Sets the value of the notified property to the host property or path.  If\n * the event contained path information, translate that path to the host\n * scope's name for that path first.\n *\n * @param {CustomEvent} event Notification event (e.g. '<property>-changed')\n * @param {!PropertyEffectsType} inst Host element instance handling the notification event\n * @param {string} fromProp Child element property that was bound\n * @param {string} toPath Host property/path that was bound\n * @param {boolean} negate Whether the binding was negated\n * @private\n */\nexport function handleNotification (event, inst, fromProp, toPath, negate) {\n  let value;\n  let detail = /** @type {Object} */(event.detail);\n  let fromPath = detail && detail.path;\n  if (fromPath) {\n    toPath = translate(fromProp, toPath, fromPath);\n    value = detail && detail.value;\n  } else {\n    value = event.target[fromProp];\n  }\n  value = negate ? !value : value;\n  if (!inst[TYPES.READ_ONLY] || !inst[TYPES.READ_ONLY][toPath]) {\n    if (inst._setPendingPropertyOrPath(toPath, value, true, Boolean(fromPath)) &&\n      (!detail || !detail.queueProperty)) {\n      inst._invalidateProperties();\n    }\n  }\n}\n\n/**\n * Implements the \"reflect\" effect.\n *\n * Sets the attribute named `info.attrName` to the given property value.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @private\n */\nexport function runReflectEffect (inst, property, props, oldProps, info) {\n  let value = inst.__data[property];\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, info.attrName, 'attribute', /** @type {Node} */(inst));\n  }\n  inst._propertyToAttribute(property, info.attrName, value);\n}\n\n/**\n * Runs \"computed\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * continues to run computed effects based on the output of each pass until\n * there are no more newly computed properties.  This ensures that all\n * properties that will be computed by the initial set of changes are\n * computed before other effects (binding propagation, observers, and notify)\n * run.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {!Object} changedProps Bag of changed properties\n * @param {!Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @private\n */\nexport function runComputedEffects (inst, changedProps, oldProps, hasPaths) {\n  let computeEffects = inst[TYPES.COMPUTE];\n  if (computeEffects) {\n    let inputProps = changedProps;\n    while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) {\n      Object.assign(oldProps, inst.__dataOld);\n      Object.assign(changedProps, inst.__dataPending);\n      inputProps = inst.__dataPending;\n      inst.__dataPending = null;\n    }\n  }\n}\n\n/**\n * Implements the \"computed property\" effect by running the method with the\n * values of the arguments specified in the `info` object and setting the\n * return value to the computed property specified.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @private\n */\nexport function runComputedEffect (inst, property, props, oldProps, info) {\n  let result = runMethodEffect(inst, property, props, oldProps, info);\n  let computedProp = info.methodInfo;\n  if (inst.__dataHasAccessor && inst.__dataHasAccessor[computedProp]) {\n    inst._setPendingProperty(computedProp, result, true);\n  } else {\n    inst[computedProp] = result;\n  }\n}\n\n/**\n * Computes path changes based on path links set up using the `linkPaths`\n * API.\n *\n * @param {!PropertyEffectsType} inst The instance whose props are changing\n * @param {string | !Array<(string|number)>} path Path that has changed\n * @param {*} value Value of changed path\n * @private\n */\nexport function computeLinkedPaths (inst, path, value) {\n  let links = inst.__dataLinkedPaths;\n  if (links) {\n    let link;\n    for (let a in links) {\n      let b = links[a];\n      if (isDescendant(a, path)) {\n        link = translate(a, b, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      } else if (isDescendant(b, path)) {\n        link = translate(b, a, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      }\n    }\n  }\n}\n\n// -- for method-based effects (complexObserver & computed) --------------\n\n/**\n * Adds property effects for each argument in the method signature (and\n * optionally, for the method name if `dynamic` is true) that calls the\n * provided effect function.\n *\n * @param {Element | Object} model Prototype or instance\n * @param {!MethodSignature} sig Method signature metadata\n * @param {string} type Type of property effect to add\n * @param {Function} effectFn Function to run when arguments change\n * @param {*=} methodInfo Effect-specific information to be included in\n *   method effect metadata\n * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n *   method names should be included as a dependency to the effect. Note,\n *   defaults to true if the signature is static (sig.static is true).\n * @private\n */\nexport function createMethodEffect (model, sig, type, effectFn, methodInfo, dynamicFn) {\n  dynamicFn = sig.static || (dynamicFn &&\n    (typeof dynamicFn !== 'object' || dynamicFn[sig.methodName]));\n  let info = {\n    methodName: sig.methodName,\n    args: sig.args,\n    methodInfo,\n    dynamicFn\n  };\n  for (let i = 0, arg; (i < sig.args.length) && (arg = sig.args[i]); i++) {\n    if (!arg.literal) {\n      model._addPropertyEffect(arg.rootProperty, type, {\n        fn: effectFn, info: info, trigger: arg\n      });\n    }\n  }\n  if (dynamicFn) {\n    model._addPropertyEffect(sig.methodName, type, {\n      fn: effectFn, info: info\n    });\n  }\n}\n\n/**\n * Calls a method with arguments marshaled from properties on the instance\n * based on the method signature contained in the effect metadata.\n *\n * Multi-property observers, computed properties, and inline computing\n * functions call this function to invoke the method, then use the return\n * value accordingly.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {*} Returns the return value from the method invocation\n * @private\n */\nexport function runMethodEffect (inst, property, props, oldProps, info) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  let context = inst._methodHost || inst;\n  let fn = context[info.methodName];\n  if (fn) {\n    let args = marshalArgs(inst.__data, info.args, property, props);\n    return fn.apply(context, args);\n  } else if (!info.dynamicFn) {\n    console.warn('method `' + info.methodName + '` not defined');\n  }\n}\n\n/**\n * Gather the argument values for a method specified in the provided array\n * of argument metadata.\n *\n * The `path` and `value` arguments are used to fill in wildcard descriptor\n * when the method is being called as a result of a path notification.\n *\n * @param {Object} data Instance data storage object to read properties from\n * @param {!Array<!MethodArg>} args Array of argument metadata\n * @param {string} path Property/path name that triggered the method effect\n * @param {Object} props Bag of current property changes\n * @return {Array<*>} Array of argument values\n * @private\n */\nexport function marshalArgs (data, args, path, props) {\n  let values = [];\n  for (let i = 0, l = args.length; i < l; i++) {\n    let arg = args[i];\n    let name = arg.name;\n    let v;\n    if (arg.literal) {\n      v = arg.value;\n    } else {\n      if (arg.structured) {\n        v = get$0(data, name);\n        // when data is not stored e.g. `splices`\n        if (v === undefined) {\n          v = props[name];\n        }\n      } else {\n        v = data[name];\n      }\n    }\n    if (arg.wildcard) {\n      // Only send the actual path changed info if the change that\n      // caused the observer to run matched the wildcard\n      let baseChanged = (name.indexOf(path + '.') === 0);\n      let matches = (path.indexOf(name) === 0 && !baseChanged);\n      values[i] = {\n        path: matches ? path : name,\n        value: matches ? props[path] : v,\n        base: v\n      };\n    } else {\n      values[i] = v;\n    }\n  }\n  return values;\n}\n\n/**\n * Parses an expression string for a method signature, and returns a metadata\n * describing the method in terms of `methodName`, `static` (whether all the\n * arguments are literals), and an array of `args`\n *\n * @param {string} expression The expression to parse\n * @return {?MethodSignature} The method metadata object if a method expression was\n *   found, otherwise `undefined`\n * @private\n */\nexport function parseMethod (expression) {\n  // tries to match valid javascript property names\n  let m = expression.match(/([^\\s]+?)\\(([\\s\\S]*)\\)/);\n  if (m) {\n    let methodName = m[1];\n    let sig = { methodName, static: true, args: emptyArray };\n    if (m[2].trim()) {\n      // replace escaped commas with comma entity, split on un-escaped commas\n      let args = m[2].replace(/\\\\,/g, '&comma;').split(',');\n      return parseArgs(args, sig);\n    } else {\n      return sig;\n    }\n  }\n  return null;\n}\n\n/**\n * Parses an array of arguments and sets the `args` property of the supplied\n * signature metadata object. Sets the `static` property to false if any\n * argument is a non-literal.\n *\n * @param {!Array<string>} argList Array of argument names\n * @param {!MethodSignature} sig Method signature metadata object\n * @return {!MethodSignature} The updated signature metadata object\n * @private\n */\nexport function parseArgs (argList, sig) {\n  sig.args = argList.map(function (rawArg) {\n    let arg = parseArg(rawArg);\n    if (!arg.literal) {\n      sig.static = false;\n    }\n    return arg;\n  }, this);\n  return sig;\n}\n\n/**\n * Parses an individual argument, and returns an argument metadata object\n * with the following fields:\n *\n *   {\n *     value: 'prop',        // property/path or literal value\n *     literal: false,       // whether argument is a literal\n *     structured: false,    // whether the property is a path\n *     rootProperty: 'prop', // the root property of the path\n *     wildcard: false       // whether the argument was a wildcard '.*' path\n *   }\n *\n * @param {string} rawArg The string value of the argument\n * @return {!MethodArg} Argument metadata object\n * @private\n */\nexport function parseArg (rawArg) {\n  // clean up whitespace\n  let arg = rawArg.trim()\n    // replace comma entity with comma\n    .replace(/&comma;/g, ',')\n    // repair extra escape sequences; note only commas strictly need\n    // escaping, but we allow any other char to be escaped since its\n    // likely users will do this\n    .replace(/\\\\(.)/g, '\\$1') // eslint-disable-line no-useless-escape\n    ;\n  // basic argument descriptor\n  let a = {\n    name: arg,\n    value: '',\n    literal: false\n  };\n  // detect literal value (must be String or Number)\n  let fc = arg[0];\n  if (fc === '-') {\n    fc = arg[1];\n  }\n  if (fc >= '0' && fc <= '9') {\n    fc = '#';\n  }\n  switch (fc) {\n    case \"'\":\n    case '\"':\n      a.value = arg.slice(1, -1);\n      a.literal = true;\n      break;\n    case '#':\n      a.value = Number(arg);\n      a.literal = true;\n      break;\n  }\n  // if not literal, look for structured path\n  if (!a.literal) {\n    a.rootProperty = root$0(arg);\n    // detect structured path (has dots)\n    a.structured = isPath$0(arg);\n    if (a.structured) {\n      a.wildcard = (arg.slice(-2) === '.*');\n      if (a.wildcard) {\n        a.name = arg.slice(0, -2);\n      }\n    }\n  }\n  return a;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/core/utils/effects.js","import './boot.js';\nimport { pathFromUrl } from './resolve-url.js';\n\n/**\n * Legacy settings.\n * @namespace\n * @memberof Polymer\n */\nconst settings = undefined || {};\nexport const useShadow = !(window.ShadyDOM);\nexport const useNativeCSSProperties = Boolean(!window.ShadyCSS || window.ShadyCSS.nativeCss);\nexport const useNativeCustomElements = !(window.customElements.polyfillWrapFlushCallback);\nexport { settings as Settings };\n\n/**\n * Globally settable property that is automatically assigned to\n * `Polymer.ElementMixin` instances, useful for binding in templates to\n * make URL's relative to an application's root.  Defaults to the main\n * document URL, but can be overridden by users.  It may be useful to set\n * `Polymer.rootPath` to provide a stable application mount path when\n * using client side routing.\n *\n * @memberof Polymer\n */\nlet rootPath = undefined ||\n  pathFromUrl(document.baseURI || window.location.href);\n\nexport { rootPath };\n\nexport const setRootPath = function(path) {\n  rootPath = path;\n};\n\n/**\n * A global callback used to sanitize any value before inserting it into the DOM. The callback signature is:\n *\n *     Polymer = {\n *       sanitizeDOMValue: function(value, name, type, node) { ... }\n *     }\n *\n * Where:\n *\n * `value` is the value to sanitize.\n * `name` is the name of an attribute or property (for example, href).\n * `type` indicates where the value is being inserted: one of property, attribute, or text.\n * `node` is the node where the value is being inserted.\n *\n * @type {(function(*,string,string,Node):*)|undefined}\n * @memberof Polymer\n */\nlet sanitizeDOMValue = undefined;\n\nexport { sanitizeDOMValue };\n\nexport const setSanitizeDOMValue = function(newSanitizeDOMValue) {\n  sanitizeDOMValue = newSanitizeDOMValue;\n};\n\n\n\n// WEBPACK FOOTER //\n// ../node_modules/@polymer/polymer/lib/utils/settings.js","// data api\n\n/**\n * Sends array splice notifications (`.splices` and `.length`)\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!PropertyEffectsType} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {Array} splices Array of splice records\n * @private\n */\nexport function notifySplices (inst, array, path, splices) {\n  let splicesPath = path + '.splices';\n  inst.notifyPath(splicesPath, { indexSplices: splices });\n  inst.notifyPath(path + '.length', array.length);\n  // Null here to allow potentially large splice records to be GC'ed.\n  inst.__data[splicesPath] = {indexSplices: null};\n}\n\n/**\n * Creates a splice record and sends an array splice notification for\n * the described mutation\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!PropertyEffectsType} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {number} index Index at which the array mutation occurred\n * @param {number} addedCount Number of added items\n * @param {Array} removed Array of removed items\n * @private\n */\nexport function notifySplice (inst, array, path, index, addedCount, removed) {\n  notifySplices(inst, array, path, [{\n    index: index,\n    addedCount: addedCount,\n    removed: removed,\n    object: array,\n    type: 'splice'\n  }]);\n}\n\n/**\n * Returns an upper-cased version of the string.\n *\n * @param {string} name String to uppercase\n * @return {string} Uppercased string\n * @private\n */\nexport function upper (name) {\n  return name[0].toUpperCase() + name.substring(1);\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/core/utils/data-api.js","import './boot.js';\nimport { calculateSplices } from './array-splice.js';\nimport { microTask } from './async.js';\n\n/**\n * Returns true if `node` is a slot element\n * @param {HTMLElement} node Node to test.\n * @return {boolean} Returns true if the given `node` is a slot\n * @private\n */\nfunction isSlot(node) {\n  return (node.localName === 'slot');\n}\n\n/**\n * Class that listens for changes (additions or removals) to\n * \"flattened nodes\" on a given `node`. The list of flattened nodes consists\n * of a node's children and, for any children that are `<slot>` elements,\n * the expanded flattened list of `assignedNodes`.\n * For example, if the observed node has children `<a></a><slot></slot><b></b>`\n * and the `<slot>` has one `<div>` assigned to it, then the flattened\n * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n * `<slot>` elements assigned to it, these are flattened as well.\n *\n * The provided `callback` is called whenever any change to this list\n * of flattened nodes occurs, where an addition or removal of a node is\n * considered a change. The `callback` is called with one argument, an object\n * containing an array of any `addedNodes` and `removedNodes`.\n *\n * Note: the callback is called asynchronous to any changes\n * at a microtask checkpoint. This is because observation is performed using\n * `MutationObserver` and the `<slot>` element's `slotchange` event which\n * are asynchronous.\n *\n * @memberof Polymer\n * @summary Class that listens for changes (additions or removals) to\n * \"flattened nodes\" on a given `node`.\n */\nclass FlattenedNodesObserver {\n\n  /**\n   * Returns the list of flattened nodes for the given `node`.\n   * This list consists of a node's children and, for any children\n   * that are `<slot>` elements, the expanded flattened list of `assignedNodes`.\n   * For example, if the observed node has children `<a></a><slot></slot><b></b>`\n   * and the `<slot>` has one `<div>` assigned to it, then the flattened\n   * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n   * `<slot>` elements assigned to it, these are flattened as well.\n   *\n   * @param {HTMLElement|HTMLSlotElement} node The node for which to return the list of flattened nodes.\n   * @return {Array} The list of flattened nodes for the given `node`.\n  */\n  static getFlattenedNodes(node) {\n    if (isSlot(node)) {\n      return /** @type {HTMLSlotElement} */ (node).assignedNodes({flatten: true});\n    } else {\n      return Array.from(node.childNodes).map(node => {\n        if (isSlot(node)) {\n          return /** @type {HTMLSlotElement} */ (node).assignedNodes({flatten: true});\n        } else {\n          return [node];\n        }\n      }).reduce((a, b) => a.concat(b), []);\n    }\n  }\n\n  /**\n   * @param {Node} target Node on which to listen for changes.\n   * @param {Function} callback Function called when there are additions\n   * or removals from the target's list of flattened nodes.\n  */\n  constructor(target, callback) {\n    /** @type {MutationObserver} */\n    this._shadyChildrenObserver = null;\n    /** @type {MutationObserver} */\n    this._nativeChildrenObserver = null;\n    this._connected = false;\n    this._target = target;\n    this.callback = callback;\n    this._effectiveNodes = [];\n    this._observer = null;\n    this._scheduled = false;\n    /** @type {function()} */\n    this._boundSchedule = () => {\n      this._schedule();\n    };\n    this.connect();\n    this._schedule();\n  }\n\n  /**\n   * Activates an observer. This method is automatically called when\n   * a `FlattenedNodesObserver` is created. It should only be called to\n   * re-activate an observer that has been deactivated via the `disconnect` method.\n   */\n  connect() {\n    if (isSlot(this._target)) {\n      this._listenSlots([this._target]);\n    } else {\n      this._listenSlots(this._target.children);\n      if (window.ShadyDOM) {\n        this._shadyChildrenObserver =\n          ShadyDOM.observeChildren(this._target, (mutations) => {\n            this._processMutations(mutations);\n          });\n      } else {\n        this._nativeChildrenObserver =\n          new MutationObserver((mutations) => {\n            this._processMutations(mutations);\n          });\n        this._nativeChildrenObserver.observe(this._target, {childList: true});\n      }\n    }\n    this._connected = true;\n  }\n\n  /**\n   * Deactivates the flattened nodes observer. After calling this method\n   * the observer callback will not be called when changes to flattened nodes\n   * occur. The `connect` method may be subsequently called to reactivate\n   * the observer.\n   */\n  disconnect() {\n    if (isSlot(this._target)) {\n      this._unlistenSlots([this._target]);\n    } else {\n      this._unlistenSlots(this._target.children);\n      if (window.ShadyDOM && this._shadyChildrenObserver) {\n        ShadyDOM.unobserveChildren(this._shadyChildrenObserver);\n        this._shadyChildrenObserver = null;\n      } else if (this._nativeChildrenObserver) {\n        this._nativeChildrenObserver.disconnect();\n        this._nativeChildrenObserver = null;\n      }\n    }\n    this._connected = false;\n  }\n\n  _schedule() {\n    if (!this._scheduled) {\n      this._scheduled = true;\n      microTask.run(() => this.flush());\n    }\n  }\n\n  _processMutations(mutations) {\n    this._processSlotMutations(mutations);\n    this.flush();\n  }\n\n  _processSlotMutations(mutations) {\n    if (mutations) {\n      for (let i=0; i < mutations.length; i++) {\n        let mutation = mutations[i];\n        if (mutation.addedNodes) {\n          this._listenSlots(mutation.addedNodes);\n        }\n        if (mutation.removedNodes) {\n          this._unlistenSlots(mutation.removedNodes);\n        }\n      }\n    }\n  }\n\n  /**\n   * Flushes the observer causing any pending changes to be immediately\n   * delivered the observer callback. By default these changes are delivered\n   * asynchronously at the next microtask checkpoint.\n   *\n   * @return {boolean} Returns true if any pending changes caused the observer\n   * callback to run.\n   */\n  flush() {\n    if (!this._connected) {\n      return false;\n    }\n    if (window.ShadyDOM) {\n      ShadyDOM.flush();\n    }\n    if (this._nativeChildrenObserver) {\n      this._processSlotMutations(this._nativeChildrenObserver.takeRecords());\n    } else if (this._shadyChildrenObserver) {\n      this._processSlotMutations(this._shadyChildrenObserver.takeRecords());\n    }\n    this._scheduled = false;\n    let info = {\n      target: this._target,\n      addedNodes: [],\n      removedNodes: []\n    };\n    let newNodes = this.constructor.getFlattenedNodes(this._target);\n    let splices = calculateSplices(newNodes,\n      this._effectiveNodes);\n    // process removals\n    for (let i=0, s; (i<splices.length) && (s=splices[i]); i++) {\n      for (let j=0, n; (j < s.removed.length) && (n=s.removed[j]); j++) {\n        info.removedNodes.push(n);\n      }\n    }\n    // process adds\n    for (let i=0, s; (i<splices.length) && (s=splices[i]); i++) {\n      for (let j=s.index; j < s.index + s.addedCount; j++) {\n        info.addedNodes.push(newNodes[j]);\n      }\n    }\n    // update cache\n    this._effectiveNodes = newNodes;\n    let didFlush = false;\n    if (info.addedNodes.length || info.removedNodes.length) {\n      didFlush = true;\n      this.callback.call(this._target, info);\n    }\n    return didFlush;\n  }\n\n  _listenSlots(nodeList) {\n    for (let i=0; i < nodeList.length; i++) {\n      let n = nodeList[i];\n      if (isSlot(n)) {\n        n.addEventListener('slotchange', this._boundSchedule);\n      }\n    }\n  }\n\n  _unlistenSlots(nodeList) {\n    for (let i=0; i < nodeList.length; i++) {\n      let n = nodeList[i];\n      if (isSlot(n)) {\n        n.removeEventListener('slotchange', this._boundSchedule);\n      }\n    }\n  }\n\n}\n\nexport { FlattenedNodesObserver };\n\n\n\n// WEBPACK FOOTER //\n// ../node_modules/@polymer/polymer/lib/utils/flattened-nodes-observer.js","import './boot.js';\n\nfunction newSplice(index, removed, addedCount) {\n  return {\n    index: index,\n    removed: removed,\n    addedCount: addedCount\n  };\n}\n\nconst EDIT_LEAVE = 0;\nconst EDIT_UPDATE = 1;\nconst EDIT_ADD = 2;\nconst EDIT_DELETE = 3;\n\n// Note: This function is *based* on the computation of the Levenshtein\n// \"edit\" distance. The one change is that \"updates\" are treated as two\n// edits - not one. With Array splices, an update is really a delete\n// followed by an add. By retaining this, we optimize for \"keeping\" the\n// maximum array items in the original array. For example:\n//\n//   'xxxx123' -> '123yyyy'\n//\n// With 1-edit updates, the shortest path would be just to update all seven\n// characters. With 2-edit updates, we delete 4, leave 3, and add 4. This\n// leaves the substring '123' intact.\nfunction calcEditDistances(current, currentStart, currentEnd,\n                            old, oldStart, oldEnd) {\n  // \"Deletion\" columns\n  let rowCount = oldEnd - oldStart + 1;\n  let columnCount = currentEnd - currentStart + 1;\n  let distances = new Array(rowCount);\n\n  // \"Addition\" rows. Initialize null column.\n  for (let i = 0; i < rowCount; i++) {\n    distances[i] = new Array(columnCount);\n    distances[i][0] = i;\n  }\n\n  // Initialize null row\n  for (let j = 0; j < columnCount; j++)\n    distances[0][j] = j;\n\n  for (let i = 1; i < rowCount; i++) {\n    for (let j = 1; j < columnCount; j++) {\n      if (equals(current[currentStart + j - 1], old[oldStart + i - 1]))\n        distances[i][j] = distances[i - 1][j - 1];\n      else {\n        let north = distances[i - 1][j] + 1;\n        let west = distances[i][j - 1] + 1;\n        distances[i][j] = north < west ? north : west;\n      }\n    }\n  }\n\n  return distances;\n}\n\n// This starts at the final weight, and walks \"backward\" by finding\n// the minimum previous weight recursively until the origin of the weight\n// matrix.\nfunction spliceOperationsFromEditDistances(distances) {\n  let i = distances.length - 1;\n  let j = distances[0].length - 1;\n  let current = distances[i][j];\n  let edits = [];\n  while (i > 0 || j > 0) {\n    if (i == 0) {\n      edits.push(EDIT_ADD);\n      j--;\n      continue;\n    }\n    if (j == 0) {\n      edits.push(EDIT_DELETE);\n      i--;\n      continue;\n    }\n    let northWest = distances[i - 1][j - 1];\n    let west = distances[i - 1][j];\n    let north = distances[i][j - 1];\n\n    let min;\n    if (west < north)\n      min = west < northWest ? west : northWest;\n    else\n      min = north < northWest ? north : northWest;\n\n    if (min == northWest) {\n      if (northWest == current) {\n        edits.push(EDIT_LEAVE);\n      } else {\n        edits.push(EDIT_UPDATE);\n        current = northWest;\n      }\n      i--;\n      j--;\n    } else if (min == west) {\n      edits.push(EDIT_DELETE);\n      i--;\n      current = west;\n    } else {\n      edits.push(EDIT_ADD);\n      j--;\n      current = north;\n    }\n  }\n\n  edits.reverse();\n  return edits;\n}\n\n/**\n * Splice Projection functions:\n *\n * A splice map is a representation of how a previous array of items\n * was transformed into a new array of items. Conceptually it is a list of\n * tuples of\n *\n *   <index, removed, addedCount>\n *\n * which are kept in ascending index order of. The tuple represents that at\n * the |index|, |removed| sequence of items were removed, and counting forward\n * from |index|, |addedCount| items were added.\n */\n\n/**\n * Lacking individual splice mutation information, the minimal set of\n * splices can be synthesized given the previous state and final state of an\n * array. The basic approach is to calculate the edit distance matrix and\n * choose the shortest path through it.\n *\n * Complexity: O(l * p)\n *   l: The length of the current array\n *   p: The length of the old array\n *\n * @param {Array} current The current \"changed\" array for which to\n * calculate splices.\n * @param {number} currentStart Starting index in the `current` array for\n * which splices are calculated.\n * @param {number} currentEnd Ending index in the `current` array for\n * which splices are calculated.\n * @param {Array} old The original \"unchanged\" array to compare `current`\n * against to determine splices.\n * @param {number} oldStart Starting index in the `old` array for\n * which splices are calculated.\n * @param {number} oldEnd Ending index in the `old` array for\n * which splices are calculated.\n * @return {Array} Returns an array of splice record objects. Each of these\n * contains: `index` the location where the splice occurred; `removed`\n * the array of removed items from this location; `addedCount` the number\n * of items added at this location.\n */\nfunction calcSplices(current, currentStart, currentEnd,\n                      old, oldStart, oldEnd) {\n  let prefixCount = 0;\n  let suffixCount = 0;\n  let splice;\n\n  let minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);\n  if (currentStart == 0 && oldStart == 0)\n    prefixCount = sharedPrefix(current, old, minLength);\n\n  if (currentEnd == current.length && oldEnd == old.length)\n    suffixCount = sharedSuffix(current, old, minLength - prefixCount);\n\n  currentStart += prefixCount;\n  oldStart += prefixCount;\n  currentEnd -= suffixCount;\n  oldEnd -= suffixCount;\n\n  if (currentEnd - currentStart == 0 && oldEnd - oldStart == 0)\n    return [];\n\n  if (currentStart == currentEnd) {\n    splice = newSplice(currentStart, [], 0);\n    while (oldStart < oldEnd)\n      splice.removed.push(old[oldStart++]);\n\n    return [ splice ];\n  } else if (oldStart == oldEnd)\n    return [ newSplice(currentStart, [], currentEnd - currentStart) ];\n\n  let ops = spliceOperationsFromEditDistances(\n      calcEditDistances(current, currentStart, currentEnd,\n                             old, oldStart, oldEnd));\n\n  splice = undefined;\n  let splices = [];\n  let index = currentStart;\n  let oldIndex = oldStart;\n  for (let i = 0; i < ops.length; i++) {\n    switch(ops[i]) {\n      case EDIT_LEAVE:\n        if (splice) {\n          splices.push(splice);\n          splice = undefined;\n        }\n\n        index++;\n        oldIndex++;\n        break;\n      case EDIT_UPDATE:\n        if (!splice)\n          splice = newSplice(index, [], 0);\n\n        splice.addedCount++;\n        index++;\n\n        splice.removed.push(old[oldIndex]);\n        oldIndex++;\n        break;\n      case EDIT_ADD:\n        if (!splice)\n          splice = newSplice(index, [], 0);\n\n        splice.addedCount++;\n        index++;\n        break;\n      case EDIT_DELETE:\n        if (!splice)\n          splice = newSplice(index, [], 0);\n\n        splice.removed.push(old[oldIndex]);\n        oldIndex++;\n        break;\n    }\n  }\n\n  if (splice) {\n    splices.push(splice);\n  }\n  return splices;\n}\n\nfunction sharedPrefix(current, old, searchLength) {\n  for (let i = 0; i < searchLength; i++)\n    if (!equals(current[i], old[i]))\n      return i;\n  return searchLength;\n}\n\nfunction sharedSuffix(current, old, searchLength) {\n  let index1 = current.length;\n  let index2 = old.length;\n  let count = 0;\n  while (count < searchLength && equals(current[--index1], old[--index2]))\n    count++;\n\n  return count;\n}\n\nfunction calculateSplices(current, previous) {\n  return calcSplices(current, 0, current.length, previous, 0,\n                          previous.length);\n}\n\nfunction equals(currentValue, previousValue) {\n  return currentValue === previousValue;\n}\n\nexport { calculateSplices };\n\n\n\n// WEBPACK FOOTER //\n// ../node_modules/@polymer/polymer/lib/utils/array-splice.js","\nimport { resolveUrl } from '@polymer/polymer/lib/utils/resolve-url';\n\nexport default (superClass) => {\n  return class extends superClass {\n    constructor () {\n      super();\n      this._boundHashChanged = this._hashChanged.bind(this);\n      this._boundUrlChanged = this._urlChanged.bind(this);\n      this._boundGlobalOnClick = this._globalOnClick.bind(this);\n    }\n\n    connectedCallback () {\n      if (super.disconnectedCallback) {\n        super.connectedCallback();\n      }\n      window.addEventListener('hashchange', this._boundHashChanged);\n      window.addEventListener('location-changed', this._boundUrlChanged);\n      window.addEventListener('popstate', this._boundUrlChanged);\n      document.body.addEventListener('click', this._boundGlobalOnClick, true);\n      this._lastChangedAt = window.performance.now() - (this.dwellTime - 200);\n      this._initialized = true;\n\n      // set initialize values\n      this.path = window.decodeURIComponent(window.location.pathname);\n      this.query = window.location.search.slice(1);\n      this.hash = window.decodeURIComponent(window.location.hash.slice(1));\n      this.dwellTime = 2000;\n      this._initialized = false;\n      this._urlChanged();\n    }\n\n    disconnectedCallback () {\n      if (super.disconnectedCallback) {\n        super.disconnectedCallback();\n      }\n      window.removeEventListener('hashchange', this._boundHashChanged);\n      window.removeEventListener('location-changed', this._boundUrlChanged);\n      window.removeEventListener('popstate', this._boundUrlChanged);\n      document.body.removeEventListener('click', this._boundGlobalOnClick);\n      this._initialized = false;\n    }\n\n    _hashChanged () {\n      this.hash = window.decodeURIComponent(window.location.hash.substring(1));\n    }\n\n    _urlChanged () {\n      // We want to extract all info out of the updated URL before we\n      // try to write anything back into it.\n      //\n      // i.e. without _dontUpdateUrl we'd overwrite the new path with the old\n      // one when we set this.hash. Likewise for query.\n      this._dontUpdateUrl = true;\n      this._hashChanged();\n      this.path = window.decodeURIComponent(window.location.pathname);\n      this.query = window.location.search.substring(1);\n      this._dontUpdateUrl = false;\n      this._updateUrl();\n    }\n\n    _getUrl () {\n      var partiallyEncodedPath = window.encodeURI(this.path).replace(/\\#/g, '%23').replace(/\\?/g, '%3F'); // eslint-disable-line no-useless-escape\n      var partiallyEncodedQuery = '';\n      if (this.query) {\n        partiallyEncodedQuery = '?' + this.query.replace(/\\#/g, '%23'); // eslint-disable-line no-useless-escape\n      }\n      var partiallyEncodedHash = '';\n      if (this.hash) {\n        partiallyEncodedHash = '#' + window.encodeURI(this.hash);\n      }\n      return (partiallyEncodedPath + partiallyEncodedQuery + partiallyEncodedHash);\n    }\n\n    _updateUrl () {\n      if (this._dontUpdateUrl || !this._initialized) {\n        return;\n      }\n\n      if (this.path === window.decodeURIComponent(window.location.pathname) &&\n          this.query === window.location.search.substring(1) &&\n          this.hash === window.decodeURIComponent(window.location.hash.substring(1))) {\n        // Nothing to do, the current URL is a representation of our properties.\n        return;\n      }\n      var newUrl = this._getUrl();\n      // Need to use a full URL in case the containing page has a base URI.\n      var fullNewUrl = resolveUrl(newUrl, window.location.protocol + '//' + window.location.host).href;\n      var now = window.performance.now();\n      var shouldReplace = this._lastChangedAt + this.dwellTime > now;\n      this._lastChangedAt = now;\n      if (shouldReplace) {\n        window.history.replaceState({}, '', fullNewUrl);\n      } else {\n        window.history.pushState({}, '', fullNewUrl);\n      }\n      window.dispatchEvent(new window.CustomEvent('location-changed'));\n    }\n\n    /**\n     * A necessary evil so that links work as expected. Does its best to\n     * bail out early if possible.\n     *\n     * @param {MouseEvent} event .\n     */\n    _globalOnClick (event) {\n      // If another event handler has stopped this event then there's nothing\n      // for us to do. This can happen e.g. when there are multiple\n      // iron-location elements in a page.\n      if (event.defaultPrevented) {\n        return;\n      }\n      var href = this._getSameOriginLinkHref(event);\n      if (!href) {\n        return;\n      }\n      event.preventDefault();\n      // If the navigation is to the current page we shouldn't add a history\n      // entry or fire a change event.\n      if (href === window.location.href) {\n        return;\n      }\n      window.history.pushState({}, '', href);\n      window.dispatchEvent(new window.CustomEvent('location-changed'));\n    }\n\n    /**\n     * Returns the absolute URL of the link (if any) that this click event\n     * is clicking on, if we can and should override the resulting full\n     * page navigation. Returns null otherwise.\n     *\n     * @param {MouseEvent} event .\n     * @return {string?} .\n     */\n    _getSameOriginLinkHref (event) {\n      // We only care about left-clicks.\n      if (event.button !== 0) {\n        return null;\n      }\n      // We don't want modified clicks, where the intent is to open the page\n      // in a new tab.\n      if (event.metaKey || event.ctrlKey) {\n        return null;\n      }\n      var eventPath = event.composedPath();\n      var anchor = null;\n      for (var i = 0; i < eventPath.length; i++) {\n        var element = eventPath[i];\n        if (element.tagName === 'A' && element.href) {\n          anchor = element;\n          break;\n        }\n      }\n      // If there's no link there's nothing to do.\n      if (!anchor) {\n        return null;\n      }\n      // Target blank is a new tab, don't intercept.\n      if (anchor.target === '_blank') {\n        // capture link click\n        if (anchor.href && window.ga) {\n          window.ga('send', 'event', 'Link', 'Click', anchor.href, 1);\n        }\n        return null;\n      }\n      // If the link is for an existing parent frame, don't intercept.\n      if ((anchor.target === '_top' ||\n          anchor.target === '_parent') &&\n          window.top !== window) {\n        return null;\n      }\n      var href = anchor.href;\n      // It only makes sense for us to intercept same-origin navigations.\n      // pushState/replaceState don't work with cross-origin links.\n      var url;\n      if (document.baseURI != null) {\n        url = resolveUrl(href, /** @type {string} */(document.baseURI));\n      } else {\n        url = resolveUrl(href);\n      }\n      var origin;\n      // IE Polyfill\n      if (window.location.origin) {\n        origin = window.location.origin;\n      } else {\n        origin = window.location.protocol + '//' + window.location.host;\n      }\n      var urlOrigin;\n      if (url.origin) {\n        urlOrigin = url.origin;\n      } else {\n        urlOrigin = url.protocol + '//' + url.host;\n      }\n      if (urlOrigin !== origin) {\n        return null;\n      }\n      var normalizedHref = url.pathname + url.search + url.hash;\n      // pathname should start with '/', but may not if `new URL` is not supported\n      if (normalizedHref[0] !== '/') {\n        normalizedHref = '/' + normalizedHref;\n      }\n      // If we've been configured not to handle this url... don't handle it!\n      if (this._urlSpaceRegExp &&\n          !this._urlSpaceRegExp.test(normalizedHref)) {\n        return null;\n      }\n      // Need to use a full URL in case the containing page has a base URI.\n      var fullNormalizedHref = resolveUrl(normalizedHref, window.location.href).href;\n      return fullNormalizedHref;\n    }\n\n    _makeRegExp (urlSpaceRegex) {\n      return RegExp(urlSpaceRegex);\n    }\n  };\n};\n\n\n\n// WEBPACK FOOTER //\n// ../src/core/mixins/location-mixin.js","// import 'polymer/lib/mixins/property-effects.html'\nexport default (superClass) => {\n  return class extends superClass {\n    connectedCallback () {\n      if (super.connectedCallback) {\n        super.connectedCallback();\n      }\n\n      // initialize values\n      this.paramsObject = {};\n      this._dontReact = false;\n    }\n\n    _queryChanged (query) {\n      this.paramsString = query;\n    }\n\n    _paramsStringChanged () {\n      this._dontReact = true;\n      this.paramsObject = this._decodeParams(this.paramsString);\n      this._dontReact = false;\n    }\n\n    paramsObjectChanged () {\n      if (this._dontReact) {\n        return;\n      }\n      this.paramsString = this._encodeParams(this.paramsObject)\n        .replace(/%3F/g, '?').replace(/%2F/g, '/').replace(/'/g, '%27');\n    }\n\n    _encodeParams (params) {\n      var encodedParams = [];\n      for (var key in params) {\n        var value = params[key];\n        if (value === '') {\n          encodedParams.push(encodeURIComponent(key));\n        } else if (value) {\n          encodedParams.push(\n            encodeURIComponent(key) +\n            '=' +\n            encodeURIComponent(value.toString())\n          );\n        }\n      }\n      return encodedParams.join('&');\n    }\n\n    _decodeParams (paramString) {\n      var params = {};\n      // Work around a bug in decodeURIComponent where + is not\n      // converted to spaces:\n      paramString = (paramString || '').replace(/\\+/g, '%20');\n      var paramList = paramString.split('&');\n      for (var i = 0; i < paramList.length; i++) {\n        var param = paramList[i].split('=');\n        if (param[0]) {\n          params[decodeURIComponent(param[0])] =\n              decodeURIComponent(param[1] || '');\n        }\n      }\n      return params;\n    }\n  };\n};\n\n\n\n// WEBPACK FOOTER //\n// ../src/core/mixins/query-params-mixin.js","/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\"]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined]\n  '(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = (options && options.delimiter) || '/'\n  var delimiters = (options && options.delimiters) || './'\n  var pathEscaped = false\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      pathEscaped = true\n      continue\n    }\n\n    var prev = ''\n    var next = str[index]\n    var name = res[2]\n    var capture = res[3]\n    var group = res[4]\n    var modifier = res[5]\n\n    if (!pathEscaped && path.length) {\n      var k = path.length - 1\n\n      if (delimiters.indexOf(path[k]) > -1) {\n        prev = path[k]\n        path = path.slice(0, k)\n      }\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n      pathEscaped = false\n    }\n\n    var partial = prev !== '' && next !== undefined && next !== prev\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = prev || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'\n    })\n  }\n\n  // Push any remaining characters.\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index))\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (data, options) {\n    var path = ''\n    var encode = (options && options.encode) || encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n        continue\n      }\n\n      var value = data ? data[token.name] : undefined\n      var segment\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) continue\n\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value))\n\n        if (!matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"')\n        }\n\n        path += token.prefix + segment\n        continue\n      }\n\n      if (token.optional) {\n        // Prepend partial segment prefixes.\n        if (token.partial) path += token.prefix\n\n        continue\n      }\n\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'))\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1')\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  if (!keys) return path\n\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        pattern: null\n      })\n    }\n  }\n\n  return path\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options))\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|')\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      if (keys) keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  // In non-strict mode we allow a delimiter at the end of a match.\n  if (!strict) {\n    route += '(?:' + delimiter + '(?=' + endsWith + '))?'\n  }\n\n  if (end) {\n    route += endsWith === '$' ? endsWith : '(?=' + endsWith + ')'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += '(?=' + delimiter + '|' + endsWith + ')'\n  }\n\n  return new RegExp('^' + route, flags(options))\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys)\n  }\n\n  if (Array.isArray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), keys, options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), keys, options)\n}\n\n\n\n// WEBPACK FOOTER //\n// ../node_modules/path-to-regexp/index.js","\n    export default {\n      'landing-page': () => { return import(/* webpackChunkName: \"landing-page\" */ '../../../src/main-module/pages/landing-page') }\n    }\n  \n\n\n// WEBPACK FOOTER //\n// ../src/core/fragments/index.js","const auth = {\n  auth: () => {}\n};\n\nexport default auth;\n\n\n// WEBPACK FOOTER //\n// ../src/authentication/index.js","import { html } from 'lit-html';\nimport style from './style.scss';\n\nexport default () => html`\n  <style is=\"custom-style\">\n    ${style.toString()}\n  </style>\n\n  <div class=\"main\" role=\"main\">\n    <slot></slot>\n  </div>\n`;\n\n\n\n// WEBPACK FOOTER //\n// ../src/core/components/main-router/template.js","\n        var result = require(\"!!../../../../builder/node_modules/css-loader/index.js!../../../../builder/node_modules/sass-loader/lib/loader.js!./style.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/core/components/main-router/style.scss\n// module id = 37\n// module chunks = 1","exports = module.exports = require(\"../../../../builder/node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \"div[role='main'] {\\n  position: relative; }\\n\\n::slotted(.page) {\\n  position: absolute;\\n  background-color: white;\\n  top: 0;\\n  opacity: 0;\\n  z-index: -1;\\n  transition: opacity 0.3s;\\n  display: none; }\\n\\n::slotted(*) > .page {\\n  position: absolute;\\n  background-color: white;\\n  top: 0;\\n  opacity: 0;\\n  z-index: -1;\\n  transition: opacity 0.3s;\\n  display: none; }\\n\\n::slotted(.page--on-view) {\\n  position: relative !important;\\n  opacity: 1;\\n  z-index: 0;\\n  display: block; }\\n\\n::slotted(*) > .page--on-view {\\n  position: relative !important;\\n  opacity: 1;\\n  z-index: 0;\\n  display: block; }\\n\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!../src/core/components/main-router/style.scss\n// module id = 38\n// module chunks = 1"],"sourceRoot":""}